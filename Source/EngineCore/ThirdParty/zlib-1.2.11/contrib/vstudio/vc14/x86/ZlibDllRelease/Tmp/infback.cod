; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\infback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@	; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ ; `string'
EXTRN	_inflate_fast:PROC
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@ DB 'invalid dis'
	DB	'tance too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@ DB 'invalid distance code'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@ DB 'invalid litera'
	DB	'l/length code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@ DB 'invalid distances set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@ DB 'invalid litera'
	DB	'l/lengths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@ DB 'invalid '
	DB	'code -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@ DB 'invalid bit leng'
	DB	'th repeat', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@ DB 'invalid code leng'
	DB	'ths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@ DB 'too many le'
	DB	'ngth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@ DB 'invalid store'
	DB	'd block lengths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	0f 84 c0 00 00
	00		 je	 $LN3@inflateBac
  0000e	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00011	0f 85 b7 00 00
	00		 jne	 $LN3@inflateBac
  00017	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001b	0f 85 ad 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 93 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 88 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	77 7d		 ja	 SHORT $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00045	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00050	75 0e		 jne	 SHORT $LN6@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;

  00052	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc

; 49   :         strm->opaque = (voidpf)0;

  00059	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  00060	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00064	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00066	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0006d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00070	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  00075	6a 01		 push	 1
  00077	ff 76 28	 push	 DWORD PTR [esi+40]
  0007a	ff d0		 call	 eax
  0007c	8b d0		 mov	 edx, eax
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00081	85 d2		 test	 edx, edx
  00083	75 0a		 jne	 SHORT $LN8@inflateBac
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0008a	5b		 pop	 ebx

; 70   : }

  0008b	5d		 pop	 ebp
  0008c	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  0008f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  00092	8b cf		 mov	 ecx, edi
  00094	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	5f		 pop	 edi
  0009d	d3 e0		 shl	 eax, cl
  0009f	5e		 pop	 esi
  000a0	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 66   :     state->window = window;
; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000a3	33 c0		 xor	 eax, eax
  000a5	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000a8	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000af	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000b6	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000bd	5b		 pop	 ebx

; 70   : }

  000be	5d		 pop	 ebp
  000bf	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi

; 42   :         return Z_STREAM_ERROR;

  000c4	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c9	5b		 pop	 ebx

; 70   : }

  000ca	5d		 pop	 ebp
  000cb	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000ce	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH

; 70   : }

  000d3	5d		 pop	 ebp
  000d4	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv1765 = -36						; size = 4
tv1761 = -36						; size = 4
tv1760 = -36						; size = 4
_len$1$ = -32						; size = 4
_here$1$ = -32						; size = 4
tv1750 = -32						; size = 4
tv1749 = -32						; size = 4
$T1 = -28						; size = 4
_copy$4$ = -28						; size = 4
_copy$3$ = -28						; size = 4
_last$ = -28						; size = 4
_here$ = -28						; size = 4
_state$1$ = -24						; size = 4
_put$1$ = -20						; size = 4
_left$1$ = -16						; size = 4
_bits$1$ = -12						; size = 4
_hold$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	57		 push	 edi
  0000a	85 c9		 test	 ecx, ecx
  0000c	0f 84 2b 0d 00
	00		 je	 $LN254@inflateBac
  00012	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  00015	89 7d e8	 mov	 DWORD PTR _state$1$[ebp], edi
  00018	85 ff		 test	 edi, edi
  0001a	0f 84 1d 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  00020	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 279  :     state->mode = TYPE;

  00027	c7 47 04 3f 3f
	00 00		 mov	 DWORD PTR [edi+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 281  :     state->whave = 0;

  00035	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00041	53		 push	 ebx
  00042	56		 push	 esi

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN343@inflateBac
  00047	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004a	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004c	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  0004e	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00051	33 d2		 xor	 edx, edx
  00053	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00056	33 db		 xor	 ebx, ebx

; 287  :     left = state->wsize;

  00058	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0005b	89 45 f0	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00069	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0006c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006f	0f 87 65 0c 00
	00		 ja	 $LN341@inflateBac
$LN500@inflateBac:
  00075	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN473@inflateBac[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN502@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  00086	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0008a	74 1b		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  0008c	8b cb		 mov	 ecx, ebx

; 296  :                 state->mode = DONE;

  0008e	c7 47 04 50 3f
	00 00		 mov	 DWORD PTR [edi+4], 16208 ; 00003f50H
  00095	83 e1 07	 and	 ecx, 7
  00098	d3 ea		 shr	 edx, cl
  0009a	2b d9		 sub	 ebx, ecx
  0009c	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0009f	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 297  :                 break;

  000a2	e9 22 0c 00 00	 jmp	 $LN480@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000a7	83 fb 03	 cmp	 ebx, 3
  000aa	73 3e		 jae	 SHORT $LN10@inflateBac
  000ac	0f 1f 40 00	 npad	 4
$LL13@inflateBac:
  000b0	85 f6		 test	 esi, esi
  000b2	75 18		 jne	 SHORT $LN18@inflateBac
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bc	8b f0		 mov	 esi, eax
  000be	83 c4 08	 add	 esp, 8
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 2c 0c 00
	00		 je	 $LN369@inflateBac
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN18@inflateBac:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000cf	8b cb		 mov	 ecx, ebx
  000d1	83 c3 08	 add	 ebx, 8
  000d4	4e		 dec	 esi
  000d5	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000d8	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000db	d3 e0		 shl	 eax, cl
  000dd	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000e0	03 d0		 add	 edx, eax
  000e2	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  000e5	83 fb 03	 cmp	 ebx, 3
  000e8	72 c6		 jb	 SHORT $LL13@inflateBac
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000ea	8b c2		 mov	 eax, edx

; 301  :             DROPBITS(1);

  000ec	d1 ea		 shr	 edx, 1
  000ee	83 e0 01	 and	 eax, 1
  000f1	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 302  :             switch (BITS(2)) {

  000f4	8b c2		 mov	 eax, edx
  000f6	83 e0 03	 and	 eax, 3
  000f9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN503@inflateBac[eax*4]
$LN259@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00100	c1 ea 02	 shr	 edx, 2
  00103	83 eb 03	 sub	 ebx, 3
  00106	c7 47 04 41 3f
	00 00		 mov	 DWORD PTR [edi+4], 16193 ; 00003f41H
  0010d	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00110	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00113	e9 b1 0b 00 00	 jmp	 $LN480@inflateBac
$LN260@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;
; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00118	8b cf		 mov	 ecx, edi
  0011a	e8 00 00 00 00	 call	 _fixedtables

; 322  :             }
; 323  :             DROPBITS(2);

  0011f	c1 ea 02	 shr	 edx, 2
  00122	83 eb 03	 sub	 ebx, 3
  00125	c7 47 04 48 3f
	00 00		 mov	 DWORD PTR [edi+4], 16200 ; 00003f48H
  0012c	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0012f	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00132	e9 92 0b 00 00	 jmp	 $LN480@inflateBac
$LN261@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00137	c1 ea 02	 shr	 edx, 2
  0013a	83 eb 03	 sub	 ebx, 3
  0013d	c7 47 04 44 3f
	00 00		 mov	 DWORD PTR [edi+4], 16196 ; 00003f44H
  00144	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00147	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  0014a	e9 7a 0b 00 00	 jmp	 $LN480@inflateBac
$LN262@inflateBac:

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;
; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0014f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00152	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type?$AA@

; 321  :                 state->mode = BAD;

  00159	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00160	c1 ea 02	 shr	 edx, 2
  00163	83 eb 03	 sub	 ebx, 3
  00166	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00169	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  0016c	e9 58 0b 00 00	 jmp	 $LN480@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  00171	8b cb		 mov	 ecx, ebx
  00173	83 e1 07	 and	 ecx, 7
  00176	2b d9		 sub	 ebx, ecx
  00178	d3 ea		 shr	 edx, cl
  0017a	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0017d	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 329  :             NEEDBITS(32);

  00180	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00183	73 3c		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00185	85 f6		 test	 esi, esi
  00187	75 1a		 jne	 SHORT $LN40@inflateBac
  00189	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0018c	50		 push	 eax
  0018d	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00190	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00193	8b f0		 mov	 esi, eax
  00195	83 c4 08	 add	 esp, 8
  00198	85 f6		 test	 esi, esi
  0019a	0f 84 55 0b 00
	00		 je	 $LN369@inflateBac
  001a0	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN40@inflateBac:
  001a3	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  001a6	8b cb		 mov	 ecx, ebx
  001a8	83 c3 08	 add	 ebx, 8
  001ab	4e		 dec	 esi
  001ac	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  001af	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001b2	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  001b5	d3 e0		 shl	 eax, cl
  001b7	03 d0		 add	 edx, eax
  001b9	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  001bc	83 fb 20	 cmp	 ebx, 32			; 00000020H
  001bf	72 c4		 jb	 SHORT $LL35@inflateBac
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001c1	8b c2		 mov	 eax, edx
  001c3	0f b7 ca	 movzx	 ecx, dx
  001c6	f7 d0		 not	 eax
  001c8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cb	3b c8		 cmp	 ecx, eax
  001cd	74 16		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001d2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths?$AA@

; 332  :                 state->mode = BAD;

  001d9	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 333  :                 break;

  001e0	e9 e4 0a 00 00	 jmp	 $LN480@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001e5	33 d2		 xor	 edx, edx
  001e7	89 4f 44	 mov	 DWORD PTR [edi+68], ecx
  001ea	33 db		 xor	 ebx, ebx
  001ec	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  001ef	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001f2	3b ca		 cmp	 ecx, edx
  001f4	0f 84 92 00 00
	00		 je	 $LN47@inflateBac
  001fa	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  001fd	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 342  :                 copy = state->length;

  00200	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00203	89 45 e4	 mov	 DWORD PTR _copy$3$[ebp], eax

; 343  :                 PULL();

  00206	85 f6		 test	 esi, esi
  00208	75 1a		 jne	 SHORT $LN48@inflateBac
  0020a	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0020d	50		 push	 eax
  0020e	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00211	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00214	8b f0		 mov	 esi, eax
  00216	83 c4 08	 add	 esp, 8
  00219	85 f6		 test	 esi, esi
  0021b	0f 84 e2 0a 00
	00		 je	 $LN371@inflateBac
  00221	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00224	85 c9		 test	 ecx, ecx
  00226	75 25		 jne	 SHORT $LN51@inflateBac
  00228	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  0022b	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0022e	51		 push	 ecx
  0022f	50		 push	 eax
  00230	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00233	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00236	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00239	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  0023c	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0023f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00242	85 c0		 test	 eax, eax
  00244	0f 85 b2 0a 00
	00		 jne	 $LN372@inflateBac
  0024a	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;

  0024d	8b 45 e4	 mov	 eax, DWORD PTR _copy$3$[ebp]
  00250	3b c6		 cmp	 eax, esi
  00252	0f 47 c6	 cmova	 eax, esi

; 346  :                 if (copy > left) copy = left;

  00255	3b c1		 cmp	 eax, ecx
  00257	0f 47 c1	 cmova	 eax, ecx

; 347  :                 zmemcpy(put, next, copy);

  0025a	8b 4d ec	 mov	 ecx, DWORD PTR _put$1$[ebp]
  0025d	50		 push	 eax
  0025e	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  00261	89 45 e4	 mov	 DWORD PTR _copy$3$[ebp], eax
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;

  0026a	8b 45 e4	 mov	 eax, DWORD PTR _copy$3$[ebp]
  0026d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 349  :                 next += copy;
; 350  :                 left -= copy;

  00270	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00273	2b f0		 sub	 esi, eax
  00275	01 45 fc	 add	 DWORD PTR _next$[ebp], eax
  00278	2b c8		 sub	 ecx, eax

; 351  :                 put += copy;

  0027a	01 45 ec	 add	 DWORD PTR _put$1$[ebp], eax

; 352  :                 state->length -= copy;

  0027d	29 47 44	 sub	 DWORD PTR [edi+68], eax
  00280	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00283	0f 85 77 ff ff
	ff		 jne	 $LL46@inflateBac
  00289	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  0028c	c7 47 04 3f 3f
	00 00		 mov	 DWORD PTR [edi+4], 16191 ; 00003f3fH

; 356  :             break;

  00293	e9 31 0a 00 00	 jmp	 $LN480@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  00298	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0029b	73 3d		 jae	 SHORT $LN54@inflateBac
  0029d	0f 1f 00	 npad	 3
$LL57@inflateBac:
  002a0	85 f6		 test	 esi, esi
  002a2	75 18		 jne	 SHORT $LN62@inflateBac
  002a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	83 c4 08	 add	 esp, 8
  002b1	85 f6		 test	 esi, esi
  002b3	0f 84 3c 0a 00
	00		 je	 $LN369@inflateBac
  002b9	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN62@inflateBac:
  002bc	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  002bf	8b cb		 mov	 ecx, ebx
  002c1	83 c3 08	 add	 ebx, 8
  002c4	4e		 dec	 esi
  002c5	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  002c8	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  002cb	d3 e0		 shl	 eax, cl
  002cd	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  002d0	03 d0		 add	 edx, eax
  002d2	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  002d5	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002d8	72 c6		 jb	 SHORT $LL57@inflateBac
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002da	8b c2		 mov	 eax, edx

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002dc	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002df	83 e0 1f	 and	 eax, 31			; 0000001fH
  002e2	c1 ea 05	 shr	 edx, 5
  002e5	05 01 01 00 00	 add	 eax, 257		; 00000101H
  002ea	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  002ed	89 47 64	 mov	 DWORD PTR [edi+100], eax
  002f0	8b c2		 mov	 eax, edx
  002f2	83 e0 1f	 and	 eax, 31			; 0000001fH
  002f5	c1 ea 05	 shr	 edx, 5
  002f8	40		 inc	 eax
  002f9	89 47 68	 mov	 DWORD PTR [edi+104], eax
  002fc	8b c2		 mov	 eax, edx
  002fe	83 e0 0f	 and	 eax, 15			; 0000000fH
  00301	c1 ea 04	 shr	 edx, 4
  00304	83 c0 04	 add	 eax, 4
  00307	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  0030a	81 7f 64 1e 01
	00 00		 cmp	 DWORD PTR [edi+100], 286 ; 0000011eH
  00311	89 47 60	 mov	 DWORD PTR [edi+96], eax
  00314	0f 87 d6 04 00
	00		 ja	 $LN277@inflateBac
  0031a	83 7f 68 1e	 cmp	 DWORD PTR [edi+104], 30	; 0000001eH
  0031e	0f 87 cc 04 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00324	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0

; 378  :             while (state->have < state->ncode) {

  0032b	85 c0		 test	 eax, eax
  0032d	76 76		 jbe	 SHORT $LN352@inflateBac
  0032f	90		 npad	 1
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00330	83 fb 03	 cmp	 ebx, 3
  00333	73 41		 jae	 SHORT $LN76@inflateBac
  00335	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL79@inflateBac:
  00338	85 f6		 test	 esi, esi
  0033a	75 1b		 jne	 SHORT $LN84@inflateBac
  0033c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0033f	50		 push	 eax
  00340	51		 push	 ecx
  00341	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00344	8b f0		 mov	 esi, eax
  00346	83 c4 08	 add	 esp, 8
  00349	85 f6		 test	 esi, esi
  0034b	0f 84 a4 09 00
	00		 je	 $LN369@inflateBac
  00351	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00354	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  00357	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0035a	8b cb		 mov	 ecx, ebx
  0035c	d3 e0		 shl	 eax, cl
  0035e	83 c3 08	 add	 ebx, 8
  00361	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00364	03 d0		 add	 edx, eax
  00366	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00369	4e		 dec	 esi
  0036a	40		 inc	 eax
  0036b	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0036e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00371	83 fb 03	 cmp	 ebx, 3
  00374	72 c2		 jb	 SHORT $LL79@inflateBac
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00376	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00379	8b ca		 mov	 ecx, edx
  0037b	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  0037e	c1 ea 03	 shr	 edx, 3
  00381	83 eb 03	 sub	 ebx, 3
  00384	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00387	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0038a	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00392	66 89 4c 47 74	 mov	 WORD PTR [edi+eax*2+116], cx
  00397	ff 47 6c	 inc	 DWORD PTR [edi+108]
  0039a	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0039d	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  003a0	3b 47 60	 cmp	 eax, DWORD PTR [edi+96]
  003a3	72 8b		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 382  :             }
; 383  :             while (state->have < 19)

  003a5	83 7f 6c 13	 cmp	 DWORD PTR [edi+108], 19	; 00000013H
  003a9	73 20		 jae	 SHORT $LN91@inflateBac
  003ab	0f 1f 44 00 00	 npad	 5
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  003b0	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  003b3	33 c9		 xor	 ecx, ecx
  003b5	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  003bd	66 89 4c 47 74	 mov	 WORD PTR [edi+eax*2+116], cx
  003c2	ff 47 6c	 inc	 DWORD PTR [edi+108]
  003c5	83 7f 6c 13	 cmp	 DWORD PTR [edi+108], 19	; 00000013H
  003c9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003cb	8d 87 34 05 00
	00		 lea	 eax, DWORD PTR [edi+1332]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003d1	c7 47 58 07 00
	00 00		 mov	 DWORD PTR [edi+88], 7

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003d8	8d 97 f4 02 00
	00		 lea	 edx, DWORD PTR [edi+756]
  003de	89 47 70	 mov	 DWORD PTR [edi+112], eax
  003e1	52		 push	 edx
  003e2	89 47 50	 mov	 DWORD PTR [edi+80], eax
  003e5	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  003e8	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  003eb	50		 push	 eax
  003ec	51		 push	 ecx
  003ed	6a 13		 push	 19			; 00000013H
  003ef	8d 57 74	 lea	 edx, DWORD PTR [edi+116]
  003f2	89 45 dc	 mov	 DWORD PTR tv1765[ebp], eax
  003f5	33 c9		 xor	 ecx, ecx
  003f7	e8 00 00 00 00	 call	 _inflate_table
  003fc	83 c4 10	 add	 esp, 16			; 00000010H

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  003ff	85 c0		 test	 eax, eax
  00401	74 16		 je	 SHORT $LN280@inflateBac

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  00403	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00406	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set?$AA@

; 392  :                 state->mode = BAD;

  0040d	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 393  :                 break;

  00414	e9 ad 08 00 00	 jmp	 $LN487@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00419	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  0041c	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
  00423	03 47 64	 add	 eax, DWORD PTR [edi+100]
  00426	0f 84 65 02 00
	00		 je	 $LN93@inflateBac
  0042c	0f 1f 40 00	 npad	 4
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00430	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00433	ba 01 00 00 00	 mov	 edx, 1
  00438	8b 47 50	 mov	 eax, DWORD PTR [edi+80]

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  0043b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  0043e	d3 e2		 shl	 edx, cl
  00440	4a		 dec	 edx
  00441	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  00444	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00447	8b c8		 mov	 ecx, eax
  00449	c1 e9 08	 shr	 ecx, 8
  0044c	0f b6 c9	 movzx	 ecx, cl
  0044f	89 45 e0	 mov	 DWORD PTR _here$1$[ebp], eax
  00452	89 45 e4	 mov	 DWORD PTR _here$[ebp], eax
  00455	3b cb		 cmp	 ecx, ebx
  00457	76 62		 jbe	 SHORT $LN375@inflateBac
  00459	0f 1f 80 00 00
	00 00		 npad	 7
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00460	85 f6		 test	 esi, esi
  00462	75 1a		 jne	 SHORT $LN100@inflateBac
  00464	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00467	50		 push	 eax
  00468	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0046b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0046e	8b f0		 mov	 esi, eax
  00470	83 c4 08	 add	 esp, 8
  00473	85 f6		 test	 esi, esi
  00475	0f 84 7a 08 00
	00		 je	 $LN369@inflateBac
  0047b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  0047e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00481	8b cb		 mov	 ecx, ebx
  00483	d3 e0		 shl	 eax, cl
  00485	47		 inc	 edi
  00486	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00489	ba 01 00 00 00	 mov	 edx, 1
  0048e	8b 45 dc	 mov	 eax, DWORD PTR tv1765[ebp]
  00491	83 c3 08	 add	 ebx, 8
  00494	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00497	4e		 dec	 esi
  00498	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049a	8b 45 e8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0049d	d3 e2		 shl	 edx, cl
  0049f	4a		 dec	 edx
  004a0	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  004a3	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  004a6	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  004a9	8b c8		 mov	 ecx, eax
  004ab	c1 e9 08	 shr	 ecx, 8
  004ae	0f b6 c9	 movzx	 ecx, cl
  004b1	89 45 e0	 mov	 DWORD PTR _here$1$[ebp], eax
  004b4	89 45 e4	 mov	 DWORD PTR _here$[ebp], eax
  004b7	3b cb		 cmp	 ecx, ebx
  004b9	77 a5		 ja	 SHORT $LL94@inflateBac
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004bb	8b d0		 mov	 edx, eax
  004bd	c1 ea 10	 shr	 edx, 16			; 00000010H
  004c0	66 83 fa 10	 cmp	 dx, 16			; 00000010H
  004c4	73 21		 jae	 SHORT $LN496@inflateBac

; 406  :                     DROPBITS(here.bits);
; 407  :                     state->lens[state->have++] = here.val;

  004c6	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]
  004c9	c1 e8 08	 shr	 eax, 8
  004cc	0f b6 c8	 movzx	 ecx, al
  004cf	d3 6d f8	 shr	 DWORD PTR _hold$1$[ebp], cl
  004d2	2b d9		 sub	 ebx, ecx
  004d4	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  004d7	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  004da	66 89 54 47 74	 mov	 WORD PTR [edi+eax*2+116], dx
  004df	ff 47 6c	 inc	 DWORD PTR [edi+108]

; 408  :                 }

  004e2	e9 99 01 00 00	 jmp	 $LN497@inflateBac
$LN496@inflateBac:
  004e7	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  004ea	0f 85 88 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  004f0	8b c8		 mov	 ecx, eax
  004f2	c1 e9 08	 shr	 ecx, 8
  004f5	0f b6 c9	 movzx	 ecx, cl
  004f8	83 c1 02	 add	 ecx, 2
  004fb	89 4d e4	 mov	 DWORD PTR $T1[ebp], ecx
  004fe	3b d9		 cmp	 ebx, ecx
  00500	73 3d		 jae	 SHORT $LN106@inflateBac
$LL109@inflateBac:
  00502	85 f6		 test	 esi, esi
  00504	75 1d		 jne	 SHORT $LN114@inflateBac
  00506	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00509	50		 push	 eax
  0050a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0050d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00510	8b f0		 mov	 esi, eax
  00512	83 c4 08	 add	 esp, 8
  00515	85 f6		 test	 esi, esi
  00517	0f 84 d8 07 00
	00		 je	 $LN369@inflateBac
  0051d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00520	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN114@inflateBac:
  00523	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00526	8b cb		 mov	 ecx, ebx
  00528	d3 e0		 shl	 eax, cl
  0052a	47		 inc	 edi
  0052b	03 d0		 add	 edx, eax
  0052d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00530	83 c3 08	 add	 ebx, 8
  00533	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00536	4e		 dec	 esi
  00537	3b 5d e4	 cmp	 ebx, DWORD PTR $T1[ebp]
  0053a	72 c6		 jb	 SHORT $LL109@inflateBac
  0053c	8b 45 e0	 mov	 eax, DWORD PTR _here$1$[ebp]
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);
; 413  :                         if (state->have == 0) {

  0053f	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]
  00542	0f b6 cc	 movzx	 ecx, ah
  00545	d3 ea		 shr	 edx, cl
  00547	2b d9		 sub	 ebx, ecx
  00549	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0054c	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0054f	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00552	85 c0		 test	 eax, eax
  00554	0f 84 64 01 00
	00		 je	 $LN380@inflateBac

; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);

  0055a	0f b7 44 47 72	 movzx	 eax, WORD PTR [edi+eax*2+114]
  0055f	89 45 e0	 mov	 DWORD PTR _len$1$[ebp], eax

; 419  :                         copy = 3 + BITS(2);

  00562	8b c2		 mov	 eax, edx
  00564	83 e0 03	 and	 eax, 3

; 420  :                         DROPBITS(2);

  00567	c1 ea 02	 shr	 edx, 2
  0056a	83 c0 03	 add	 eax, 3
  0056d	83 eb 02	 sub	 ebx, 2
  00570	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax

; 421  :                     }

  00573	e9 dd 00 00 00	 jmp	 $LN498@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  00578	66 83 7d e6 11	 cmp	 WORD PTR _here$[ebp+2], 17 ; 00000011H

; 423  :                         NEEDBITS(here.bits + 3);

  0057d	0f b6 cc	 movzx	 ecx, ah
  00580	75 64		 jne	 SHORT $LN142@inflateBac
  00582	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00585	89 4d e0	 mov	 DWORD PTR tv1750[ebp], ecx
  00588	3b d8		 cmp	 ebx, eax
  0058a	73 43		 jae	 SHORT $LN123@inflateBac
  0058c	0f 1f 40 00	 npad	 4
$LL126@inflateBac:
  00590	85 f6		 test	 esi, esi
  00592	75 1d		 jne	 SHORT $LN131@inflateBac
  00594	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00597	50		 push	 eax
  00598	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0059b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0059e	8b f0		 mov	 esi, eax
  005a0	83 c4 08	 add	 esp, 8
  005a3	85 f6		 test	 esi, esi
  005a5	0f 84 4a 07 00
	00		 je	 $LN369@inflateBac
  005ab	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  005ae	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN131@inflateBac:
  005b1	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005b4	8b cb		 mov	 ecx, ebx
  005b6	d3 e0		 shl	 eax, cl
  005b8	47		 inc	 edi
  005b9	8b 4d e0	 mov	 ecx, DWORD PTR tv1750[ebp]
  005bc	03 d0		 add	 edx, eax
  005be	83 c3 08	 add	 ebx, 8
  005c1	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  005c4	4e		 dec	 esi
  005c5	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005c8	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  005cb	3b d8		 cmp	 ebx, eax
  005cd	72 c1		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005cf	d3 ea		 shr	 edx, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005d1	8b c2		 mov	 eax, edx
  005d3	83 e0 07	 and	 eax, 7
  005d6	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005d9	c1 ea 03	 shr	 edx, 3
  005dc	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax
  005df	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  005e4	eb 5e		 jmp	 SHORT $LN499@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005e6	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  005e9	89 4d e0	 mov	 DWORD PTR tv1749[ebp], ecx
  005ec	3b d8		 cmp	 ebx, eax
  005ee	73 3f		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005f0	85 f6		 test	 esi, esi
  005f2	75 1d		 jne	 SHORT $LN148@inflateBac
  005f4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005f7	50		 push	 eax
  005f8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005fb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005fe	8b f0		 mov	 esi, eax
  00600	83 c4 08	 add	 esp, 8
  00603	85 f6		 test	 esi, esi
  00605	0f 84 ea 06 00
	00		 je	 $LN369@inflateBac
  0060b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  0060e	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN148@inflateBac:
  00611	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00614	8b cb		 mov	 ecx, ebx
  00616	d3 e0		 shl	 eax, cl
  00618	47		 inc	 edi
  00619	8b 4d e0	 mov	 ecx, DWORD PTR tv1749[ebp]
  0061c	03 d0		 add	 edx, eax
  0061e	83 c3 08	 add	 ebx, 8
  00621	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00624	4e		 dec	 esi
  00625	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00628	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  0062b	3b d8		 cmp	 ebx, eax
  0062d	72 c1		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  0062f	d3 ea		 shr	 edx, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  00631	8b c2		 mov	 eax, edx
  00633	83 e0 7f	 and	 eax, 127		; 0000007fH
  00636	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  00639	c1 ea 07	 shr	 edx, 7
  0063c	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax
  0063f	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN499@inflateBac:
  00644	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]
  00647	2b c1		 sub	 eax, ecx
  00649	03 d8		 add	 ebx, eax
  0064b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _len$1$[ebp], 0
  00652	8b 45 e4	 mov	 eax, DWORD PTR _copy$4$[ebp]
$LN498@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  00655	8b 4f 6c	 mov	 ecx, DWORD PTR [edi+108]
  00658	03 c8		 add	 ecx, eax
  0065a	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  0065d	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00660	03 47 64	 add	 eax, DWORD PTR [edi+100]
  00663	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00666	3b c8		 cmp	 ecx, eax
  00668	77 54		 ja	 SHORT $LN380@inflateBac
  0066a	8b 4d e4	 mov	 ecx, DWORD PTR _copy$4$[ebp]
  0066d	8b 55 e0	 mov	 edx, DWORD PTR _len$1$[ebp]
$LL157@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00670	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00673	66 89 54 47 74	 mov	 WORD PTR [edi+eax*2+116], dx
  00678	ff 47 6c	 inc	 DWORD PTR [edi+108]
  0067b	83 e9 01	 sub	 ecx, 1
  0067e	75 f0		 jne	 SHORT $LL157@inflateBac
$LN497@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00680	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00683	03 47 64	 add	 eax, DWORD PTR [edi+100]
  00686	8b 4f 6c	 mov	 ecx, DWORD PTR [edi+108]
  00689	3b c8		 cmp	 ecx, eax
  0068b	0f 82 9f fd ff
	ff		 jb	 $LL92@inflateBac
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  00691	81 7f 04 51 3f
	00 00		 cmp	 DWORD PTR [edi+4], 16209 ; 00003f51H
  00698	0f 84 28 06 00
	00		 je	 $LN487@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  0069e	66 83 bf 74 02
	00 00 00	 cmp	 WORD PTR [edi+628], 0
  006a6	75 2c		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006a8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006ab	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9b@

; 452  :                 state->mode = BAD;

  006b2	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 453  :                 break;

  006b9	e9 08 06 00 00	 jmp	 $LN487@inflateBac
$LN380@inflateBac:

; 414  :                             strm->msg = (char *)"invalid bit length repeat";

  006be	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006c1	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat?$AA@

; 415  :                             state->mode = BAD;

  006c8	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 416  :                             break;

  006cf	e9 f5 05 00 00	 jmp	 $LN480@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;

  006d4	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]

; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;

  006d7	c7 47 58 09 00
	00 00		 mov	 DWORD PTR [edi+88], 9
  006de	8d 87 34 05 00
	00		 lea	 eax, DWORD PTR [edi+1332]
  006e4	89 01		 mov	 DWORD PTR [ecx], eax

; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006e6	8d 97 f4 02 00
	00		 lea	 edx, DWORD PTR [edi+756]
  006ec	52		 push	 edx
  006ed	89 47 50	 mov	 DWORD PTR [edi+80], eax
  006f0	8d 57 74	 lea	 edx, DWORD PTR [edi+116]
  006f3	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  006f6	50		 push	 eax
  006f7	51		 push	 ecx
  006f8	ff 77 64	 push	 DWORD PTR [edi+100]
  006fb	b9 01 00 00 00	 mov	 ecx, 1
  00700	e8 00 00 00 00	 call	 _inflate_table
  00705	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00708	85 c0		 test	 eax, eax
  0070a	74 16		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  0070c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0070f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set?$AA@

; 466  :                 state->mode = BAD;

  00716	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 467  :                 break;

  0071d	e9 a4 05 00 00	 jmp	 $LN487@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00722	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00725	8d 4f 70	 lea	 ecx, DWORD PTR [edi+112]
  00728	89 47 54	 mov	 DWORD PTR [edi+84], eax

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  0072b	8d 97 f4 02 00
	00		 lea	 edx, DWORD PTR [edi+756]
  00731	52		 push	 edx
  00732	8d 47 5c	 lea	 eax, DWORD PTR [edi+92]
  00735	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6
  0073b	50		 push	 eax
  0073c	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  0073f	83 c0 3a	 add	 eax, 58			; 0000003aH
  00742	51		 push	 ecx
  00743	ff 77 68	 push	 DWORD PTR [edi+104]
  00746	b9 02 00 00 00	 mov	 ecx, 2
  0074b	8d 14 47	 lea	 edx, DWORD PTR [edi+eax*2]
  0074e	e8 00 00 00 00	 call	 _inflate_table

; 476  :                 break;

  00753	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00756	83 c4 10	 add	 esp, 16			; 00000010H
  00759	85 c0		 test	 eax, eax
  0075b	74 16		 je	 SHORT $LN301@inflateBac

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {
; 474  :                 strm->msg = (char *)"invalid distances set";

  0075d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00760	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set?$AA@

; 475  :                 state->mode = BAD;

  00767	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 476  :                 break;

  0076e	e9 56 05 00 00	 jmp	 $LN480@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00773	c7 47 04 48 3f
	00 00		 mov	 DWORD PTR [edi+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  0077a	83 fe 06	 cmp	 esi, 6
  0077d	0f 82 83 00 00
	00		 jb	 $LN303@inflateBac
  00783	8b 45 f0	 mov	 eax, DWORD PTR _left$1$[ebp]
  00786	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0078b	72 79		 jb	 SHORT $LN303@inflateBac

; 484  :                 RESTORE();

  0078d	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00790	8b 4d ec	 mov	 ecx, DWORD PTR _put$1$[ebp]
  00793	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  00796	8b cf		 mov	 ecx, edi
  00798	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]
  0079b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0079e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007a1	89 01		 mov	 DWORD PTR [ecx], eax
  007a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 485  :                 if (state->whave < state->wsize)

  007a6	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  007a9	89 57 3c	 mov	 DWORD PTR [edi+60], edx
  007ac	89 5f 40	 mov	 DWORD PTR [edi+64], ebx
  007af	39 4f 30	 cmp	 DWORD PTR [edi+48], ecx
  007b2	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007b4	8b c1		 mov	 eax, ecx
  007b6	2b 45 f0	 sub	 eax, DWORD PTR _left$1$[ebp]
  007b9	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007bc	51		 push	 ecx
  007bd	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  007c0	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007c5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007c8	83 c4 08	 add	 esp, 8
  007cb	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  007ce	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  007d1	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  007d4	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007d7	89 45 f0	 mov	 DWORD PTR _left$1$[ebp], eax
  007da	8b 01		 mov	 eax, DWORD PTR [ecx]
  007dc	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  007df	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
  007e2	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  007e5	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  007e8	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 489  :                 break;

  007eb	e9 d9 04 00 00	 jmp	 $LN480@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  007f0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  007f3	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5symb@

; 370  :                 state->mode = BAD;

  007fa	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 371  :                 break;

  00801	e9 c3 04 00 00	 jmp	 $LN480@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00806	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00809	ba 01 00 00 00	 mov	 edx, 1
  0080e	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00811	d3 e2		 shl	 edx, cl
  00813	4a		 dec	 edx
  00814	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  00817	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  0081a	8b c8		 mov	 ecx, eax
  0081c	c1 e9 08	 shr	 ecx, 8
  0081f	0f b6 c9	 movzx	 ecx, cl
  00822	3b cb		 cmp	 ecx, ebx
  00824	76 52		 jbe	 SHORT $LN382@inflateBac
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00826	85 f6		 test	 esi, esi
  00828	75 17		 jne	 SHORT $LN171@inflateBac
  0082a	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0082d	50		 push	 eax
  0082e	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00831	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00834	8b f0		 mov	 esi, eax
  00836	83 c4 08	 add	 esp, 8
  00839	85 f6		 test	 esi, esi
  0083b	0f 84 b4 04 00
	00		 je	 $LN369@inflateBac
$LN171@inflateBac:
  00841	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00844	8b cb		 mov	 ecx, ebx
  00846	ba 01 00 00 00	 mov	 edx, 1
  0084b	83 c3 08	 add	 ebx, 8
  0084e	4e		 dec	 esi
  0084f	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00852	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00855	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00858	d3 e0		 shl	 eax, cl
  0085a	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  0085d	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00860	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00863	d3 e2		 shl	 edx, cl
  00865	4a		 dec	 edx
  00866	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  00869	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0086c	8b c8		 mov	 ecx, eax
  0086e	c1 e9 08	 shr	 ecx, 8
  00871	0f b6 c9	 movzx	 ecx, cl
  00874	3b cb		 cmp	 ecx, ebx
  00876	77 ae		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  00878	84 c0		 test	 al, al
  0087a	0f 84 cc 00 00
	00		 je	 $LN490@inflateBac
  00880	a8 f0		 test	 al, 240			; 000000f0H
  00882	0f 85 c4 00 00
	00		 jne	 $LN490@inflateBac

; 499  :                 last = here;
; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  00888	8b c8		 mov	 ecx, eax
  0088a	bb 01 00 00 00	 mov	 ebx, 1
  0088f	c1 e9 08	 shr	 ecx, 8
  00892	8b d0		 mov	 edx, eax
  00894	0f b6 f9	 movzx	 edi, cl
  00897	89 4d dc	 mov	 DWORD PTR tv1761[ebp], ecx
  0089a	0f b6 c8	 movzx	 ecx, al
  0089d	03 cf		 add	 ecx, edi
  0089f	c1 e8 10	 shr	 eax, 16			; 00000010H
  008a2	d3 e3		 shl	 ebx, cl
  008a4	8b cf		 mov	 ecx, edi
  008a6	4b		 dec	 ebx
  008a7	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  008aa	23 5d f8	 and	 ebx, DWORD PTR _hold$1$[ebp]
  008ad	d3 eb		 shr	 ebx, cl
  008af	03 d8		 add	 ebx, eax
  008b1	8b 45 e8	 mov	 eax, DWORD PTR _state$1$[ebp]
  008b4	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  008b7	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008ba	8b c8		 mov	 ecx, eax
  008bc	8b 5d f4	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  008bf	c1 e9 08	 shr	 ecx, 8
  008c2	0f b6 f9	 movzx	 edi, cl
  008c5	8b 4d dc	 mov	 ecx, DWORD PTR tv1761[ebp]
  008c8	0f b6 c9	 movzx	 ecx, cl
  008cb	03 f9		 add	 edi, ecx
  008cd	3b fb		 cmp	 edi, ebx
  008cf	76 6c		 jbe	 SHORT $LN185@inflateBac
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  008d1	85 f6		 test	 esi, esi
  008d3	75 1a		 jne	 SHORT $LN180@inflateBac
  008d5	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  008d8	50		 push	 eax
  008d9	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  008dc	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  008df	8b f0		 mov	 esi, eax
  008e1	83 c4 08	 add	 esp, 8
  008e4	85 f6		 test	 esi, esi
  008e6	0f 84 09 04 00
	00		 je	 $LN369@inflateBac
  008ec	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN180@inflateBac:
  008ef	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  008f2	8b cb		 mov	 ecx, ebx
  008f4	83 c3 08	 add	 ebx, 8
  008f7	bf 01 00 00 00	 mov	 edi, 1
  008fc	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  008ff	4e		 dec	 esi
  00900	0f b6 de	 movzx	 ebx, dh
  00903	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00906	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00909	d3 e0		 shl	 eax, cl
  0090b	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0090e	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00912	0f b6 ca	 movzx	 ecx, dl
  00915	03 cb		 add	 ecx, ebx
  00917	d3 e7		 shl	 edi, cl
  00919	8b cb		 mov	 ecx, ebx
  0091b	4f		 dec	 edi
  0091c	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  0091f	d3 ef		 shr	 edi, cl
  00921	03 f8		 add	 edi, eax
  00923	8b 45 e8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00926	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00929	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0092c	8b c8		 mov	 ecx, eax
  0092e	c1 e9 08	 shr	 ecx, 8
  00931	0f b6 c9	 movzx	 ecx, cl
  00934	03 cb		 add	 ecx, ebx
  00936	8b 5d f4	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00939	3b cb		 cmp	 ecx, ebx
  0093b	77 94		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:
  0093d	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  00940	0f b6 ce	 movzx	 ecx, dh
  00943	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00946	d3 ea		 shr	 edx, cl
  00948	2b d9		 sub	 ebx, ecx
  0094a	eb 03		 jmp	 SHORT $LN184@inflateBac
$LN490@inflateBac:
  0094c	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);

  0094f	8b c8		 mov	 ecx, eax
  00951	c1 e9 08	 shr	 ecx, 8
  00954	0f b6 c9	 movzx	 ecx, cl
  00957	d3 ea		 shr	 edx, cl
  00959	2b d9		 sub	 ebx, ecx

; 509  :             state->length = (unsigned)here.val;

  0095b	8b c8		 mov	 ecx, eax
  0095d	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00960	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00963	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00966	89 4f 44	 mov	 DWORD PTR [edi+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00969	84 c0		 test	 al, al
  0096b	75 46		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  0096d	83 7d f0 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00971	75 25		 jne	 SHORT $LN189@inflateBac
  00973	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00976	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00979	51		 push	 ecx
  0097a	50		 push	 eax
  0097b	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  0097e	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00981	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00984	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  00987	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0098a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0098d	85 c0		 test	 eax, eax
  0098f	0f 85 67 03 00
	00		 jne	 $LN372@inflateBac
  00995	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  00998	8b 4d ec	 mov	 ecx, DWORD PTR _put$1$[ebp]
  0099b	8a 47 44	 mov	 al, BYTE PTR [edi+68]
  0099e	88 01		 mov	 BYTE PTR [ecx], al
  009a0	41		 inc	 ecx

; 518  :                 left--;

  009a1	ff 4d f0	 dec	 DWORD PTR _left$1$[ebp]
  009a4	89 4d ec	 mov	 DWORD PTR _put$1$[ebp], ecx

; 519  :                 state->mode = LEN;

  009a7	c7 47 04 48 3f
	00 00		 mov	 DWORD PTR [edi+4], 16200 ; 00003f48H

; 520  :                 break;

  009ae	e9 16 03 00 00	 jmp	 $LN480@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009b3	a8 20		 test	 al, 32			; 00000020H
  009b5	74 0c		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009b7	c7 47 04 3f 3f
	00 00		 mov	 DWORD PTR [edi+4], 16191 ; 00003f3fH

; 527  :                 break;

  009be	e9 06 03 00 00	 jmp	 $LN480@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009c3	a8 40		 test	 al, 64			; 00000040H
  009c5	74 16		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  009c7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009ca	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@

; 533  :                 state->mode = BAD;

  009d1	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 534  :                 break;

  009d8	e9 ec 02 00 00	 jmp	 $LN480@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  009dd	0f b6 c0	 movzx	 eax, al
  009e0	83 e0 0f	 and	 eax, 15			; 0000000fH
  009e3	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 539  :             if (state->extra != 0) {

  009e6	74 5f		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  009e8	3b d8		 cmp	 ebx, eax
  009ea	73 41		 jae	 SHORT $LN192@inflateBac
  009ec	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  009ef	90		 npad	 1
$LL195@inflateBac:
  009f0	85 f6		 test	 esi, esi
  009f2	75 1d		 jne	 SHORT $LN200@inflateBac
  009f4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  009f7	50		 push	 eax
  009f8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  009fb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  009fe	8b f0		 mov	 esi, eax
  00a00	83 c4 08	 add	 esp, 8
  00a03	85 f6		 test	 esi, esi
  00a05	0f 84 ea 02 00
	00		 je	 $LN369@inflateBac
  00a0b	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00a0e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a11	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a14	8b cb		 mov	 ecx, ebx
  00a16	d3 e0		 shl	 eax, cl
  00a18	83 c3 08	 add	 ebx, 8
  00a1b	03 d0		 add	 edx, eax
  00a1d	4e		 dec	 esi
  00a1e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a21	40		 inc	 eax
  00a22	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00a25	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a28	3b 5f 4c	 cmp	 ebx, DWORD PTR [edi+76]
  00a2b	72 c3		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a2d	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00a30	b8 01 00 00 00	 mov	 eax, 1
  00a35	d3 e0		 shl	 eax, cl
  00a37	48		 dec	 eax
  00a38	23 c2		 and	 eax, edx

; 542  :                 DROPBITS(state->extra);

  00a3a	d3 ea		 shr	 edx, cl
  00a3c	01 47 44	 add	 DWORD PTR [edi+68], eax
  00a3f	2b d9		 sub	 ebx, ecx
  00a41	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00a44	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a47	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00a4a	ba 01 00 00 00	 mov	 edx, 1
  00a4f	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00a52	d3 e2		 shl	 edx, cl
  00a54	4a		 dec	 edx
  00a55	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  00a58	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a5b	8b c8		 mov	 ecx, eax
  00a5d	c1 e9 08	 shr	 ecx, 8
  00a60	0f b6 c9	 movzx	 ecx, cl
  00a63	3b cb		 cmp	 ecx, ebx
  00a65	76 53		 jbe	 SHORT $LN479@inflateBac
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00a67	85 f6		 test	 esi, esi
  00a69	75 17		 jne	 SHORT $LN212@inflateBac
  00a6b	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a6e	50		 push	 eax
  00a6f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a72	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a75	8b f0		 mov	 esi, eax
  00a77	83 c4 08	 add	 esp, 8
  00a7a	85 f6		 test	 esi, esi
  00a7c	0f 84 73 02 00
	00		 je	 $LN369@inflateBac
$LN212@inflateBac:
  00a82	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  00a85	8b cb		 mov	 ecx, ebx
  00a87	83 c3 08	 add	 ebx, 8
  00a8a	4e		 dec	 esi
  00a8b	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00a8e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00a91	42		 inc	 edx
  00a92	d3 e0		 shl	 eax, cl
  00a94	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00a97	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00a9a	ba 01 00 00 00	 mov	 edx, 1
  00a9f	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00aa2	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00aa5	d3 e2		 shl	 edx, cl
  00aa7	4a		 dec	 edx
  00aa8	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  00aab	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00aae	8b c8		 mov	 ecx, eax
  00ab0	c1 e9 08	 shr	 ecx, 8
  00ab3	0f b6 c9	 movzx	 ecx, cl
  00ab6	3b cb		 cmp	 ecx, ebx
  00ab8	77 ad		 ja	 SHORT $LL206@inflateBac
$LN479@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00aba	a8 f0		 test	 al, 240			; 000000f0H
  00abc	0f 85 ca 00 00
	00		 jne	 $LN488@inflateBac

; 553  :                 last = here;
; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00ac2	8b c8		 mov	 ecx, eax
  00ac4	bb 01 00 00 00	 mov	 ebx, 1
  00ac9	c1 e9 08	 shr	 ecx, 8
  00acc	8b d0		 mov	 edx, eax
  00ace	0f b6 f9	 movzx	 edi, cl
  00ad1	89 4d dc	 mov	 DWORD PTR tv1760[ebp], ecx
  00ad4	0f b6 c8	 movzx	 ecx, al
  00ad7	03 cf		 add	 ecx, edi
  00ad9	c1 e8 10	 shr	 eax, 16			; 00000010H
  00adc	d3 e3		 shl	 ebx, cl
  00ade	8b cf		 mov	 ecx, edi
  00ae0	4b		 dec	 ebx
  00ae1	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  00ae4	23 5d f8	 and	 ebx, DWORD PTR _hold$1$[ebp]
  00ae7	d3 eb		 shr	 ebx, cl
  00ae9	03 d8		 add	 ebx, eax
  00aeb	8b 45 e8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00aee	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00af1	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00af4	8b c8		 mov	 ecx, eax
  00af6	8b 5d f4	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00af9	c1 e9 08	 shr	 ecx, 8
  00afc	0f b6 f9	 movzx	 edi, cl
  00aff	8b 4d dc	 mov	 ecx, DWORD PTR tv1760[ebp]
  00b02	0f b6 c9	 movzx	 ecx, cl
  00b05	03 f9		 add	 edi, ecx
  00b07	3b fb		 cmp	 edi, ebx
  00b09	76 72		 jbe	 SHORT $LN226@inflateBac
  00b0b	0f 1f 44 00 00	 npad	 5
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b10	85 f6		 test	 esi, esi
  00b12	75 1a		 jne	 SHORT $LN221@inflateBac
  00b14	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b17	50		 push	 eax
  00b18	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b1b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b1e	8b f0		 mov	 esi, eax
  00b20	83 c4 08	 add	 esp, 8
  00b23	85 f6		 test	 esi, esi
  00b25	0f 84 ca 01 00
	00		 je	 $LN369@inflateBac
  00b2b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b2e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00b31	8b cb		 mov	 ecx, ebx
  00b33	83 c3 08	 add	 ebx, 8
  00b36	4e		 dec	 esi
  00b37	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00b3a	0f b6 de	 movzx	 ebx, dh
  00b3d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00b40	47		 inc	 edi
  00b41	d3 e0		 shl	 eax, cl
  00b43	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00b46	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b4a	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00b4d	bf 01 00 00 00	 mov	 edi, 1
  00b52	0f b6 ca	 movzx	 ecx, dl
  00b55	03 cb		 add	 ecx, ebx
  00b57	d3 e7		 shl	 edi, cl
  00b59	8b cb		 mov	 ecx, ebx
  00b5b	4f		 dec	 edi
  00b5c	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b5f	d3 ef		 shr	 edi, cl
  00b61	03 f8		 add	 edi, eax
  00b63	8b 45 e8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b66	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b69	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00b6c	8b c8		 mov	 ecx, eax
  00b6e	c1 e9 08	 shr	 ecx, 8
  00b71	0f b6 c9	 movzx	 ecx, cl
  00b74	03 cb		 add	 ecx, ebx
  00b76	8b 5d f4	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b79	3b cb		 cmp	 ecx, ebx
  00b7b	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:
  00b7d	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00b80	0f b6 ce	 movzx	 ecx, dh
  00b83	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00b86	d3 ea		 shr	 edx, cl
  00b88	2b d9		 sub	 ebx, ecx
  00b8a	eb 03		 jmp	 SHORT $LN225@inflateBac
$LN488@inflateBac:
  00b8c	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN225@inflateBac:

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00b8f	8b c8		 mov	 ecx, eax
  00b91	c1 e9 08	 shr	 ecx, 8
  00b94	0f b6 c9	 movzx	 ecx, cl
  00b97	d3 ea		 shr	 edx, cl
  00b99	2b d9		 sub	 ebx, ecx
  00b9b	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00b9e	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 563  :             if (here.op & 64) {

  00ba1	a8 40		 test	 al, 64			; 00000040H
  00ba3	74 16		 je	 SHORT $LN327@inflateBac

; 564  :                 strm->msg = (char *)"invalid distance code";

  00ba5	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00ba8	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@

; 565  :                 state->mode = BAD;

  00baf	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 566  :                 break;

  00bb6	e9 0e 01 00 00	 jmp	 $LN480@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00bbb	8b c8		 mov	 ecx, eax

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00bbd	0f b6 c0	 movzx	 eax, al
  00bc0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bc3	83 e0 0f	 and	 eax, 15			; 0000000fH
  00bc6	89 4f 48	 mov	 DWORD PTR [edi+72], ecx
  00bc9	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 572  :             if (state->extra != 0) {

  00bcc	74 5e		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00bce	3b d8		 cmp	 ebx, eax
  00bd0	73 40		 jae	 SHORT $LN230@inflateBac
  00bd2	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00bd5	85 f6		 test	 esi, esi
  00bd7	75 1d		 jne	 SHORT $LN238@inflateBac
  00bd9	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00bdc	50		 push	 eax
  00bdd	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00be0	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00be3	8b f0		 mov	 esi, eax
  00be5	83 c4 08	 add	 esp, 8
  00be8	85 f6		 test	 esi, esi
  00bea	0f 84 05 01 00
	00		 je	 $LN369@inflateBac
  00bf0	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
  00bf3	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00bf6	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00bf9	8b cb		 mov	 ecx, ebx
  00bfb	d3 e0		 shl	 eax, cl
  00bfd	83 c3 08	 add	 ebx, 8
  00c00	03 d0		 add	 edx, eax
  00c02	4e		 dec	 esi
  00c03	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00c06	40		 inc	 eax
  00c07	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00c0a	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00c0d	3b 5f 4c	 cmp	 ebx, DWORD PTR [edi+76]
  00c10	72 c3		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c12	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00c15	b8 01 00 00 00	 mov	 eax, 1
  00c1a	d3 e0		 shl	 eax, cl
  00c1c	48		 dec	 eax
  00c1d	23 c2		 and	 eax, edx

; 575  :                 DROPBITS(state->extra);

  00c1f	d3 ea		 shr	 edx, cl
  00c21	01 47 48	 add	 DWORD PTR [edi+72], eax
  00c24	2b d9		 sub	 ebx, ecx
  00c26	89 55 f8	 mov	 DWORD PTR _hold$1$[ebp], edx
  00c29	89 5d f4	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c2c	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00c2f	39 4f 30	 cmp	 DWORD PTR [edi+48], ecx
  00c32	1b c0		 sbb	 eax, eax
  00c34	23 45 f0	 and	 eax, DWORD PTR _left$1$[ebp]
  00c37	2b c8		 sub	 ecx, eax
  00c39	39 4f 48	 cmp	 DWORD PTR [edi+72], ecx
  00c3c	76 13		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c3e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c41	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@

; 580  :                 state->mode = BAD;

  00c48	c7 47 04 51 3f
	00 00		 mov	 DWORD PTR [edi+4], 16209 ; 00003f51H

; 581  :                 break;

  00c4f	eb 78		 jmp	 SHORT $LN480@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c51	83 7d f0 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00c55	75 22		 jne	 SHORT $LN247@inflateBac
  00c57	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00c5a	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00c5d	51		 push	 ecx
  00c5e	50		 push	 eax
  00c5f	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00c62	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00c65	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00c68	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  00c6b	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00c6e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c71	85 c0		 test	 eax, eax
  00c73	0f 85 83 00 00
	00		 jne	 $LN372@inflateBac
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00c79	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00c7c	8b 4f 48	 mov	 ecx, DWORD PTR [edi+72]
  00c7f	2b c1		 sub	 eax, ecx

; 589  :                 if (copy < left) {
; 590  :                     from = put + copy;

  00c81	8b 55 ec	 mov	 edx, DWORD PTR _put$1$[ebp]
  00c84	3b 45 f0	 cmp	 eax, DWORD PTR _left$1$[ebp]
  00c87	73 09		 jae	 SHORT $LN334@inflateBac

; 591  :                     copy = left - copy;

  00c89	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00c8c	03 d0		 add	 edx, eax
  00c8e	2b c8		 sub	 ecx, eax

; 592  :                 }

  00c90	eb 05		 jmp	 SHORT $LN335@inflateBac
$LN334@inflateBac:

; 593  :                 else {
; 594  :                     from = put - state->offset;

  00c92	2b d1		 sub	 edx, ecx

; 595  :                     copy = left;

  00c94	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN335@inflateBac:

; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00c97	3b 4f 44	 cmp	 ecx, DWORD PTR [edi+68]
  00c9a	0f 47 4f 44	 cmova	 ecx, DWORD PTR [edi+68]

; 598  :                 state->length -= copy;

  00c9e	29 4f 44	 sub	 DWORD PTR [edi+68], ecx

; 599  :                 left -= copy;

  00ca1	29 4d f0	 sub	 DWORD PTR _left$1$[ebp], ecx

; 602  :                 } while (--copy);

  00ca4	8b 7d ec	 mov	 edi, DWORD PTR _put$1$[ebp]
  00ca7	2b d7		 sub	 edx, edi
  00ca9	0f 1f 80 00 00
	00 00		 npad	 7
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00cb0	8a 04 3a	 mov	 al, BYTE PTR [edx+edi]
  00cb3	88 07		 mov	 BYTE PTR [edi], al
  00cb5	47		 inc	 edi

; 602  :                 } while (--copy);

  00cb6	83 e9 01	 sub	 ecx, 1
  00cb9	75 f5		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00cbb	89 7d ec	 mov	 DWORD PTR _put$1$[ebp], edi
  00cbe	8b 7d e8	 mov	 edi, DWORD PTR _state$1$[ebp]
  00cc1	39 4f 44	 cmp	 DWORD PTR [edi+68], ecx
  00cc4	75 8b		 jne	 SHORT $LL246@inflateBac
$LN487@inflateBac:
  00cc6	8b 55 f8	 mov	 edx, DWORD PTR _hold$1$[ebp]
$LN480@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00cc9	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00ccc	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00cd1	83 f8 12	 cmp	 eax, 18			; 00000012H
  00cd4	0f 86 9b f3 ff
	ff		 jbe	 $LN500@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00cda	bb fe ff ff ff	 mov	 ebx, -2			; fffffffeH
$inf_leave$504:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00cdf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00ce2	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 627  :     strm->avail_in = have;

  00ce5	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00ce8	5e		 pop	 esi
  00ce9	89 08		 mov	 DWORD PTR [eax], ecx

; 628  :     return ret;

  00ceb	8b c3		 mov	 eax, ebx
  00ced	5b		 pop	 ebx
  00cee	5f		 pop	 edi

; 629  : }

  00cef	8b e5		 mov	 esp, ebp
  00cf1	5d		 pop	 ebp
  00cf2	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  00cf5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00cfc	bb fb ff ff ff	 mov	 ebx, -5			; fffffffbH
  00d01	eb dc		 jmp	 SHORT $inf_leave$504
$LN371@inflateBac:

; 343  :                 PULL();

  00d03	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
  00d06	bb fb ff ff ff	 mov	 ebx, -5			; fffffffbH
  00d0b	eb d2		 jmp	 SHORT $inf_leave$504
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d0d	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00d10	bb 01 00 00 00	 mov	 ebx, 1
  00d15	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d18	3b c8		 cmp	 ecx, eax
  00d1a	73 c3		 jae	 SHORT $inf_leave$504

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d1c	2b c1		 sub	 eax, ecx
  00d1e	50		 push	 eax
  00d1f	ff 77 38	 push	 DWORD PTR [edi+56]
  00d22	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d25	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d28	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d2b	85 c0		 test	 eax, eax
  00d2d	74 b0		 je	 SHORT $inf_leave$504

; 611  :                     ret = Z_BUF_ERROR;

  00d2f	bb fb ff ff ff	 mov	 ebx, -5			; fffffffbH

; 612  :             }
; 613  :             goto inf_leave;

  00d34	eb a9		 jmp	 SHORT $inf_leave$504
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00d36	bb fd ff ff ff	 mov	 ebx, -3			; fffffffdH

; 617  :             goto inf_leave;

  00d3b	eb a2		 jmp	 SHORT $inf_leave$504
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00d3d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00d42	5f		 pop	 edi

; 629  : }

  00d43	8b e5		 mov	 esp, ebp
  00d45	5d		 pop	 ebp
  00d46	c2 14 00	 ret	 20			; 00000014H
  00d49	0f 1f 00	 npad	 3
$LN502@inflateBac:
  00d4c	00 00 00 00	 DD	 $LN255@inflateBac
  00d50	00 00 00 00	 DD	 $LN31@inflateBac
  00d54	00 00 00 00	 DD	 $LN56@inflateBac
  00d58	00 00 00 00	 DD	 $LN302@inflateBac
  00d5c	00 00 00 00	 DD	 $LN337@inflateBac
  00d60	00 00 00 00	 DD	 $LN340@inflateBac
  00d64	00 00 00 00	 DD	 $LN341@inflateBac
$LN473@inflateBac:
  00d68	00		 DB	 0
  00d69	06		 DB	 6
  00d6a	01		 DB	 1
  00d6b	06		 DB	 6
  00d6c	06		 DB	 6
  00d6d	02		 DB	 2
  00d6e	06		 DB	 6
  00d6f	06		 DB	 6
  00d70	06		 DB	 6
  00d71	03		 DB	 3
  00d72	06		 DB	 6
  00d73	06		 DB	 6
  00d74	06		 DB	 6
  00d75	06		 DB	 6
  00d76	06		 DB	 6
  00d77	06		 DB	 6
  00d78	06		 DB	 6
  00d79	04		 DB	 4
  00d7a	05		 DB	 5
  00d7b	90		 npad	 1
$LN503@inflateBac:
  00d7c	00 00 00 00	 DD	 $LN259@inflateBac
  00d80	00 00 00 00	 DD	 $LN260@inflateBac
  00d84	00 00 00 00	 DD	 $LN261@inflateBac
  00d88	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END

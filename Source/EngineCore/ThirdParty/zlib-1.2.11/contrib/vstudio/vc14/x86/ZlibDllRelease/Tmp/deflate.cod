; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_longest_match:PROC
EXTRN	_match_init:PROC
?my_version@?1??deflateInit2_@@9@9 DB '1.2.11', 00H	; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
_left$1$ = -4						; size = 4
_beg$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00006	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00009	8b cf		 mov	 ecx, edi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 6a 08 00
	00		 jne	 $LN29@deflate
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001b	83 fb 05	 cmp	 ebx, 5
  0001e	0f 87 5e 08 00
	00		 ja	 $LN29@deflate

; 772  :     }
; 773  :     s = strm->state;

  00024	56		 push	 esi
  00025	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  00028	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002b	0f 84 3b 08 00
	00		 je	 $LN31@deflate
  00031	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00034	74 08		 je	 SHORT $LN32@deflate
  00036	39 07		 cmp	 DWORD PTR [edi], eax
  00038	0f 84 2e 08 00
	00		 je	 $LN31@deflate
$LN32@deflate:
  0003e	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00045	75 09		 jne	 SHORT $LN30@deflate
  00047	83 fb 04	 cmp	 ebx, 4
  0004a	0f 85 1c 08 00
	00		 jne	 $LN31@deflate
$LN30@deflate:

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00050	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00054	74 6b		 je	 SHORT $LN132@deflate

; 781  : 
; 782  :     old_flush = s->last_flush;
; 783  :     s->last_flush = flush;
; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  00056	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005a	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00060	74 1d		 je	 SHORT $LN34@deflate

; 787  :         flush_pending(strm);

  00062	e8 00 00 00 00	 call	 _flush_pending

; 788  :         if (strm->avail_out == 0) {

  00067	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0006b	75 44		 jne	 SHORT $LN37@deflate
$LN131@deflate:

; 870  :                 s->last_flush = -1;

  0006d	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN84@deflate:
  00074	5e		 pop	 esi
  00075	5f		 pop	 edi

; 871  :                 return Z_OK;

  00076	33 c0		 xor	 eax, eax
  00078	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN34@deflate:

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }
; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  0007f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00083	75 2c		 jne	 SHORT $LN37@deflate
  00085	33 c0		 xor	 eax, eax
  00087	b9 09 00 00 00	 mov	 ecx, 9
  0008c	83 fa 04	 cmp	 edx, 4
  0008f	0f 4f c1	 cmovg	 eax, ecx
  00092	03 d2		 add	 edx, edx
  00094	2b d0		 sub	 edx, eax
  00096	33 c9		 xor	 ecx, ecx
  00098	83 fb 04	 cmp	 ebx, 4
  0009b	b8 09 00 00 00	 mov	 eax, 9
  000a0	0f 4f c8	 cmovg	 ecx, eax
  000a3	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000a6	2b c1		 sub	 eax, ecx
  000a8	3b c2		 cmp	 eax, edx
  000aa	7f 05		 jg	 SHORT $LN37@deflate
  000ac	83 fb 04	 cmp	 ebx, 4
  000af	75 10		 jne	 SHORT $LN132@deflate
$LN37@deflate:

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000b9	75 1c		 jne	 SHORT $LN38@deflate
  000bb	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000bf	74 16		 je	 SHORT $LN38@deflate
$LN132@deflate:

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000c1	a1 1c 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+28
  000c6	5e		 pop	 esi
  000c7	89 47 18	 mov	 DWORD PTR [edi+24], eax
  000ca	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000cf	5f		 pop	 edi
  000d0	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 08 00	 ret	 8
$LN38@deflate:

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  000d7	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000da	0f 85 ad 00 00
	00		 jne	 $LN49@deflate

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  000e0	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000e3	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000e6	81 e9 00 78 00
	00		 sub	 ecx, 30720		; 00007800H

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000ec	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  000f3	7d 24		 jge	 SHORT $LN42@deflate
  000f5	8b 96 84 00 00
	00		 mov	 edx, DWORD PTR [esi+132]
  000fb	83 fa 02	 cmp	 edx, 2
  000fe	7c 19		 jl	 SHORT $LN42@deflate

; 821  :         else if (s->level < 6)

  00100	83 fa 06	 cmp	 edx, 6
  00103	7d 07		 jge	 SHORT $LN43@deflate

; 822  :             level_flags = 1;

  00105	b8 01 00 00 00	 mov	 eax, 1
  0010a	eb 0f		 jmp	 SHORT $LN46@deflate
$LN43@deflate:

; 823  :         else if (s->level == 6)

  0010c	33 c0		 xor	 eax, eax
  0010e	83 fa 06	 cmp	 edx, 6
  00111	0f 95 c0	 setne	 al
  00114	83 c0 02	 add	 eax, 2

; 824  :             level_flags = 2;
; 825  :         else
; 826  :             level_flags = 3;

  00117	eb 02		 jmp	 SHORT $LN46@deflate
$LN42@deflate:

; 820  :             level_flags = 0;

  00119	33 c0		 xor	 eax, eax
$LN46@deflate:

; 827  :         header |= (level_flags << 6);

  0011b	c1 e0 06	 shl	 eax, 6
  0011e	0b c1		 or	 eax, ecx
  00120	8b c8		 mov	 ecx, eax
  00122	83 c9 20	 or	 ecx, 32			; 00000020H
  00125	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00129	0f 44 c8	 cmove	 ecx, eax

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;
; 829  :         header += 31 - (header % 31);

  0012c	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00131	f7 e1		 mul	 ecx
  00133	2b ca		 sub	 ecx, edx
  00135	d1 e9		 shr	 ecx, 1
  00137	03 ca		 add	 ecx, edx
  00139	c1 e9 04	 shr	 ecx, 4

; 830  : 
; 831  :         putShortMSB(s, header);

  0013c	41		 inc	 ecx
  0013d	8b d1		 mov	 edx, ecx
  0013f	c1 e2 05	 shl	 edx, 5
  00142	2b d1		 sub	 edx, ecx
  00144	8b ce		 mov	 ecx, esi
  00146	e8 00 00 00 00	 call	 _putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  0014b	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0014f	74 16		 je	 SHORT $LN48@deflate

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00151	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00155	8b ce		 mov	 ecx, esi
  00157	e8 00 00 00 00	 call	 _putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0015c	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 _putShortMSB
$LN48@deflate:

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  00167	6a 00		 push	 0
  00169	6a 00		 push	 0
  0016b	6a 00		 push	 0
  0016d	e8 00 00 00 00	 call	 _adler32@12
  00172	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 839  :         s->status = BUSY_STATE;
; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  00175	8b cf		 mov	 ecx, edi
  00177	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  0017e	e8 00 00 00 00	 call	 _flush_pending

; 843  :         if (s->pending != 0) {

  00183	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00187	0f 85 e0 fe ff
	ff		 jne	 $LN131@deflate
$LN49@deflate:

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  0018d	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  00191	0f 85 08 02 00
	00		 jne	 $LN52@deflate

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	e8 00 00 00 00	 call	 _crc32@12
  001a2	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 852  :         put_byte(s, 31);

  001a5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001a8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ab	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001af	ff 46 14	 inc	 DWORD PTR [esi+20]
  001b2	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 853  :         put_byte(s, 139);

  001b5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001b8	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001bc	ff 46 14	 inc	 DWORD PTR [esi+20]
  001bf	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 854  :         put_byte(s, 8);

  001c2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001c5	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001c9	ff 46 14	 inc	 DWORD PTR [esi+20]

; 855  :         if (s->gzhead == Z_NULL) {

  001cc	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  001cf	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  001d2	85 d2		 test	 edx, edx
  001d4	0f 85 a3 00 00
	00		 jne	 $LN51@deflate

; 856  :             put_byte(s, 0);

  001da	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001dd	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  001e0	ff 46 14	 inc	 DWORD PTR [esi+20]
  001e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 857  :             put_byte(s, 0);

  001e6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e9	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001ec	ff 46 14	 inc	 DWORD PTR [esi+20]
  001ef	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 858  :             put_byte(s, 0);

  001f2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001f8	ff 46 14	 inc	 DWORD PTR [esi+20]
  001fb	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 859  :             put_byte(s, 0);

  001fe	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00201	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00204	ff 46 14	 inc	 DWORD PTR [esi+20]
  00207	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 860  :             put_byte(s, 0);

  0020a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00210	ff 46 14	 inc	 DWORD PTR [esi+20]

; 861  :             put_byte(s, s->level == 9 ? 2 :

  00213	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00219	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0021c	83 f8 09	 cmp	 eax, 9
  0021f	75 05		 jne	 SHORT $LN100@deflate
  00221	8d 48 f9	 lea	 ecx, DWORD PTR [eax-7]
  00224	eb 17		 jmp	 SHORT $LN99@deflate
$LN100@deflate:
  00226	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0022d	7d 09		 jge	 SHORT $LN98@deflate
  0022f	83 f8 02	 cmp	 eax, 2
  00232	7c 04		 jl	 SHORT $LN98@deflate
  00234	33 c9		 xor	 ecx, ecx
  00236	eb 05		 jmp	 SHORT $LN99@deflate
$LN98@deflate:
  00238	b9 04 00 00 00	 mov	 ecx, 4
$LN99@deflate:
  0023d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00240	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00243	ff 46 14	 inc	 DWORD PTR [esi+20]
  00246	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);

  00249	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0024c	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 865  :             s->status = BUSY_STATE;
; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  00250	8b cf		 mov	 ecx, edi
  00252	ff 46 14	 inc	 DWORD PTR [esi+20]
  00255	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  0025c	e8 00 00 00 00	 call	 _flush_pending

; 869  :             if (s->pending != 0) {

  00261	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00265	0f 84 34 01 00
	00		 je	 $LN52@deflate

; 870  :                 s->last_flush = -1;

  0026b	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1

; 871  :                 return Z_OK;

  00272	33 c0		 xor	 eax, eax
  00274	5e		 pop	 esi
  00275	5f		 pop	 edi
  00276	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c2 08 00	 ret	 8
$LN51@deflate:

; 872  :             }
; 873  :         }
; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  0027d	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00280	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00283	f7 d9		 neg	 ecx
  00285	1a c9		 sbb	 cl, cl
  00287	80 e1 10	 and	 cl, 16			; 00000010H
  0028a	f7 d8		 neg	 eax
  0028c	1a c0		 sbb	 al, al
  0028e	24 02		 and	 al, 2
  00290	02 c8		 add	 cl, al
  00292	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00295	f7 d8		 neg	 eax
  00297	1a c0		 sbb	 al, al
  00299	24 08		 and	 al, 8
  0029b	02 c8		 add	 cl, al
  0029d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002a0	f7 d8		 neg	 eax
  002a2	1a c0		 sbb	 al, al
  002a4	24 04		 and	 al, 4
  002a6	02 c8		 add	 cl, al
  002a8	83 3a 00	 cmp	 DWORD PTR [edx], 0
  002ab	0f 95 c0	 setne	 al
  002ae	02 c8		 add	 cl, al
  002b0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002b3	88 0c 03	 mov	 BYTE PTR [ebx+eax], cl
  002b6	ff 46 14	 inc	 DWORD PTR [esi+20]
  002b9	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002bc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002bf	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002c2	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002c6	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002c9	ff 46 14	 inc	 DWORD PTR [esi+20]
  002cc	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002cf	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002d5	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  002d9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002dc	ff 46 14	 inc	 DWORD PTR [esi+20]
  002df	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  002e2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002e5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002e8	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  002ec	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002ef	ff 46 14	 inc	 DWORD PTR [esi+20]

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  002f2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  002f8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002fb	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  002ff	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00302	ff 46 14	 inc	 DWORD PTR [esi+20]

; 885  :             put_byte(s, s->level == 9 ? 2 :

  00305	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0030b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0030e	83 f8 09	 cmp	 eax, 9
  00311	75 05		 jne	 SHORT $LN104@deflate
  00313	8d 48 f9	 lea	 ecx, DWORD PTR [eax-7]
  00316	eb 17		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00318	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0031f	7d 09		 jge	 SHORT $LN102@deflate
  00321	83 f8 02	 cmp	 eax, 2
  00324	7c 04		 jl	 SHORT $LN102@deflate
  00326	33 c9		 xor	 ecx, ecx
  00328	eb 05		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  0032a	b9 04 00 00 00	 mov	 ecx, 4
$LN103@deflate:
  0032f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00332	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00335	ff 46 14	 inc	 DWORD PTR [esi+20]

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  00338	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0033b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0033e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00341	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00344	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 889  :             if (s->gzhead->extra != Z_NULL) {

  00347	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0034a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0034d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00350	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00354	74 23		 je	 SHORT $LN54@deflate

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  00356	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00359	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  0035d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00360	ff 46 14	 inc	 DWORD PTR [esi+20]

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00363	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00366	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00369	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0036c	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00370	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00373	ff 46 14	 inc	 DWORD PTR [esi+20]
  00376	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN54@deflate:

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  00379	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0037c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00380	74 0f		 je	 SHORT $LN55@deflate

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  00382	52		 push	 edx
  00383	ff 76 08	 push	 DWORD PTR [esi+8]
  00386	ff 77 30	 push	 DWORD PTR [edi+48]
  00389	e8 00 00 00 00	 call	 _crc32@12
  0038e	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN55@deflate:

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;

  00391	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 897  :             s->status = EXTRA_STATE;

  00398	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN52@deflate:

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  0039f	83 7e 04 45	 cmp	 DWORD PTR [esi+4], 69	; 00000045H
  003a3	0f 85 f3 00 00
	00		 jne	 $LN56@deflate

; 901  :         if (s->gzhead->extra != Z_NULL) {

  003a9	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003ac	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003b0	0f 84 df 00 00
	00		 je	 $LN57@deflate

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003b6	0f b7 48 14	 movzx	 ecx, WORD PTR [eax+20]
  003ba	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]

; 904  :             while (s->pending + left > s->pending_buf_size) {

  003bd	8b c3		 mov	 eax, ebx
  003bf	2b 4e 20	 sub	 ecx, DWORD PTR [esi+32]
  003c2	03 c1		 add	 eax, ecx
  003c4	89 5d 08	 mov	 DWORD PTR _beg$1$[ebp], ebx
  003c7	89 4d fc	 mov	 DWORD PTR _left$1$[ebp], ecx
  003ca	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  003cd	76 7b		 jbe	 SHORT $LN3@deflate
  003cf	90		 npad	 1
$LL2@deflate:

; 905  :                 uInt copy = s->pending_buf_size - s->pending;
; 906  :                 zmemcpy(s->pending_buf + s->pending,

  003d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003d3	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003d6	2b 5e 14	 sub	 ebx, DWORD PTR [esi+20]
  003d9	53		 push	 ebx
  003da	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003dd	03 46 20	 add	 eax, DWORD PTR [esi+32]
  003e0	50		 push	 eax
  003e1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003e4	03 46 14	 add	 eax, DWORD PTR [esi+20]
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 _memcpy

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;
; 909  :                 HCRC_UPDATE(beg);

  003ed	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003f6	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  003f9	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  003fd	74 1b		 je	 SHORT $LN4@deflate
  003ff	8b 55 08	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00402	3b ca		 cmp	 ecx, edx
  00404	76 14		 jbe	 SHORT $LN4@deflate
  00406	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00409	2b ca		 sub	 ecx, edx
  0040b	51		 push	 ecx
  0040c	03 c2		 add	 eax, edx
  0040e	50		 push	 eax
  0040f	ff 77 30	 push	 DWORD PTR [edi+48]
  00412	e8 00 00 00 00	 call	 _crc32@12
  00417	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 910  :                 s->gzindex += copy;

  0041a	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 911  :                 flush_pending(strm);

  0041d	8b cf		 mov	 ecx, edi
  0041f	e8 00 00 00 00	 call	 _flush_pending

; 912  :                 if (s->pending != 0) {

  00424	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00428	0f 85 3f fc ff
	ff		 jne	 $LN131@deflate

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;
; 917  :                 left -= copy;

  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00431	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00434	2b cb		 sub	 ecx, ebx
  00436	03 c1		 add	 eax, ecx
  00438	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  0043f	89 4d fc	 mov	 DWORD PTR _left$1$[ebp], ecx
  00442	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00445	77 89		 ja	 SHORT $LL2@deflate

; 965  :             } while (val != 0);

  00447	8b 5d 08	 mov	 ebx, DWORD PTR _beg$1$[ebp]
$LN3@deflate:

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,

  0044a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0044d	51		 push	 ecx
  0044e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00451	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00454	50		 push	 eax
  00455	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00458	03 46 08	 add	 eax, DWORD PTR [esi+8]
  0045b	50		 push	 eax
  0045c	e8 00 00 00 00	 call	 _memcpy

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  00461	8b 45 fc	 mov	 eax, DWORD PTR _left$1$[ebp]
  00464	83 c4 0c	 add	 esp, 12			; 0000000cH
  00467	01 46 14	 add	 DWORD PTR [esi+20], eax

; 922  :             HCRC_UPDATE(beg);

  0046a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0046d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00470	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00474	74 18		 je	 SHORT $LN7@deflate
  00476	3b cb		 cmp	 ecx, ebx
  00478	76 14		 jbe	 SHORT $LN7@deflate
  0047a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0047d	2b cb		 sub	 ecx, ebx
  0047f	51		 push	 ecx
  00480	03 c3		 add	 eax, ebx
  00482	50		 push	 eax
  00483	ff 77 30	 push	 DWORD PTR [edi+48]
  00486	e8 00 00 00 00	 call	 _crc32@12
  0048b	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN7@deflate:

; 923  :             s->gzindex = 0;

  0048e	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN57@deflate:

; 924  :         }
; 925  :         s->status = NAME_STATE;

  00495	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
$LN56@deflate:

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  0049c	83 7e 04 49	 cmp	 DWORD PTR [esi+4], 73	; 00000049H
  004a0	0f 85 a3 00 00
	00		 jne	 $LN61@deflate

; 928  :         if (s->gzhead->name != Z_NULL) {

  004a6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004a9	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004ad	0f 84 8f 00 00
	00		 je	 $LN62@deflate

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  004b3	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL12@deflate:

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  004b6	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  004b9	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  004bc	75 37		 jne	 SHORT $LN63@deflate

; 933  :                     HCRC_UPDATE(beg);

  004be	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004c1	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004c5	74 1b		 je	 SHORT $LN13@deflate
  004c7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  004ca	3b c3		 cmp	 eax, ebx
  004cc	76 14		 jbe	 SHORT $LN13@deflate
  004ce	2b c3		 sub	 eax, ebx
  004d0	50		 push	 eax
  004d1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004d4	03 c3		 add	 eax, ebx
  004d6	50		 push	 eax
  004d7	ff 77 30	 push	 DWORD PTR [edi+48]
  004da	e8 00 00 00 00	 call	 _crc32@12
  004df	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 934  :                     flush_pending(strm);

  004e2	8b cf		 mov	 ecx, edi
  004e4	e8 00 00 00 00	 call	 _flush_pending

; 935  :                     if (s->pending != 0) {

  004e9	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  004ed	0f 85 7a fb ff
	ff		 jne	 $LN131@deflate

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  004f3	33 db		 xor	 ebx, ebx
$LN63@deflate:

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  004f5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004f8	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  004fb	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  004fe	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00502	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 942  :                 put_byte(s, val);

  00505	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00508	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0050b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0050e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00511	ff 46 14	 inc	 DWORD PTR [esi+20]
  00514	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 943  :             } while (val != 0);

  00517	85 d2		 test	 edx, edx
  00519	75 9b		 jne	 SHORT $LL12@deflate

; 944  :             HCRC_UPDATE(beg);

  0051b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0051e	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  00521	74 18		 je	 SHORT $LN16@deflate
  00523	3b cb		 cmp	 ecx, ebx
  00525	76 14		 jbe	 SHORT $LN16@deflate
  00527	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0052a	2b cb		 sub	 ecx, ebx
  0052c	51		 push	 ecx
  0052d	03 c3		 add	 eax, ebx
  0052f	50		 push	 eax
  00530	ff 77 30	 push	 DWORD PTR [edi+48]
  00533	e8 00 00 00 00	 call	 _crc32@12
  00538	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 945  :             s->gzindex = 0;

  0053b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN62@deflate:

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  00542	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
$LN61@deflate:

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  00549	83 7e 04 5b	 cmp	 DWORD PTR [esi+4], 91	; 0000005bH
  0054d	0f 85 9c 00 00
	00		 jne	 $LN67@deflate

; 950  :         if (s->gzhead->comment != Z_NULL) {

  00553	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00556	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0055a	0f 84 88 00 00
	00		 je	 $LN26@deflate

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00560	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
$LL21@deflate:

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  00563	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00566	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00569	75 37		 jne	 SHORT $LN69@deflate

; 955  :                     HCRC_UPDATE(beg);

  0056b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0056e	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00572	74 1b		 je	 SHORT $LN22@deflate
  00574	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00577	3b c3		 cmp	 eax, ebx
  00579	76 14		 jbe	 SHORT $LN22@deflate
  0057b	2b c3		 sub	 eax, ebx
  0057d	50		 push	 eax
  0057e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00581	03 c3		 add	 eax, ebx
  00583	50		 push	 eax
  00584	ff 77 30	 push	 DWORD PTR [edi+48]
  00587	e8 00 00 00 00	 call	 _crc32@12
  0058c	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 956  :                     flush_pending(strm);

  0058f	8b cf		 mov	 ecx, edi
  00591	e8 00 00 00 00	 call	 _flush_pending

; 957  :                     if (s->pending != 0) {

  00596	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0059a	0f 85 cd fa ff
	ff		 jne	 $LN131@deflate

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  005a0	33 db		 xor	 ebx, ebx
$LN69@deflate:

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  005a2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005a5	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  005a8	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  005ab	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  005af	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 964  :                 put_byte(s, val);

  005b2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  005b5	89 46 20	 mov	 DWORD PTR [esi+32], eax
  005b8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  005bb	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005be	ff 46 14	 inc	 DWORD PTR [esi+20]
  005c1	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 965  :             } while (val != 0);

  005c4	85 d2		 test	 edx, edx
  005c6	75 9b		 jne	 SHORT $LL21@deflate

; 966  :             HCRC_UPDATE(beg);

  005c8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005cb	39 50 2c	 cmp	 DWORD PTR [eax+44], edx
  005ce	74 18		 je	 SHORT $LN26@deflate
  005d0	3b cb		 cmp	 ecx, ebx
  005d2	76 14		 jbe	 SHORT $LN26@deflate
  005d4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  005d7	2b cb		 sub	 ecx, ebx
  005d9	51		 push	 ecx
  005da	03 c3		 add	 eax, ebx
  005dc	50		 push	 eax
  005dd	ff 77 30	 push	 DWORD PTR [edi+48]
  005e0	e8 00 00 00 00	 call	 _crc32@12
  005e5	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN26@deflate:

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  005e8	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
$LN67@deflate:

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  005ef	83 7e 04 67	 cmp	 DWORD PTR [esi+4], 103	; 00000067H
  005f3	75 6b		 jne	 SHORT $LN77@deflate

; 971  :         if (s->gzhead->hcrc) {

  005f5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005f8	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  005fc	74 4a		 je	 SHORT $LN74@deflate

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  005fe	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00601	83 c0 02	 add	 eax, 2
  00604	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00607	76 11		 jbe	 SHORT $LN76@deflate

; 973  :                 flush_pending(strm);

  00609	8b cf		 mov	 ecx, edi
  0060b	e8 00 00 00 00	 call	 _flush_pending

; 974  :                 if (s->pending != 0) {

  00610	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00614	0f 85 53 fa ff
	ff		 jne	 $LN131@deflate
$LN76@deflate:

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;
; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  0061a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0061d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00620	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00624	6a 00		 push	 0
  00626	6a 00		 push	 0
  00628	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0062b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0062e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00631	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00634	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  00638	6a 00		 push	 0
  0063a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0063d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00640	e8 00 00 00 00	 call	 _crc32@12
  00645	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN74@deflate:

; 982  :         }
; 983  :         s->status = BUSY_STATE;
; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  00648	8b cf		 mov	 ecx, edi
  0064a	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00651	e8 00 00 00 00	 call	 _flush_pending

; 987  :         if (s->pending != 0) {

  00656	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0065a	0f 85 0d fa ff
	ff		 jne	 $LN131@deflate
$LN77@deflate:

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;
; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  00660	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00664	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00667	75 1b		 jne	 SHORT $LN79@deflate
  00669	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0066d	75 15		 jne	 SHORT $LN79@deflate
  0066f	85 db		 test	 ebx, ebx
  00671	0f 84 f8 00 00
	00		 je	 $LN91@deflate
  00677	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  0067e	0f 84 eb 00 00
	00		 je	 $LN91@deflate
$LN79@deflate:

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  00684	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0068a	85 c0		 test	 eax, eax
  0068c	75 09		 jne	 SHORT $LN110@deflate
  0068e	53		 push	 ebx
  0068f	56		 push	 esi
  00690	e8 00 00 00 00	 call	 _deflate_stored
  00695	eb 34		 jmp	 SHORT $LN130@deflate
$LN110@deflate:
  00697	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0069d	83 f9 02	 cmp	 ecx, 2
  006a0	75 0b		 jne	 SHORT $LN108@deflate
  006a2	8b d3		 mov	 edx, ebx
  006a4	8b ce		 mov	 ecx, esi
  006a6	e8 00 00 00 00	 call	 _deflate_huff
  006ab	eb 21		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  006ad	83 f9 03	 cmp	 ecx, 3
  006b0	75 0b		 jne	 SHORT $LN106@deflate
  006b2	8b d3		 mov	 edx, ebx
  006b4	8b ce		 mov	 ecx, esi
  006b6	e8 00 00 00 00	 call	 _deflate_rle
  006bb	eb 11		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  006bd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  006c0	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  006c7	53		 push	 ebx
  006c8	56		 push	 esi
  006c9	ff d0		 call	 eax
$LN130@deflate:
  006cb	83 c4 08	 add	 esp, 8
$LN107@deflate:

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  006ce	83 f8 02	 cmp	 eax, 2
  006d1	74 05		 je	 SHORT $LN81@deflate
  006d3	83 f8 03	 cmp	 eax, 3
  006d6	75 07		 jne	 SHORT $LN80@deflate
$LN81@deflate:

; 1006 :             s->status = FINISH_STATE;

  006d8	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN80@deflate:

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  006df	85 c0		 test	 eax, eax
  006e1	0f 84 69 01 00
	00		 je	 $LN83@deflate
  006e7	83 f8 02	 cmp	 eax, 2
  006ea	0f 84 60 01 00
	00		 je	 $LN83@deflate

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 1011 :             }
; 1012 :             return Z_OK;
; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  006f0	83 f8 01	 cmp	 eax, 1
  006f3	75 7a		 jne	 SHORT $LN91@deflate

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  006f5	3b d8		 cmp	 ebx, eax
  006f7	75 09		 jne	 SHORT $LN86@deflate

; 1023 :                 _tr_align(s);

  006f9	8b ce		 mov	 ecx, esi
  006fb	e8 00 00 00 00	 call	 __tr_align
  00700	eb 5c		 jmp	 SHORT $LN90@deflate
$LN86@deflate:

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00702	83 fb 05	 cmp	 ebx, 5
  00705	74 57		 je	 SHORT $LN90@deflate

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  00707	6a 00		 push	 0
  00709	6a 00		 push	 0
  0070b	33 d2		 xor	 edx, edx
  0070d	8b ce		 mov	 ecx, esi
  0070f	e8 00 00 00 00	 call	 __tr_stored_block
  00714	83 c4 08	 add	 esp, 8

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00717	83 fb 03	 cmp	 ebx, 3
  0071a	75 42		 jne	 SHORT $LN90@deflate

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  0071c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0071f	33 d2		 xor	 edx, edx
  00721	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00724	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00729	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0072c	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00733	50		 push	 eax
  00734	52		 push	 edx
  00735	ff 76 44	 push	 DWORD PTR [esi+68]
  00738	e8 00 00 00 00	 call	 _memset
  0073d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1031 :                     if (s->lookahead == 0) {

  00740	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00744	75 18		 jne	 SHORT $LN90@deflate

; 1032 :                         s->strstart = 0;

  00746	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1033 :                         s->block_start = 0L;

  0074d	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1034 :                         s->insert = 0;

  00754	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN90@deflate:

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  0075e	8b cf		 mov	 ecx, edi
  00760	e8 00 00 00 00	 call	 _flush_pending

; 1039 :             if (strm->avail_out == 0) {

  00765	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00769	0f 84 fe f8 ff
	ff		 je	 $LN131@deflate
$LN91@deflate:

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  0076f	83 fb 04	 cmp	 ebx, 4
  00772	0f 85 fc f8 ff
	ff		 jne	 $LN84@deflate

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  00778	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0077b	85 c0		 test	 eax, eax
  0077d	7f 0c		 jg	 SHORT $LN93@deflate
  0077f	5e		 pop	 esi
  00780	5f		 pop	 edi
  00781	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  00784	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  00785	8b e5		 mov	 esp, ebp
  00787	5d		 pop	 ebp
  00788	c2 08 00	 ret	 8
$LN93@deflate:

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  0078b	83 f8 02	 cmp	 eax, 2
  0078e	0f 85 82 00 00
	00		 jne	 $LN94@deflate

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  00794	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00797	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  0079b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0079e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007a1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007a4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  007a7	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  007ab	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007ae	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007b1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007b4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  007b7	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  007bb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007be	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007c1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007c4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  007c7	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  007cb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007ce	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007d1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007d4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  007d7	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  007db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007de	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007e1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007e4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  007e7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007ea	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  007ee	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007f1	ff 46 14	 inc	 DWORD PTR [esi+20]
  007f4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  007f7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007fa	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  007fe	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00801	ff 46 14	 inc	 DWORD PTR [esi+20]
  00804	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00807	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0080a	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  0080e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00811	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1060 :     }

  00814	eb 16		 jmp	 SHORT $LN95@deflate
$LN94@deflate:

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00816	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  0081a	8b ce		 mov	 ecx, esi
  0081c	e8 00 00 00 00	 call	 _putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00821	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00825	8b ce		 mov	 ecx, esi
  00827	e8 00 00 00 00	 call	 _putShortMSB
$LN95@deflate:

; 1066 :     }
; 1067 :     flush_pending(strm);

  0082c	8b cf		 mov	 ecx, edi
  0082e	e8 00 00 00 00	 call	 _flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00833	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00836	85 c0		 test	 eax, eax
  00838	7e 05		 jle	 SHORT $LN96@deflate
  0083a	f7 d8		 neg	 eax
  0083c	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN96@deflate:
  0083f	33 c0		 xor	 eax, eax
  00841	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00844	5e		 pop	 esi
  00845	5f		 pop	 edi
  00846	0f 94 c0	 sete	 al
  00849	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  0084a	8b e5		 mov	 esp, ebp
  0084c	5d		 pop	 ebp
  0084d	c2 08 00	 ret	 8
$LN83@deflate:

; 1009 :             if (strm->avail_out == 0) {

  00850	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00854	0f 85 1a f8 ff
	ff		 jne	 $LN84@deflate

; 871  :                 return Z_OK;

  0085a	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  00861	33 c0		 xor	 eax, eax
  00863	5e		 pop	 esi
  00864	5f		 pop	 edi
  00865	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  00866	8b e5		 mov	 esp, ebp
  00868	5d		 pop	 ebp
  00869	c2 08 00	 ret	 8
$LN31@deflate:

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  0086c	a1 10 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+16
  00871	5e		 pop	 esi
  00872	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00875	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0087a	5f		 pop	 edi
  0087b	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  0087c	8b e5		 mov	 esp, ebp
  0087e	5d		 pop	 ebp
  0087f	c2 08 00	 ret	 8
$LN29@deflate:
  00882	5f		 pop	 edi

; 771  :         return Z_STREAM_ERROR;

  00883	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00888	5b		 pop	 ebx

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;
; 1073 : }

  00889	8b e5		 mov	 esp, ebp
  0088b	5d		 pop	 ebp
  0088c	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5e		 pop	 esi

; 1095 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateEnd:

; 1082 : 
; 1083 :     status = strm->state->status;

  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	57		 push	 edi
  00020	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00023	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00026	85 c0		 test	 eax, eax
  00028	74 0c		 je	 SHORT $LN3@deflateEnd
  0002a	50		 push	 eax
  0002b	ff 76 28	 push	 DWORD PTR [esi+40]
  0002e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00031	ff d0		 call	 eax
  00033	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1087 :     TRY_FREE(strm, strm->state->head);

  00036	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00039	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0003c	85 c0		 test	 eax, eax
  0003e	74 0c		 je	 SHORT $LN4@deflateEnd
  00040	50		 push	 eax
  00041	ff 76 28	 push	 DWORD PTR [esi+40]
  00044	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00047	ff d0		 call	 eax
  00049	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1088 :     TRY_FREE(strm, strm->state->prev);

  0004c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004f	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00052	85 c0		 test	 eax, eax
  00054	74 0c		 je	 SHORT $LN5@deflateEnd
  00056	50		 push	 eax
  00057	ff 76 28	 push	 DWORD PTR [esi+40]
  0005a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005d	ff d0		 call	 eax
  0005f	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1089 :     TRY_FREE(strm, strm->state->window);

  00062	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00065	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00068	85 c0		 test	 eax, eax
  0006a	74 0c		 je	 SHORT $LN6@deflateEnd
  0006c	50		 push	 eax
  0006d	ff 76 28	 push	 DWORD PTR [esi+40]
  00070	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00073	ff d0		 call	 eax
  00075	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  00078	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0007e	ff 76 28	 push	 DWORD PTR [esi+40]
  00081	ff d0		 call	 eax
  00083	83 c4 08	 add	 esp, 8

; 1092 :     strm->state = Z_NULL;

  00086	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008d	33 c0		 xor	 eax, eax
  0008f	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  00094	83 ff 71	 cmp	 edi, 113		; 00000071H
  00097	5f		 pop	 edi
  00098	0f 44 c1	 cmove	 eax, ecx
  0009b	5e		 pop	 esi

; 1095 : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 235  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 236  :     /* To do: ignore strm->next_in if we use it as window */
; 237  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;
; 209  :     p = &s->head[n];

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00003	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 79 4c	 mov	 edi, DWORD PTR [ecx+76]
  0000b	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
  0000e	66 90		 npad	 2
$LL4@slide_hash:

; 210  :     do {
; 211  :         m = *--p;

  00010	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  00014	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00017	3b c2		 cmp	 eax, edx
  00019	72 04		 jb	 SHORT $LN9@slide_hash
  0001b	2b c2		 sub	 eax, edx
  0001d	eb 02		 jmp	 SHORT $LN10@slide_hash
$LN9@slide_hash:
  0001f	33 c0		 xor	 eax, eax
$LN10@slide_hash:
  00021	66 89 06	 mov	 WORD PTR [esi], ax

; 213  :     } while (--n);

  00024	83 ef 01	 sub	 edi, 1
  00027	75 e7		 jne	 SHORT $LL4@slide_hash

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00029	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0002c	8b f2		 mov	 esi, edx
  0002e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 217  :     do {
; 218  :         m = *--p;

  00031	0f b7 41 fe	 movzx	 eax, WORD PTR [ecx-2]
  00035	8d 49 fe	 lea	 ecx, DWORD PTR [ecx-2]

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00038	3b c2		 cmp	 eax, edx
  0003a	72 04		 jb	 SHORT $LN11@slide_hash
  0003c	2b c2		 sub	 eax, edx
  0003e	eb 02		 jmp	 SHORT $LN12@slide_hash
$LN11@slide_hash:
  00040	33 c0		 xor	 eax, eax
$LN12@slide_hash:
  00042	66 89 01	 mov	 WORD PTR [ecx], ax

; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00045	83 ee 01	 sub	 esi, 1
  00048	75 e7		 jne	 SHORT $LL7@slide_hash

; 224  : #endif
; 225  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
tv457 = 36						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;
; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	be 01 00 00 00	 mov	 esi, 1
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 17 02 00
	00		 je	 $LN3@deflateIni
  00014	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00017	0f 85 0e 02 00
	00		 jne	 $LN3@deflateIni
  0001d	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00021	0f 85 04 02 00
	00		 jne	 $LN3@deflateIni

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00027	57		 push	 edi
  00028	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002b	85 ff		 test	 edi, edi
  0002d	75 09		 jne	 SHORT $LN4@deflateIni
  0002f	5f		 pop	 edi
  00030	8d 46 fd	 lea	 eax, DWORD PTR [esi-3]
  00033	5e		 pop	 esi

; 348  : }

  00034	5d		 pop	 ebp
  00035	c2 20 00	 ret	 32			; 00000020H
$LN4@deflateIni:

; 265  : 
; 266  :     strm->msg = Z_NULL;
; 267  :     if (strm->zalloc == (alloc_func)0) {

  00038	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00043	75 0e		 jne	 SHORT $LN5@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00045	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 272  :         strm->opaque = (voidpf)0;

  0004c	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  00053	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00057	75 07		 jne	 SHORT $LN6@deflateIni

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  00059	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:
  00060	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00064	b9 06 00 00 00	 mov	 ecx, 6
  00069	53		 push	 ebx
  0006a	0f 45 4d 0c	 cmovne	 ecx, DWORD PTR _level$[ebp]

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0006e	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00071	89 4d 24	 mov	 DWORD PTR tv457[ebp], ecx
  00074	85 db		 test	 ebx, ebx
  00076	79 06		 jns	 SHORT $LN8@deflateIni

; 289  :         wrap = 0;

  00078	33 f6		 xor	 esi, esi

; 290  :         windowBits = -windowBits;

  0007a	f7 db		 neg	 ebx

; 291  :     }

  0007c	eb 0d		 jmp	 SHORT $LN10@deflateIni
$LN8@deflateIni:

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  0007e	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00081	7e 08		 jle	 SHORT $LN10@deflateIni

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  00083	be 02 00 00 00	 mov	 esi, 2

; 295  :         windowBits -= 16;

  00088	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN10@deflateIni:

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  0008b	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  0008e	48		 dec	 eax
  0008f	83 f8 08	 cmp	 eax, 8
  00092	0f 87 87 01 00
	00		 ja	 $LN12@deflateIni
  00098	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  0009c	0f 85 7d 01 00
	00		 jne	 $LN12@deflateIni
  000a2	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000a5	83 f8 07	 cmp	 eax, 7
  000a8	0f 87 71 01 00
	00		 ja	 $LN12@deflateIni
  000ae	83 f9 09	 cmp	 ecx, 9
  000b1	0f 87 68 01 00
	00		 ja	 $LN12@deflateIni
  000b7	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000bb	0f 87 5e 01 00
	00		 ja	 $LN12@deflateIni
  000c1	83 fb 08	 cmp	 ebx, 8
  000c4	75 0c		 jne	 SHORT $LN13@deflateIni
  000c6	83 fe 01	 cmp	 esi, 1
  000c9	0f 85 50 01 00
	00		 jne	 $LN12@deflateIni

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000cf	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN13@deflateIni:

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000d2	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d5	68 c4 16 00 00	 push	 5828			; 000016c4H
  000da	6a 01		 push	 1
  000dc	ff 77 28	 push	 DWORD PTR [edi+40]
  000df	ff d0		 call	 eax
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000e4	85 c0		 test	 eax, eax
  000e6	0f 84 27 01 00
	00		 je	 $LN21@deflateIni

; 306  :     strm->state = (struct internal_state FAR *)s;

  000ec	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 309  : 
; 310  :     s->wrap = wrap;
; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  000ef	8b cb		 mov	 ecx, ebx
  000f1	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000f4	be 01 00 00 00	 mov	 esi, 1
  000f9	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  000fc	8b d8		 mov	 ebx, eax
  000fe	d3 e6		 shl	 esi, cl

; 314  :     s->w_mask = s->w_size - 1;
; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  00100	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00103	89 38		 mov	 DWORD PTR [eax], edi
  00105	83 c1 07	 add	 ecx, 7
  00108	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  0010f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00116	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00119	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 317  :     s->hash_size = 1 << s->hash_bits;

  0011c	b8 01 00 00 00	 mov	 eax, 1
  00121	d3 e0		 shl	 eax, cl
  00123	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 318  :     s->hash_mask = s->hash_size - 1;

  00126	48		 dec	 eax
  00127	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  0012a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0012f	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  00132	83 c1 02	 add	 ecx, 2
  00135	f7 e1		 mul	 ecx

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00137	6a 02		 push	 2
  00139	d1 ea		 shr	 edx, 1
  0013b	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  0013e	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  00141	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00144	56		 push	 esi
  00145	ff 77 28	 push	 DWORD PTR [edi+40]
  00148	ff d0		 call	 eax

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0014a	6a 02		 push	 2
  0014c	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0014f	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00152	ff 77 28	 push	 DWORD PTR [edi+40]
  00155	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00158	ff d0		 call	 eax

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0015a	6a 02		 push	 2
  0015c	ff 73 4c	 push	 DWORD PTR [ebx+76]
  0015f	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00162	ff 77 28	 push	 DWORD PTR [edi+40]
  00165	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00168	ff d0		 call	 eax

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0016a	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  0016d	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  00170	b8 01 00 00 00	 mov	 eax, 1

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  00175	6a 04		 push	 4
  00177	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  00181	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00184	d3 e0		 shl	 eax, cl
  00186	50		 push	 eax
  00187	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  0018d	ff 77 28	 push	 DWORD PTR [edi+40]
  00190	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00193	ff d0		 call	 eax

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00195	8b b3 9c 16 00
	00		 mov	 esi, DWORD PTR [ebx+5788]
  0019b	83 c4 30	 add	 esp, 48			; 00000030H

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  0019e	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  001a2	8b d0		 mov	 edx, eax
  001a4	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  001a7	8d 0c b5 00 00
	00 00		 lea	 ecx, DWORD PTR [esi*4]
  001ae	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001b1	74 4b		 je	 SHORT $LN16@deflateIni
  001b3	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001b7	74 45		 je	 SHORT $LN16@deflateIni
  001b9	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001bd	74 3f		 je	 SHORT $LN16@deflateIni
  001bf	85 d2		 test	 edx, edx
  001c1	74 3b		 je	 SHORT $LN16@deflateIni

; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001c3	8b c6		 mov	 eax, esi

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 342  : 
; 343  :     s->level = level;
; 344  :     s->strategy = strategy;
; 345  :     s->method = (Byte)method;

  001c5	c6 43 24 08	 mov	 BYTE PTR [ebx+36], 8
  001c9	d1 e8		 shr	 eax, 1

; 346  : 
; 347  :     return deflateReset(strm);

  001cb	57		 push	 edi
  001cc	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001cf	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001d5	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  001d8	03 c6		 add	 eax, esi
  001da	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax
  001e0	8b 45 24	 mov	 eax, DWORD PTR tv457[ebp]
  001e3	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001e9	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001ec	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001f2	e8 00 00 00 00	 call	 _deflateReset@4
  001f7	5b		 pop	 ebx
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi

; 348  : }

  001fa	5d		 pop	 ebp
  001fb	c2 20 00	 ret	 32			; 00000020H
$LN16@deflateIni:

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;
; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001fe	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  00203	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 337  :         deflateEnd (strm);

  0020a	57		 push	 edi
  0020b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0020e	e8 00 00 00 00	 call	 _deflateEnd@4
$LN21@deflateIni:

; 338  :         return Z_MEM_ERROR;

  00213	5b		 pop	 ebx
  00214	5f		 pop	 edi
  00215	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0021a	5e		 pop	 esi

; 348  : }

  0021b	5d		 pop	 ebp
  0021c	c2 20 00	 ret	 32			; 00000020H
$LN12@deflateIni:
  0021f	5b		 pop	 ebx
  00220	5f		 pop	 edi

; 301  :         return Z_STREAM_ERROR;

  00221	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00226	5e		 pop	 esi

; 348  : }

  00227	5d		 pop	 ebp
  00228	c2 20 00	 ret	 32			; 00000020H
$LN3@deflateIni:

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  0022b	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  00230	5e		 pop	 esi

; 348  : }

  00231	5d		 pop	 ebp
  00232	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 360  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;
; 372  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 373  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 359  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 373  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	e8 00 00 00 00	 call	 _deflateStateCheck
  00011	85 c0		 test	 eax, eax
  00013	0f 85 84 01 00
	00		 jne	 $LN8@deflateSet
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  0001c	85 c9		 test	 ecx, ecx
  0001e	0f 84 79 01 00
	00		 je	 $LN8@deflateSet

; 389  :     s = strm->state;

  00024	56		 push	 esi
  00025	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 390  :     wrap = s->wrap;

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 45 fc	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002e	83 f8 02	 cmp	 eax, 2
  00031	0f 84 59 01 00
	00		 je	 $LN10@deflateSet
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 0a		 jne	 SHORT $LN11@deflateSet
  0003c	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  00040	0f 85 4a 01 00
	00		 jne	 $LN10@deflateSet
$LN11@deflateSet:
  00046	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0004a	0f 85 40 01 00
	00		 jne	 $LN10@deflateSet

; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  00050	57		 push	 edi
  00051	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 13		 jne	 SHORT $LN12@deflateSet

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00059	57		 push	 edi
  0005a	51		 push	 ecx
  0005b	ff 73 30	 push	 DWORD PTR [ebx+48]
  0005e	e8 00 00 00 00	 call	 _adler32@12
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00066	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  00069	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN12@deflateSet:

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  00073	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00076	72 4b		 jb	 SHORT $LN13@deflateSet

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  00078	85 c0		 test	 eax, eax
  0007a	75 3f		 jne	 SHORT $LN14@deflateSet

; 402  :             CLEAR_HASH(s);

  0007c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0007f	33 d2		 xor	 edx, edx
  00081	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00084	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00089	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008c	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00093	50		 push	 eax
  00094	52		 push	 edx
  00095	ff 76 44	 push	 DWORD PTR [esi+68]
  00098	e8 00 00 00 00	 call	 _memset
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 403  :             s->strstart = 0;

  000a3	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 404  :             s->block_start = 0L;

  000aa	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 405  :             s->insert = 0;

  000b1	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN14@deflateSet:

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000bb	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000be	03 cf		 add	 ecx, edi

; 408  :         dictLength = s->w_size;

  000c0	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN13@deflateSet:

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  000c3	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000c6	89 45 f8	 mov	 DWORD PTR _avail$1$[ebp], eax

; 413  :     next = strm->next_in;

  000c9	8b 03		 mov	 eax, DWORD PTR [ebx]

; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;

  000cb	89 0b		 mov	 DWORD PTR [ebx], ecx

; 416  :     fill_window(s);

  000cd	8b ce		 mov	 ecx, esi
  000cf	89 45 10	 mov	 DWORD PTR _next$1$[ebp], eax
  000d2	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  000d5	e8 00 00 00 00	 call	 _fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000da	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  000de	72 66		 jb	 SHORT $LN3@deflateSet
$LL2@deflateSet:

; 418  :         str = s->strstart;
; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000e0	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000e3	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  000e6	83 e8 02	 sub	 eax, 2
  000e9	89 45 0c	 mov	 DWORD PTR _n$1$[ebp], eax
  000ec	0f 1f 40 00	 npad	 4
$LL6@deflateSet:

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 426  :             str++;

  00125	43		 inc	 ebx

; 427  :         } while (--n);

  00126	83 6d 0c 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL6@deflateSet

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00141	73 9d		 jae	 SHORT $LL2@deflateSet
  00143	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
$LN3@deflateSet:

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  00146	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00149	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  0014c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 433  :     s->block_start = (long)s->strstart;

  0014f	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 434  :     s->insert = s->lookahead;
; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;

  00152	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  00155	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0015b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00162	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00169	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00170	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00177	89 03		 mov	 DWORD PTR [ebx], eax

; 439  :     strm->avail_in = avail;

  00179	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017c	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 440  :     s->wrap = wrap;

  0017f	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
  00182	5f		 pop	 edi
  00183	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 441  :     return Z_OK;

  00186	33 c0		 xor	 eax, eax
  00188	5e		 pop	 esi
  00189	5b		 pop	 ebx

; 442  : }

  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c2 0c 00	 ret	 12			; 0000000cH
$LN10@deflateSet:
  00190	5e		 pop	 esi

; 392  :         return Z_STREAM_ERROR;

  00191	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00196	5b		 pop	 ebx

; 442  : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflateSet:

; 388  :         return Z_STREAM_ERROR;

  0019d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  001a2	5b		 pop	 ebx

; 442  : }

  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateGet

; 454  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 464  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflateGet:

; 455  :     s = strm->state;

  00018	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001b	56		 push	 esi

; 456  :     len = s->strstart + s->lookahead;

  0001c	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0001f	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]

; 457  :     if (len > s->w_size)

  00022	3b 4a 2c	 cmp	 ecx, DWORD PTR [edx+44]
  00025	8b f1		 mov	 esi, ecx
  00027	0f 47 72 2c	 cmova	 esi, DWORD PTR [edx+44]

; 458  :         len = s->w_size;
; 459  :     if (dictionary != Z_NULL && len)

  0002b	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0002f	74 18		 je	 SHORT $LN4@deflateGet
  00031	85 f6		 test	 esi, esi
  00033	74 14		 je	 SHORT $LN4@deflateGet

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00035	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00038	2b c6		 sub	 eax, esi
  0003a	56		 push	 esi
  0003b	03 c1		 add	 eax, ecx
  0003d	50		 push	 eax
  0003e	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  00041	e8 00 00 00 00	 call	 _memcpy
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 461  :     if (dictLength != Z_NULL)

  00049	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  0004c	85 c0		 test	 eax, eax
  0004e	74 02		 je	 SHORT $LN5@deflateGet

; 462  :         *dictLength = len;

  00050	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 463  :     return Z_OK;

  00052	33 c0		 xor	 eax, eax
  00054	5e		 pop	 esi

; 464  : }

  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateRes

; 473  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 502  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateRes:
  0001c	56		 push	 esi

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;
; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 478  :     strm->data_type = Z_UNKNOWN;
; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  0001d	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00020	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00027	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00035	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;

  0003c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003f	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 483  : 
; 484  :     if (s->wrap < 0) {

  00042	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00045	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004c	85 c0		 test	 eax, eax
  0004e	79 05		 jns	 SHORT $LN3@deflateRes

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00050	f7 d8		 neg	 eax
  00052	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN3@deflateRes:

; 486  :     }
; 487  :     s->status =

  00055	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00058	83 f9 02	 cmp	 ecx, 2
  0005b	75 05		 jne	 SHORT $LN5@deflateRes
  0005d	8d 41 37	 lea	 eax, DWORD PTR [ecx+55]
  00060	eb 0f		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00062	85 c9		 test	 ecx, ecx
  00064	b8 71 00 00 00	 mov	 eax, 113		; 00000071H
  00069	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  0006e	0f 45 c2	 cmovne	 eax, edx
$LN6@deflateRes:
  00071	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	83 f9 02	 cmp	 ecx, 2
  0007d	75 07		 jne	 SHORT $LN7@deflateRes
  0007f	e8 00 00 00 00	 call	 _crc32@12
  00084	eb 05		 jmp	 SHORT $LN8@deflateRes
$LN7@deflateRes:
  00086	e8 00 00 00 00	 call	 _adler32@12
$LN8@deflateRes:
  0008b	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  0008e	8b ce		 mov	 ecx, esi
  00090	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00097	e8 00 00 00 00	 call	 __tr_init
  0009c	5e		 pop	 esi

; 500  : 
; 501  :     return Z_OK;

  0009d	33 c0		 xor	 eax, eax
  0009f	5f		 pop	 edi

; 502  : }

  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 511  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN2@deflateRes

; 512  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 513  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN2@deflateRes:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 514  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 15		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0c		 jne	 SHORT $LN3@deflateSet

; 523  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 524  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 525  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@deflateSet:

; 522  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 525  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 539  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePen:

; 534  :     if (pending != Z_NULL)

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	74 08		 je	 SHORT $LN3@deflatePen

; 535  :         *pending = strm->state->pending;

  0001f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN3@deflatePen:

; 536  :     if (bits != Z_NULL)

  00027	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  0002a	85 d2		 test	 edx, edx
  0002c	74 0b		 je	 SHORT $LN4@deflatePen

; 537  :         *bits = strm->state->bi_valid;

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00037	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 538  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 539  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN5@deflatePri
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 565  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePri:
  00018	56		 push	 esi

; 551  :     s = strm->state;

  00019	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	83 c0 02	 add	 eax, 2
  00022	39 86 a4 16 00
	00		 cmp	 DWORD PTR [esi+5796], eax
  00028	73 0a		 jae	 SHORT $LN11@deflatePri

; 553  :         return Z_BUF_ERROR;

  0002a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002f	5e		 pop	 esi

; 565  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflatePri:
  00034	53		 push	 ebx

; 553  :         return Z_BUF_ERROR;

  00035	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  00038	57		 push	 edi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@deflatePri:

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00040	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  00046	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0004b	2b fa		 sub	 edi, edx

; 556  :         if (put > bits)
; 557  :             put = bits;
; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	3b fb		 cmp	 edi, ebx
  00054	0f 4f fb	 cmovg	 edi, ebx
  00057	8b cf		 mov	 ecx, edi
  00059	66 d3 e0	 shl	 ax, cl
  0005c	8b ca		 mov	 ecx, edx
  0005e	66 48		 dec	 ax
  00060	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00064	66 d3 e0	 shl	 ax, cl

; 559  :         s->bi_valid += put;
; 560  :         _tr_flush_bits(s);

  00067	8b ce		 mov	 ecx, esi
  00069	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00070	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00073	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00079	e8 00 00 00 00	 call	 __tr_flush_bits

; 561  :         value >>= put;

  0007e	8b cf		 mov	 ecx, edi
  00080	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 562  :         bits -= put;

  00083	2b df		 sub	 ebx, edi

; 563  :     } while (bits);

  00085	75 b9		 jne	 SHORT $LL4@deflatePri

; 564  :     return Z_OK;

  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx
  00089	33 c0		 xor	 eax, eax
  0008b	5e		 pop	 esi

; 565  : }

  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflatePar
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5b		 pop	 ebx

; 614  : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePar:
  0001c	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00020	56		 push	 esi

; 577  :     s = strm->state;

  00021	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  00024	57		 push	 edi
  00025	bf 06 00 00 00	 mov	 edi, 6
  0002a	0f 45 7d 0c	 cmovne	 edi, DWORD PTR _level$[ebp]

; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0002e	83 ff 09	 cmp	 edi, 9
  00031	0f 87 05 01 00
	00		 ja	 $LN5@deflatePar
  00037	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 87 f9 00 00
	00		 ja	 $LN5@deflatePar

; 586  :     }
; 587  :     func = configuration_table[s->level].func;
; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  00043	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00049	75 1c		 jne	 SHORT $LN7@deflatePar
  0004b	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00051	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00054	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00057	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  0005e	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  00065	74 2c		 je	 SHORT $LN9@deflatePar
$LN7@deflatePar:
  00067	83 be c0 16 00
	00 00		 cmp	 DWORD PTR [esi+5824], 0
  0006e	74 23		 je	 SHORT $LN9@deflatePar

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  00070	6a 05		 push	 5
  00072	53		 push	 ebx
  00073	e8 00 00 00 00	 call	 _deflate@8

; 593  :         if (err == Z_STREAM_ERROR)

  00078	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0007b	0f 84 bb 00 00
	00		 je	 $LN5@deflatePar

; 594  :             return err;
; 595  :         if (strm->avail_out == 0)

  00081	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00085	75 0c		 jne	 SHORT $LN9@deflatePar

; 596  :             return Z_BUF_ERROR;

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0008e	5b		 pop	 ebx

; 614  : }

  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN9@deflatePar:

; 597  :     }
; 598  :     if (s->level != level) {

  00093	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00099	3b c7		 cmp	 eax, edi
  0009b	0f 84 89 00 00
	00		 je	 $LN10@deflatePar

; 599  :         if (s->level == 0 && s->matches != 0) {

  000a1	85 c0		 test	 eax, eax
  000a3	75 47		 jne	 SHORT $LN11@deflatePar
  000a5	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000ab	85 c0		 test	 eax, eax
  000ad	74 3d		 je	 SHORT $LN11@deflatePar

; 600  :             if (s->matches == 1)

  000af	83 f8 01	 cmp	 eax, 1
  000b2	75 09		 jne	 SHORT $LN12@deflatePar

; 601  :                 slide_hash(s);

  000b4	8b ce		 mov	 ecx, esi
  000b6	e8 00 00 00 00	 call	 _slide_hash
  000bb	eb 0d		 jmp	 SHORT $LN13@deflatePar
$LN12@deflatePar:

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  000bd	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000c0	33 d2		 xor	 edx, edx
  000c2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000c5	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
$LN13@deflatePar:
  000ca	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000cd	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000d4	50		 push	 eax
  000d5	6a 00		 push	 0
  000d7	ff 76 44	 push	 DWORD PTR [esi+68]
  000da	e8 00 00 00 00	 call	 _memset
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 604  :             s->matches = 0;

  000e2	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN11@deflatePar:

; 605  :         }
; 606  :         s->level = level;
; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000ec	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000ef	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  000f5	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  000fd	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 608  :         s->good_match       = configuration_table[level].good_length;

  00103	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0010b	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  00111	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  00119	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  0011f	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  00127	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN10@deflatePar:

; 611  :     }
; 612  :     s->strategy = strategy;

  0012a	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  0012d	5f		 pop	 edi
  0012e	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 613  :     return Z_OK;

  00134	33 c0		 xor	 eax, eax
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx

; 614  : }

  00138	5d		 pop	 ebp
  00139	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePar:
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi

; 585  :         return Z_STREAM_ERROR;

  0013e	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00143	5b		 pop	 ebx

; 614  : }

  00144	5d		 pop	 ebp
  00145	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00014	5d		 pop	 ebp
  00015	c2 14 00	 ret	 20			; 00000014H
$LN2@deflateTun:

; 627  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 628  :     s->good_match = (uInt)good_length;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001e	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 629  :     s->max_lazy_match = (uInt)max_lazy;

  00024	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00027	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 630  :     s->nice_match = nice_length;

  0002d	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00030	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 631  :     s->max_chain_length = (uInt)max_chain;

  00036	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00039	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 632  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 633  : }

  0003e	5d		 pop	 ebp
  0003f	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_complen$1$ = 12					; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +
; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  0000a	8d 57 3f	 lea	 edx, DWORD PTR [edi+63]
  0000d	8d 47 07	 lea	 eax, DWORD PTR [edi+7]
  00010	c1 ea 06	 shr	 edx, 6
  00013	c1 e8 03	 shr	 eax, 3
  00016	03 d7		 add	 edx, edi
  00018	83 c0 05	 add	 eax, 5
  0001b	03 d0		 add	 edx, eax
  0001d	89 55 0c	 mov	 DWORD PTR _complen$1$[ebp], edx
  00020	e8 00 00 00 00	 call	 _deflateStateCheck
  00025	85 c0		 test	 eax, eax
  00027	74 08		 je	 SHORT $LN10@deflateBou

; 665  :         return complen + 6;

  00029	8d 42 06	 lea	 eax, DWORD PTR [edx+6]
  0002c	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN10@deflateBou:
  00031	53		 push	 ebx
  00032	56		 push	 esi

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00033	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 669  :     switch (s->wrap) {

  00036	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00039	83 e8 00	 sub	 eax, 0
  0003c	74 6c		 je	 SHORT $LN11@deflateBou
  0003e	83 e8 01	 sub	 eax, 1
  00041	74 56		 je	 SHORT $LN12@deflateBou
  00043	83 e8 01	 sub	 eax, 1
  00046	74 07		 je	 SHORT $LN13@deflateBou

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00048	bb 06 00 00 00	 mov	 ebx, 6
  0004d	eb 62		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0004f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00052	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H
  00057	85 d2		 test	 edx, edx
  00059	74 53		 je	 SHORT $LN29@deflateBou

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  0005b	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0005f	74 06		 je	 SHORT $LN15@deflateBou

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  00061	8b 5a 14	 mov	 ebx, DWORD PTR [edx+20]
  00064	83 c3 14	 add	 ebx, 20			; 00000014H
$LN15@deflateBou:

; 683  :             str = s->gzhead->name;

  00067	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]

; 684  :             if (str != Z_NULL)

  0006a	85 c9		 test	 ecx, ecx
  0006c	74 0c		 je	 SHORT $LN5@deflateBou
  0006e	66 90		 npad	 2
$LL6@deflateBou:

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00075	43		 inc	 ebx
  00076	84 c0		 test	 al, al
  00078	75 f6		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 688  :             str = s->gzhead->comment;

  0007a	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]

; 689  :             if (str != Z_NULL)

  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0a		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00081	8a 01		 mov	 al, BYTE PTR [ecx]
  00083	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00086	43		 inc	 ebx
  00087	84 c0		 test	 al, al
  00089	75 f6		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 693  :             if (s->gzhead->hcrc)

  0008b	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0

; 695  :         }
; 696  :         break;

  0008f	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
  00092	74 1d		 je	 SHORT $LN2@deflateBou

; 694  :                 wraplen += 2;

  00094	83 c3 02	 add	 ebx, 2

; 695  :         }
; 696  :         break;

  00097	eb 18		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:
  00099	33 db		 xor	 ebx, ebx
  0009b	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  0009e	0f 95 c3	 setne	 bl
  000a1	8d 1c 9d 06 00
	00 00		 lea	 ebx, DWORD PTR [ebx*4+6]

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);
; 675  :         break;

  000a8	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000aa	33 db		 xor	 ebx, ebx
  000ac	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN29@deflateBou:
  000ae	8b 55 0c	 mov	 edx, DWORD PTR _complen$1$[ebp]
$LN2@deflateBou:

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000b1	83 7e 30 0f	 cmp	 DWORD PTR [esi+48], 15	; 0000000fH
  000b5	75 27		 jne	 SHORT $LN21@deflateBou
  000b7	83 7e 50 0f	 cmp	 DWORD PTR [esi+80], 15	; 0000000fH
  000bb	75 21		 jne	 SHORT $LN21@deflateBou

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000bd	8b cf		 mov	 ecx, edi
  000bf	8b d7		 mov	 edx, edi
  000c1	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000c4	8b c7		 mov	 eax, edi
  000c6	03 cb		 add	 ecx, ebx
  000c8	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000cb	c1 ea 19	 shr	 edx, 25			; 00000019H
  000ce	83 c0 07	 add	 eax, 7
  000d1	03 ca		 add	 ecx, edx
  000d3	5e		 pop	 esi
  000d4	03 c1		 add	 eax, ecx
  000d6	5b		 pop	 ebx
  000d7	03 c7		 add	 eax, edi
  000d9	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
$LN21@deflateBou:
  000de	5e		 pop	 esi

; 704  :         return complen + wraplen;

  000df	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  000e2	5b		 pop	 ebx
  000e3	5f		 pop	 edi

; 708  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 709  : }

  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 719  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 720  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 722  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 732  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 735  : 
; 736  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 737  :     len = s->pending;

  0000f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  00012	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  00015	0f 47 7b 10	 cmova	 edi, DWORD PTR [ebx+16]

; 739  :     if (len == 0) return;

  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 742  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 743  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 744  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 745  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 746  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 747  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 748  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 749  :     }
; 750  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_overlay$1$ = 12					; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	85 c0		 test	 eax, eax
  0000e	0f 85 7d 01 00
	00		 jne	 $LN3@deflateCop
  00014	8b 75 08	 mov	 esi, DWORD PTR _dest$[ebp]
  00017	85 f6		 test	 esi, esi
  00019	0f 84 72 01 00
	00		 je	 $LN3@deflateCop

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;
; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	53		 push	 ebx
  00023	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00026	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00029	57		 push	 edi
  0002a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	68 c4 16 00 00	 push	 5828			; 000016c4H
  00033	6a 01		 push	 1
  00035	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00039	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003d	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00041	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00046	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0004b	ff 76 28	 push	 DWORD PTR [esi+40]
  0004e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00051	ff d0		 call	 eax
  00053	8b f8		 mov	 edi, eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00058	85 ff		 test	 edi, edi
  0005a	0f 84 25 01 00
	00		 je	 $LN10@deflateCop

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00060	68 c4 16 00 00	 push	 5828			; 000016c4H
  00065	53		 push	 ebx
  00066	57		 push	 edi
  00067	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0006a	e8 00 00 00 00	 call	 _memcpy

; 1126 :     ds->strm = dest;
; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0006f	6a 02		 push	 2
  00071	ff 77 2c	 push	 DWORD PTR [edi+44]
  00074	89 37		 mov	 DWORD PTR [edi], esi
  00076	ff 76 28	 push	 DWORD PTR [esi+40]
  00079	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007c	ff d0		 call	 eax

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007e	6a 02		 push	 2
  00080	ff 77 2c	 push	 DWORD PTR [edi+44]
  00083	89 47 38	 mov	 DWORD PTR [edi+56], eax
  00086	ff 76 28	 push	 DWORD PTR [esi+40]
  00089	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008c	ff d0		 call	 eax

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008e	6a 02		 push	 2
  00090	ff 77 4c	 push	 DWORD PTR [edi+76]
  00093	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00096	ff 76 28	 push	 DWORD PTR [esi+40]
  00099	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0009c	ff d0		 call	 eax

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  0009e	6a 04		 push	 4
  000a0	ff b7 9c 16 00
	00		 push	 DWORD PTR [edi+5788]
  000a6	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000a9	ff 76 28	 push	 DWORD PTR [esi+40]
  000ac	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000af	ff d0		 call	 eax

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b1	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  000b4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b7	89 45 0c	 mov	 DWORD PTR _overlay$1$[ebp], eax
  000ba	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000bd	85 c9		 test	 ecx, ecx
  000bf	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  000c5	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  000c9	0f 84 b0 00 00
	00		 je	 $LN6@deflateCop
  000cf	83 7f 44 00	 cmp	 DWORD PTR [edi+68], 0
  000d3	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 9e 00 00
	00		 je	 $LN6@deflateCop

; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000e1	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000e4	03 c0		 add	 eax, eax
  000e6	50		 push	 eax
  000e7	ff 73 38	 push	 DWORD PTR [ebx+56]
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 _memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000f0	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000f3	03 c0		 add	 eax, eax
  000f5	50		 push	 eax
  000f6	ff 73 40	 push	 DWORD PTR [ebx+64]
  000f9	ff 77 40	 push	 DWORD PTR [edi+64]
  000fc	e8 00 00 00 00	 call	 _memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00101	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00104	03 c0		 add	 eax, eax
  00106	50		 push	 eax
  00107	ff 73 44	 push	 DWORD PTR [ebx+68]
  0010a	ff 77 44	 push	 DWORD PTR [edi+68]
  0010d	e8 00 00 00 00	 call	 _memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00112	ff 77 0c	 push	 DWORD PTR [edi+12]
  00115	ff 73 08	 push	 DWORD PTR [ebx+8]
  00118	ff 77 08	 push	 DWORD PTR [edi+8]
  0011b	e8 00 00 00 00	 call	 _memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00120	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00123	83 c4 30	 add	 esp, 48			; 00000030H
  00126	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  00129	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0012c	03 c2		 add	 eax, edx

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  0012e	8b 8f 9c 16 00
	00		 mov	 ecx, DWORD PTR [edi+5788]
  00134	8b 75 0c	 mov	 esi, DWORD PTR _overlay$1$[ebp]
  00137	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0013a	8b c1		 mov	 eax, ecx
  0013c	d1 e8		 shr	 eax, 1
  0013e	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00141	89 87 a4 16 00
	00		 mov	 DWORD PTR [edi+5796], eax

; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00147	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0014a	03 c1		 add	 eax, ecx
  0014c	89 87 98 16 00
	00		 mov	 DWORD PTR [edi+5784], eax

; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00152	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
  00158	89 87 18 0b 00
	00		 mov	 DWORD PTR [edi+2840], eax

; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0015e	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  00164	89 87 24 0b 00
	00		 mov	 DWORD PTR [edi+2852], eax

; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0016a	8d 87 7c 0a 00
	00		 lea	 eax, DWORD PTR [edi+2684]
  00170	89 87 30 0b 00
	00		 mov	 DWORD PTR [edi+2864], eax

; 1152 : 
; 1153 :     return Z_OK;

  00176	33 c0		 xor	 eax, eax
  00178	5f		 pop	 edi
  00179	5b		 pop	 ebx
  0017a	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN6@deflateCop:

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  0017f	56		 push	 esi
  00180	e8 00 00 00 00	 call	 _deflateEnd@4
$LN10@deflateCop:

; 1137 :         return Z_MEM_ERROR;

  00185	5f		 pop	 edi
  00186	5b		 pop	 ebx
  00187	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0018c	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
$LN3@deflateCop:

; 1115 :         return Z_STREAM_ERROR;

  00191	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00196	5e		 pop	 esi

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  00197	5d		 pop	 ebp
  00198	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 1169 :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1170 : 
; 1171 :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 1172 :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx

; 1189 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 1173 : 
; 1174 :     strm->avail_in  -= len;
; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 1177 :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN4@read_buf

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 1186 :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1187 : 
; 1188 :     return len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 1189 : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN4@read_buf:

; 1179 :     }
; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN6@read_buf

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12
  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN6@read_buf:

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00068	01 3e		 add	 DWORD PTR [esi], edi

; 1187 : 
; 1188 :     return len;

  0006a	8b c7		 mov	 eax, edi
  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1189 : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 1196 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1197 :     s->window_size = (ulg)2L*s->w_size;
; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 1207 : 
; 1208 :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1209 :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1210 :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1211 :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1213 :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1214 :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 1215 : #ifndef FASTEST
; 1216 : #ifdef ASMV
; 1217 :     match_init(); /* initialize the asm code */

  000a9	e9 00 00 00 00	 jmp	 _match_init
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00009	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$1$[ebp], ebx
  0000f	90		 npad	 1
$LL4@fill_windo:

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00010	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00013	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00016	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001b	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001e	03 c3		 add	 eax, ebx
  00020	2b 7e 6c	 sub	 edi, DWORD PTR [esi+108]
  00023	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  00026	72 27		 jb	 SHORT $LN11@fill_windo

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00028	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002b	8b c3		 mov	 eax, ebx
  0002d	2b c7		 sub	 eax, edi
  0002f	50		 push	 eax
  00030	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memcpy

; 1513 :             s->match_start -= wsize;

  0003a	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00040	29 5e 6c	 sub	 DWORD PTR [esi+108], ebx

; 1515 :             s->block_start -= (long) wsize;
; 1516 :             slide_hash(s);

  00043	8b ce		 mov	 ecx, esi
  00045	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00048	e8 00 00 00 00	 call	 _slide_hash

; 1517 :             more += wsize;

  0004d	03 fb		 add	 edi, ebx
$LN11@fill_windo:

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00055	0f 84 b2 00 00
	00		 je	 $LN3@fill_windo

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0005b	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  0005e	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00061	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _read_buf

; 1535 :         s->lookahead += n;

  0006a	01 46 74	 add	 DWORD PTR [esi+116], eax
  0006d	83 c4 04	 add	 esp, 4
  00070	8b 46 74	 mov	 eax, DWORD PTR [esi+116]

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00073	8b be b4 16 00
	00		 mov	 edi, DWORD PTR [esi+5812]
  00079	03 c7		 add	 eax, edi
  0007b	83 f8 03	 cmp	 eax, 3
  0007e	72 78		 jb	 SHORT $LN2@fill_windo

; 1539 :             uInt str = s->strstart - s->insert;

  00080	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 1540 :             s->ins_h = s->window[str];

  00083	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00086	2b df		 sub	 ebx, edi

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  00088	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0008b	0f b6 14 18	 movzx	 edx, BYTE PTR [eax+ebx]
  0008f	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00092	0f b6 44 18 01	 movzx	 eax, BYTE PTR [eax+ebx+1]
  00097	d3 e2		 shl	 edx, cl
  00099	33 d0		 xor	 edx, eax
  0009b	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0009e	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000a1	85 ff		 test	 edi, edi
  000a3	74 50		 je	 SHORT $LN32@fill_windo
$LL5@fill_windo:

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000a5	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000a8	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000ab	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000ae	23 d3		 and	 edx, ebx
  000b0	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000b5	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000b8	d3 e0		 shl	 eax, cl
  000ba	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000bd	33 f8		 xor	 edi, eax
  000bf	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000c2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000c5	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000c8	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000cc	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;

  000d0	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000d3	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000d6	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 1551 :                 str++;

  000da	43		 inc	 ebx

; 1552 :                 s->insert--;

  000db	ff 8e b4 16 00
	00		 dec	 DWORD PTR [esi+5812]

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  000e1	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000e4	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  000ea	03 c1		 add	 eax, ecx
  000ec	83 f8 03	 cmp	 eax, 3
  000ef	72 04		 jb	 SHORT $LN32@fill_windo

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  000f1	85 c9		 test	 ecx, ecx
  000f3	75 b0		 jne	 SHORT $LL5@fill_windo
$LN32@fill_windo:
  000f5	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN2@fill_windo:

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  000f8	81 7e 74 06 01
	00 00		 cmp	 DWORD PTR [esi+116], 262 ; 00000106H
  000ff	73 0c		 jae	 SHORT $LN3@fill_windo
  00101	8b 06		 mov	 eax, DWORD PTR [esi]
  00103	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00107	0f 85 03 ff ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  0010d	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  00113	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]
  00116	3b cb		 cmp	 ecx, ebx
  00118	73 67		 jae	 SHORT $LN20@fill_windo

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0011a	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  0011d	03 7e 6c	 add	 edi, DWORD PTR [esi+108]

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  00120	3b cf		 cmp	 ecx, edi
  00122	73 2d		 jae	 SHORT $LN17@fill_windo

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;
; 1579 :             if (init > WIN_INIT)

  00124	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00129	2b df		 sub	 ebx, edi
  0012b	3b d8		 cmp	 ebx, eax
  0012d	0f 47 d8	 cmova	 ebx, eax

; 1580 :                 init = WIN_INIT;
; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  00130	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00133	53		 push	 ebx
  00134	03 c7		 add	 eax, edi
  00136	6a 00		 push	 0
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 _memset
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :             s->high_water = curr + init;

  00141	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00144	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
$LN17@fill_windo:

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00151	8d 87 02 01 00
	00		 lea	 eax, DWORD PTR [edi+258]
  00157	3b c8		 cmp	 ecx, eax
  00159	73 26		 jae	 SHORT $LN20@fill_windo

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;
; 1590 :             if (init > s->window_size - s->high_water)
; 1591 :                 init = s->window_size - s->high_water;
; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  0015b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0015e	2b f9		 sub	 edi, ecx
  00160	2b d9		 sub	 ebx, ecx
  00162	81 c7 02 01 00
	00		 add	 edi, 258		; 00000102H
  00168	3b fb		 cmp	 edi, ebx
  0016a	0f 47 fb	 cmova	 edi, ebx
  0016d	03 c1		 add	 eax, ecx
  0016f	57		 push	 edi
  00170	6a 00		 push	 0
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _memset
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1593 :             s->high_water += init;

  0017b	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN20@fill_windo:
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx

; 1594 :         }
; 1595 :     }
; 1596 : 
; 1597 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1598 :            "not enough room for search");
; 1599 : }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
_used$1$ = -8						; size = 4
_min_block$1$ = -4					; size = 4
tv692 = 8						; size = 4
_left$2$ = 8						; size = 4
_len$4$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;
; 1658 :     unsigned used = s->strm->avail_in;

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	83 c1 fb	 add	 ecx, -5			; fffffffbH
  00014	3b 4e 2c	 cmp	 ecx, DWORD PTR [esi+44]
  00017	0f 47 4e 2c	 cmova	 ecx, DWORD PTR [esi+44]
  0001b	33 ff		 xor	 edi, edi
  0001d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00020	89 4d fc	 mov	 DWORD PTR _min_block$1$[ebp], ecx
  00023	89 45 f8	 mov	 DWORD PTR _used$1$[ebp], eax
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@deflate_st:

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00036	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 c0 2a	 add	 eax, 42			; 0000002aH
  00040	c1 f8 03	 sar	 eax, 3
  00043	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00046	3b d0		 cmp	 edx, eax
  00048	0f 82 03 01 00
	00		 jb	 $LN3@deflate_st

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;
; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  0004e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00051	2b d0		 sub	 edx, eax
  00053	2b 4e 5c	 sub	 ecx, DWORD PTR [esi+92]

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	89 4d 08	 mov	 DWORD PTR _left$2$[ebp], ecx
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	03 c8		 add	 ecx, eax

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1673 :         if (len > have)
; 1674 :             len = have;                         /* limit len to the output */
; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00060	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  00063	3b cb		 cmp	 ecx, ebx
  00065	0f 42 d9	 cmovb	 ebx, ecx
  00068	3b da		 cmp	 ebx, edx
  0006a	0f 47 da	 cmova	 ebx, edx
  0006d	3b 5d fc	 cmp	 ebx, DWORD PTR _min_block$1$[ebp]
  00070	73 1d		 jae	 SHORT $LN8@deflate_st
  00072	85 db		 test	 ebx, ebx
  00074	75 09		 jne	 SHORT $LN10@deflate_st
  00076	83 f8 04	 cmp	 eax, 4
  00079	0f 85 d2 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  0007f	85 c0		 test	 eax, eax
  00081	0f 84 ca 00 00
	00		 je	 $LN3@deflate_st
  00087	3b d9		 cmp	 ebx, ecx
  00089	0f 85 c2 00 00
	00		 jne	 $LN3@deflate_st
$LN8@deflate_st:

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  0008f	83 f8 04	 cmp	 eax, 4
  00092	75 09		 jne	 SHORT $LN33@deflate_st
  00094	3b d9		 cmp	 ebx, ecx
  00096	75 05		 jne	 SHORT $LN33@deflate_st
  00098	8d 78 fd	 lea	 edi, DWORD PTR [eax-3]
  0009b	eb 02		 jmp	 SHORT $LN34@deflate_st
$LN33@deflate_st:
  0009d	33 ff		 xor	 edi, edi
$LN34@deflate_st:

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  0009f	57		 push	 edi
  000a0	6a 00		 push	 0
  000a2	33 d2		 xor	 edx, edx
  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 __tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000ab	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000ae	8b d3		 mov	 edx, ebx
  000b0	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000b3	83 c4 08	 add	 esp, 8
  000b6	c1 ea 08	 shr	 edx, 8
  000b9	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  000bd	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000c0	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000c3	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000c7	8a d3		 mov	 dl, bl
  000c9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000cc	f6 d2		 not	 dl
  000ce	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d1	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000d5	8b d3		 mov	 edx, ebx
  000d7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000da	f7 d2		 not	 edx
  000dc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000df	c1 ea 08	 shr	 edx, 8
  000e2	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  000e6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e8	e8 00 00 00 00	 call	 _flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  000ed	8b 45 08	 mov	 eax, DWORD PTR _left$2$[ebp]
  000f0	85 c0		 test	 eax, eax
  000f2	74 34		 je	 SHORT $LN11@deflate_st

; 1709 :             if (left > len)

  000f4	3b c3		 cmp	 eax, ebx
  000f6	0f 47 c3	 cmova	 eax, ebx

; 1710 :                 left = len;
; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  000f9	50		 push	 eax
  000fa	89 45 08	 mov	 DWORD PTR _left$2$[ebp], eax
  000fd	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00100	03 46 5c	 add	 eax, DWORD PTR [esi+92]
  00103	50		 push	 eax
  00104	8b 06		 mov	 eax, DWORD PTR [esi]
  00106	ff 70 0c	 push	 DWORD PTR [eax+12]
  00109	e8 00 00 00 00	 call	 _memcpy

; 1712 :             s->strm->next_out += left;

  0010e	8b 06		 mov	 eax, DWORD PTR [esi]
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _left$2$[ebp]
  00116	01 48 0c	 add	 DWORD PTR [eax+12], ecx

; 1713 :             s->strm->avail_out -= left;

  00119	8b 06		 mov	 eax, DWORD PTR [esi]
  0011b	29 48 10	 sub	 DWORD PTR [eax+16], ecx

; 1714 :             s->strm->total_out += left;

  0011e	8b 06		 mov	 eax, DWORD PTR [esi]
  00120	01 48 14	 add	 DWORD PTR [eax+20], ecx

; 1715 :             s->block_start += left;

  00123	01 4e 5c	 add	 DWORD PTR [esi+92], ecx

; 1716 :             len -= left;

  00126	2b d9		 sub	 ebx, ecx
$LN11@deflate_st:

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00128	85 db		 test	 ebx, ebx
  0012a	74 1d		 je	 SHORT $LN2@deflate_st

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  0012c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012e	53		 push	 ebx
  0012f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00132	e8 00 00 00 00	 call	 _read_buf

; 1724 :             s->strm->next_out += len;

  00137	8b 06		 mov	 eax, DWORD PTR [esi]
  00139	83 c4 04	 add	 esp, 4
  0013c	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1725 :             s->strm->avail_out -= len;

  0013f	8b 06		 mov	 eax, DWORD PTR [esi]
  00141	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1726 :             s->strm->total_out += len;

  00144	8b 06		 mov	 eax, DWORD PTR [esi]
  00146	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1727 :         }
; 1728 :     } while (last == 0);

  00149	85 ff		 test	 edi, edi
  0014b	0f 84 df fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00151	8b 06		 mov	 eax, DWORD PTR [esi]
  00153	8b 5d f8	 mov	 ebx, DWORD PTR _used$1$[ebp]
  00156	2b 58 04	 sub	 ebx, DWORD PTR [eax+4]

; 1737 :     if (used) {

  00159	0f 84 9c 00 00
	00		 je	 $LN14@deflate_st

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  0015f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00162	3b da		 cmp	 ebx, edx
  00164	72 23		 jb	 SHORT $LN15@deflate_st

; 1742 :             s->matches = 2;         /* clear hash */

  00166	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  00170	8b 00		 mov	 eax, DWORD PTR [eax]
  00172	52		 push	 edx
  00173	2b c2		 sub	 eax, edx
  00175	50		 push	 eax
  00176	ff 76 38	 push	 DWORD PTR [esi+56]
  00179	e8 00 00 00 00	 call	 _memcpy

; 1744 :             s->strstart = s->w_size;

  0017e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
  00184	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1745 :         }

  00187	eb 53		 jmp	 SHORT $LN16@deflate_st
$LN15@deflate_st:

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  00189	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0018c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0018f	2b c1		 sub	 eax, ecx
  00191	3b c3		 cmp	 eax, ebx
  00193	77 2d		 ja	 SHORT $LN18@deflate_st

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;

  00195	2b ca		 sub	 ecx, edx
  00197	89 4d 08	 mov	 DWORD PTR tv692[ebp], ecx

; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0019a	ff 75 08	 push	 DWORD PTR tv692[ebp]
  0019d	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  001a0	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a3	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	e8 00 00 00 00	 call	 _memcpy

; 1751 :                 if (s->matches < 2)

  001ad	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	83 f8 02	 cmp	 eax, 2
  001b9	73 07		 jae	 SHORT $LN18@deflate_st

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  001bb	40		 inc	 eax
  001bc	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001c2	8b 06		 mov	 eax, DWORD PTR [esi]
  001c4	53		 push	 ebx
  001c5	8b 00		 mov	 eax, DWORD PTR [eax]
  001c7	2b c3		 sub	 eax, ebx
  001c9	50		 push	 eax
  001ca	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001cd	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 _memcpy
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 :             s->strstart += used;

  001d9	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
$LN16@deflate_st:

; 1756 :         }
; 1757 :         s->block_start = s->strstart;

  001dc	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  001df	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  001e5	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001e8	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001eb	2b c1		 sub	 eax, ecx
  001ed	3b d8		 cmp	 ebx, eax
  001ef	0f 47 d8	 cmova	 ebx, eax
  001f2	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001f5	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN14@deflate_st:

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  001fb	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  001fe	39 8e c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], ecx
  00204	73 06		 jae	 SHORT $LN19@deflate_st

; 1761 :         s->high_water = s->strstart;

  00206	89 8e c0 16 00
	00		 mov	 DWORD PTR [esi+5824], ecx
$LN19@deflate_st:

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  0020c	85 ff		 test	 edi, edi
  0020e	74 0c		 je	 SHORT $LN20@deflate_st

; 1765 :         return finish_done;

  00210	5f		 pop	 edi
  00211	5e		 pop	 esi
  00212	b8 03 00 00 00	 mov	 eax, 3
  00217	5b		 pop	 ebx

; 1815 : }

  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c3		 ret	 0
$LN20@deflate_st:

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  0021c	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0021f	85 c0		 test	 eax, eax
  00221	74 1e		 je	 SHORT $LN21@deflate_st
  00223	83 f8 04	 cmp	 eax, 4
  00226	74 19		 je	 SHORT $LN21@deflate_st
  00228	8b 06		 mov	 eax, DWORD PTR [esi]
  0022a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0022e	75 11		 jne	 SHORT $LN21@deflate_st
  00230	3b 4e 5c	 cmp	 ecx, DWORD PTR [esi+92]
  00233	75 0c		 jne	 SHORT $LN21@deflate_st

; 1770 :         return block_done;

  00235	5f		 pop	 edi
  00236	5e		 pop	 esi
  00237	b8 01 00 00 00	 mov	 eax, 1
  0023c	5b		 pop	 ebx

; 1815 : }

  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c3		 ret	 0
$LN21@deflate_st:

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  00241	8b 5e 3c	 mov	 ebx, DWORD PTR [esi+60]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00244	8b 06		 mov	 eax, DWORD PTR [esi]
  00246	2b d9		 sub	 ebx, ecx
  00248	4b		 dec	 ebx
  00249	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0024c	76 39		 jbe	 SHORT $LN22@deflate_st
  0024e	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00251	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00254	3b c8		 cmp	 ecx, eax
  00256	7c 2f		 jl	 SHORT $LN22@deflate_st

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;
; 1777 :         s->strstart -= s->w_size;

  00258	29 46 6c	 sub	 DWORD PTR [esi+108], eax
  0025b	2b c8		 sub	 ecx, eax

; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0025d	ff 76 6c	 push	 DWORD PTR [esi+108]
  00260	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00263	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00266	03 c1		 add	 eax, ecx
  00268	50		 push	 eax
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 _memcpy

; 1779 :         if (s->matches < 2)

  0026f	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  00275	83 c4 0c	 add	 esp, 12			; 0000000cH
  00278	83 f8 02	 cmp	 eax, 2
  0027b	73 07		 jae	 SHORT $LN23@deflate_st

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  0027d	40		 inc	 eax
  0027e	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN23@deflate_st:

; 1781 :         have += s->w_size;          /* more space now */

  00284	03 5e 2c	 add	 ebx, DWORD PTR [esi+44]
$LN22@deflate_st:

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  00287	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00289	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  0028c	0f 47 59 04	 cmova	 ebx, DWORD PTR [ecx+4]

; 1784 :         have = s->strm->avail_in;
; 1785 :     if (have) {

  00290	85 db		 test	 ebx, ebx
  00292	74 12		 je	 SHORT $LN25@deflate_st

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  00294	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00297	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  0029a	53		 push	 ebx
  0029b	e8 00 00 00 00	 call	 _read_buf
  002a0	83 c4 04	 add	 esp, 4

; 1787 :         s->strstart += have;

  002a3	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
$LN25@deflate_st:

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  002a6	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002a9	39 86 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], eax
  002af	73 06		 jae	 SHORT $LN26@deflate_st

; 1790 :         s->high_water = s->strstart;

  002b1	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
$LN26@deflate_st:

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  002b7	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  002bd	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  002c0	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1800 :     min_block = MIN(have, s->w_size);
; 1801 :     left = s->strstart - s->block_start;

  002c3	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  002c6	c1 f8 03	 sar	 eax, 3
  002c9	2b d8		 sub	 ebx, eax
  002cb	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  002d0	3b d8		 cmp	 ebx, eax
  002d2	0f 47 d8	 cmova	 ebx, eax
  002d5	3b 5e 2c	 cmp	 ebx, DWORD PTR [esi+44]
  002d8	8b cb		 mov	 ecx, ebx
  002da	0f 47 4e 2c	 cmova	 ecx, DWORD PTR [esi+44]
  002de	2b 56 5c	 sub	 edx, DWORD PTR [esi+92]

; 1802 :     if (left >= min_block ||

  002e1	3b d1		 cmp	 edx, ecx
  002e3	73 1c		 jae	 SHORT $LN28@deflate_st
  002e5	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  002e8	85 d2		 test	 edx, edx
  002ea	75 05		 jne	 SHORT $LN29@deflate_st
  002ec	83 f8 04	 cmp	 eax, 4
  002ef	75 54		 jne	 SHORT $LN27@deflate_st
$LN29@deflate_st:
  002f1	85 c0		 test	 eax, eax
  002f3	74 50		 je	 SHORT $LN27@deflate_st
  002f5	8b 06		 mov	 eax, DWORD PTR [esi]
  002f7	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  002fb	75 48		 jne	 SHORT $LN27@deflate_st
  002fd	3b d3		 cmp	 edx, ebx
  002ff	77 44		 ja	 SHORT $LN27@deflate_st
$LN28@deflate_st:

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  00301	3b d3		 cmp	 edx, ebx
  00303	8b ca		 mov	 ecx, edx
  00305	0f 47 cb	 cmova	 ecx, ebx

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00308	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0030c	89 4d 08	 mov	 DWORD PTR _len$4$[ebp], ecx
  0030f	75 13		 jne	 SHORT $LN41@deflate_st
  00311	8b 06		 mov	 eax, DWORD PTR [esi]
  00313	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00317	75 0b		 jne	 SHORT $LN41@deflate_st
  00319	3b ca		 cmp	 ecx, edx
  0031b	75 07		 jne	 SHORT $LN41@deflate_st
  0031d	bf 01 00 00 00	 mov	 edi, 1
  00322	eb 02		 jmp	 SHORT $LN42@deflate_st
$LN41@deflate_st:
  00324	33 ff		 xor	 edi, edi
$LN42@deflate_st:

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00326	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00329	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  0032c	57		 push	 edi
  0032d	51		 push	 ecx
  0032e	8b ce		 mov	 ecx, esi
  00330	e8 00 00 00 00	 call	 __tr_stored_block

; 1809 :         s->block_start += len;

  00335	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00338	83 c4 08	 add	 esp, 8

; 1810 :         flush_pending(s->strm);

  0033b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0033d	01 46 5c	 add	 DWORD PTR [esi+92], eax
  00340	e8 00 00 00 00	 call	 _flush_pending
$LN27@deflate_st:

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  00345	f7 df		 neg	 edi
  00347	1b ff		 sbb	 edi, edi
  00349	83 e7 02	 and	 edi, 2
  0034c	8b c7		 mov	 eax, edi
  0034e	5f		 pop	 edi
  0034f	5e		 pop	 esi
  00350	5b		 pop	 ebx

; 1815 : }

  00351	8b e5		 mov	 esp, ebp
  00353	5d		 pop	 ebp
  00354	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
_bflush$1$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@deflate_fa:

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_fa

; 1838 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 39 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 38 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 6b		 jb	 SHORT $LN12@deflate_fa

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00046	8b 5e 48	 mov	 ebx, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0004f	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00054	23 d7		 and	 edx, edi
  00056	d3 e3		 shl	 ebx, cl
  00058	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005b	33 d8		 xor	 ebx, eax
  0005d	23 5e 54	 and	 ebx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00066	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0006a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0006e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0007a	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007e	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00081	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  00085	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00089	85 ff		 test	 edi, edi
  0008b	74 1e		 je	 SHORT $LN12@deflate_fa
  0008d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00090	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00093	2b cf		 sub	 ecx, edi
  00095	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  0009a	3b c8		 cmp	 ecx, eax
  0009c	77 0d		 ja	 SHORT $LN12@deflate_fa

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  0009e	57		 push	 edi
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 _longest_match
  000a5	83 c4 08	 add	 esp, 8
  000a8	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000ab	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000af	0f 82 1e 01 00
	00		 jb	 $LN13@deflate_fa

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000b5	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000b9	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000bd	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000c3	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000c6	0f b7 f8	 movzx	 edi, ax
  000c9	80 ea 03	 sub	 dl, 3
  000cc	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000d2	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  000d6	81 c7 ff ff 00
	00		 add	 edi, 65535		; 0000ffffH
  000dc	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000e2	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000e8	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000eb	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  000f1	0f b6 c2	 movzx	 eax, dl
  000f4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  000fb	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00103	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00108	66 3b f8	 cmp	 di, ax
  0010b	0f b7 c7	 movzx	 eax, di
  0010e	73 08		 jae	 SHORT $LN24@deflate_fa
  00110	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00116	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00118	c1 e8 07	 shr	 eax, 7
  0011b	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  00121	0f b6 c0	 movzx	 eax, al
  00124	33 db		 xor	 ebx, ebx
  00126	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0012e	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00134	48		 dec	 eax
  00135	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;

  0013b	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0013e	0f 94 c3	 sete	 bl
  00141	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00144	89 5d 08	 mov	 DWORD PTR _bflush$1$[ebp], ebx

; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  00147	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  0014d	77 5b		 ja	 SHORT $LN15@deflate_fa
  0014f	83 7e 74 03	 cmp	 DWORD PTR [esi+116], 3
  00153	72 55		 jb	 SHORT $LN15@deflate_fa

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  00155	48		 dec	 eax
  00156	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@deflate_fa:

; 1879 :                 do {
; 1880 :                     s->strstart++;

  00160	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00163	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  00166	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00169	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0016c	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016f	23 d7		 and	 edx, edi
  00171	0f b6 5c 07 02	 movzx	 ebx, BYTE PTR [edi+eax+2]
  00176	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00179	d3 e0		 shl	 eax, cl
  0017b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0017e	33 d8		 xor	 ebx, eax
  00180	23 5e 54	 and	 ebx, DWORD PTR [esi+84]
  00183	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00186	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00189	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0018d	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00191	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00194	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00197	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0019b	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  0019f	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  001a3	75 bb		 jne	 SHORT $LL7@deflate_fa

; 1886 :                 s->strstart++;
; 1887 :             } else

  001a5	8b 5d 08	 mov	 ebx, DWORD PTR _bflush$1$[ebp]
  001a8	eb 79		 jmp	 SHORT $LN44@deflate_fa
$LN15@deflate_fa:

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  001aa	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 1891 :                 s->match_length = 0;
; 1892 :                 s->ins_h = s->window[s->strstart];

  001ad	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001b0	03 46 6c	 add	 eax, DWORD PTR [esi+108]

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  001b3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001b6	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001bd	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  001c0	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001c3	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  001c7	d3 e2		 shl	 edx, cl
  001c9	33 d0		 xor	 edx, eax
  001cb	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001ce	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  001d1	eb 53		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001d3	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  001d6	33 ff		 xor	 edi, edi
  001d8	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001db	33 db		 xor	 ebx, ebx
  001dd	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001e0	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  001e6	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001ec	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  001f0	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001f6	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  001fc	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001ff	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00205	0f b6 c2	 movzx	 eax, dl
  00208	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00210	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00216	48		 dec	 eax
  00217	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  0021d	0f 94 c3	 sete	 bl

; 1905 :             s->lookahead--;

  00220	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN44@deflate_fa:

; 1906 :             s->strstart++;

  00223	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN14@deflate_fa:
  00226	85 db		 test	 ebx, ebx

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00228	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0022b	0f 84 df fd ff
	ff		 je	 $LL2@deflate_fa
  00231	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00234	85 c9		 test	 ecx, ecx
  00236	78 07		 js	 SHORT $LN26@deflate_fa
  00238	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0023b	03 d1		 add	 edx, ecx
  0023d	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  0023f	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  00241	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00244	2b c1		 sub	 eax, ecx
  00246	8b ce		 mov	 ecx, esi
  00248	6a 00		 push	 0
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 __tr_flush_block
  00250	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00253	83 c4 08	 add	 esp, 8
  00256	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00258	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0025b	e8 00 00 00 00	 call	 _flush_pending
  00260	8b 06		 mov	 eax, DWORD PTR [esi]
  00262	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00266	0f 85 a4 fd ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	33 c0		 xor	 eax, eax
  00270	5b		 pop	 ebx

; 1918 : }

  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
$LN38@deflate_fa:

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00273	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00276	b8 02 00 00 00	 mov	 eax, 2
  0027b	3b c8		 cmp	 ecx, eax
  0027d	0f 42 c1	 cmovb	 eax, ecx
  00280	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1911 :     if (flush == Z_FINISH) {

  00286	83 fb 04	 cmp	 ebx, 4
  00289	75 3e		 jne	 SHORT $LN19@deflate_fa

; 1912 :         FLUSH_BLOCK(s, 1);

  0028b	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0028e	85 c0		 test	 eax, eax
  00290	78 07		 js	 SHORT $LN30@deflate_fa
  00292	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00295	03 d0		 add	 edx, eax
  00297	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  00299	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  0029b	2b c8		 sub	 ecx, eax
  0029d	6a 01		 push	 1
  0029f	51		 push	 ecx
  002a0	8b ce		 mov	 ecx, esi
  002a2	e8 00 00 00 00	 call	 __tr_flush_block
  002a7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002aa	83 c4 08	 add	 esp, 8
  002ad	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002af	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002b2	e8 00 00 00 00	 call	 _flush_pending
  002b7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b9	33 c0		 xor	 eax, eax
  002bb	5f		 pop	 edi
  002bc	5e		 pop	 esi
  002bd	5b		 pop	 ebx
  002be	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002c1	0f 95 c0	 setne	 al
  002c4	83 c0 02	 add	 eax, 2

; 1918 : }

  002c7	5d		 pop	 ebp
  002c8	c3		 ret	 0
$LN19@deflate_fa:

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  002c9	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  002d0	74 38		 je	 SHORT $LN22@deflate_fa

; 1916 :         FLUSH_BLOCK(s, 0);

  002d2	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002d5	85 c0		 test	 eax, eax
  002d7	78 07		 js	 SHORT $LN32@deflate_fa
  002d9	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002dc	03 d0		 add	 edx, eax
  002de	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  002e0	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  002e2	2b c8		 sub	 ecx, eax
  002e4	6a 00		 push	 0
  002e6	51		 push	 ecx
  002e7	8b ce		 mov	 ecx, esi
  002e9	e8 00 00 00 00	 call	 __tr_flush_block
  002ee	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002f1	83 c4 08	 add	 esp, 8
  002f4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002f6	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002f9	e8 00 00 00 00	 call	 _flush_pending
  002fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00300	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00304	0f 84 62 ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:
  0030a	5f		 pop	 edi
  0030b	5e		 pop	 esi

; 1917 :     return block_done;

  0030c	b8 01 00 00 00	 mov	 eax, 1
  00311	5b		 pop	 ebx

; 1918 : }

  00312	5d		 pop	 ebp
  00313	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1001 = -8						; size = 4
tv995 = -4						; size = 4
_max_insert$1$ = 8					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000e	57		 push	 edi
  0000f	90		 npad	 1
$LL2@deflate_sl:

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_sl

; 1941 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_sl
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 34 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 e5 02 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  0003b	33 ff		 xor	 edi, edi

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  0003d	83 f8 03	 cmp	 eax, 3
  00040	72 4c		 jb	 SHORT $LN11@deflate_sl

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00042	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00045	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00048	8b 5e 48	 mov	 ebx, DWORD PTR [esi+72]
  0004b	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004e	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00051	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00056	23 d7		 and	 edx, edi
  00058	d3 e3		 shl	 ebx, cl
  0005a	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005d	33 d8		 xor	 ebx, eax
  0005f	23 5e 54	 and	 ebx, DWORD PTR [esi+84]
  00062	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00065	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  00068	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0006c	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0006f	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00073	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00076	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00079	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007c	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0007f	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  00083	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00086	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0008a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
$LN11@deflate_sl:

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  0008e	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00091	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00094	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00097	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1959 :         s->match_length = MIN_MATCH-1;

  0009a	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000a1	85 ff		 test	 edi, edi
  000a3	74 50		 je	 SHORT $LN13@deflate_sl
  000a5	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000a8	3b 86 80 00 00
	00		 cmp	 eax, DWORD PTR [esi+128]
  000ae	73 45		 jae	 SHORT $LN13@deflate_sl
  000b0	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  000b3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b6	2b cf		 sub	 ecx, edi
  000b8	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000bd	3b c8		 cmp	 ecx, eax
  000bf	77 34		 ja	 SHORT $LN13@deflate_sl

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  000c1	57		 push	 edi
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 _longest_match
  000c8	83 c4 08	 add	 esp, 8
  000cb	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000ce	83 f8 05	 cmp	 eax, 5
  000d1	77 22		 ja	 SHORT $LN13@deflate_sl
  000d3	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000da	74 12		 je	 SHORT $LN14@deflate_sl
  000dc	83 f8 03	 cmp	 eax, 3
  000df	75 14		 jne	 SHORT $LN13@deflate_sl
  000e1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000e4	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ec	76 07		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  000ee	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
$LN13@deflate_sl:

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f5	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000f8	83 f8 03	 cmp	 eax, 3
  000fb	0f 82 6f 01 00
	00		 jb	 $LN15@deflate_sl
  00101	39 46 60	 cmp	 DWORD PTR [esi+96], eax
  00104	0f 87 66 01 00
	00		 ja	 $LN15@deflate_sl

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  0010a	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0010d	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00110	83 c1 fd	 add	 ecx, -3			; fffffffdH

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  00113	8a 56 78	 mov	 dl, BYTE PTR [esi+120]
  00116	03 c1		 add	 eax, ecx
  00118	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0011e	80 ea 03	 sub	 dl, 3
  00121	89 45 08	 mov	 DWORD PTR _max_insert$1$[ebp], eax
  00124	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  00128	66 2b 46 64	 sub	 ax, WORD PTR [esi+100]
  0012c	66 48		 dec	 ax
  0012e	0f b7 f8	 movzx	 edi, ax
  00131	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00137	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  0013b	81 c7 ff ff 00
	00		 add	 edi, 65535		; 0000ffffH
  00141	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00147	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0014d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00150	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00156	0f b6 c2	 movzx	 eax, dl
  00159	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00160	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00168	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0016d	66 3b f8	 cmp	 di, ax
  00170	0f b7 c7	 movzx	 eax, di
  00173	73 08		 jae	 SHORT $LN30@deflate_sl
  00175	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  0017b	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  0017d	c1 e8 07	 shr	 eax, 7
  00180	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  00186	0f b6 c0	 movzx	 eax, al
  00189	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  00191	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  00197	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  0019a	48		 dec	 eax
  0019b	89 45 f8	 mov	 DWORD PTR tv1001[ebp], eax
  0019e	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001a4	89 45 fc	 mov	 DWORD PTR tv995[ebp], eax
  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	2b c1		 sub	 eax, ecx
  001ae	01 46 74	 add	 DWORD PTR [esi+116], eax

; 2001 :             s->prev_length -= 2;

  001b1	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001b4	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001b7	8b 45 08	 mov	 eax, DWORD PTR _max_insert$1$[ebp]
  001ba	66 0f 1f 44 00
	00		 npad	 6
$LL7@deflate_sl:

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  001c0	ff 46 6c	 inc	 DWORD PTR [esi+108]
  001c3	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001c6	3b d8		 cmp	 ebx, eax
  001c8	77 3c		 ja	 SHORT $LN5@deflate_sl

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  001ca	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001cd	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001d0	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001d3	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001d6	0f b6 44 18 02	 movzx	 eax, BYTE PTR [eax+ebx+2]
  001db	d3 e7		 shl	 edi, cl
  001dd	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001e0	33 f8		 xor	 edi, eax
  001e2	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001e5	23 d3		 and	 edx, ebx
  001e7	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001ea	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  001ed	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  001f1	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001f5	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001f8	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001fb	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001ff	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00203	8b 45 08	 mov	 eax, DWORD PTR _max_insert$1$[ebp]
$LN5@deflate_sl:

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  00206	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  0020a	75 b4		 jne	 SHORT $LL7@deflate_sl

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;

  0020c	ff 46 6c	 inc	 DWORD PTR [esi+108]
  0020f	8b 45 fc	 mov	 eax, DWORD PTR tv995[ebp]
  00212	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  00215	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00218	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0021f	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00226	3b 45 f8	 cmp	 eax, DWORD PTR tv1001[ebp]
  00229	0f 85 e1 fd ff
	ff		 jne	 $LL2@deflate_sl
  0022f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00232	85 c0		 test	 eax, eax
  00234	78 07		 js	 SHORT $LN32@deflate_sl
  00236	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00239	03 d0		 add	 edx, eax
  0023b	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  0023d	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  0023f	2b c8		 sub	 ecx, eax
  00241	6a 00		 push	 0
  00243	51		 push	 ecx
  00244	8b ce		 mov	 ecx, esi
  00246	e8 00 00 00 00	 call	 __tr_flush_block
  0024b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0024e	83 c4 08	 add	 esp, 8
  00251	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00253	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00256	e8 00 00 00 00	 call	 _flush_pending
  0025b	8b 06		 mov	 eax, DWORD PTR [esi]
  0025d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00261	0f 85 a9 fd ff
	ff		 jne	 $LL2@deflate_sl
$LN48@deflate_sl:
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi

; 2022 :             }
; 2023 :             s->strstart++;
; 2024 :             s->lookahead--;
; 2025 :             if (s->strm->avail_out == 0) return need_more;

  00269	33 c0		 xor	 eax, eax
  0026b	5b		 pop	 ebx

; 2049 : }

  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
$LN15@deflate_sl:

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00270	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00274	0f 84 94 00 00
	00		 je	 $LN20@deflate_sl

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  0027a	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0027d	33 ff		 xor	 edi, edi
  0027f	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00282	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00286	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0028c	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  00292	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00296	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0029c	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  002a2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002a5	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002ab	0f b6 c2	 movzx	 eax, dl
  002ae	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002b6	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  002bc	48		 dec	 eax
  002bd	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2020 :             if (bflush) {

  002c3	75 2f		 jne	 SHORT $LN22@deflate_sl

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  002c5	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002c8	85 c9		 test	 ecx, ecx
  002ca	78 07		 js	 SHORT $LN34@deflate_sl
  002cc	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002cf	03 d1		 add	 edx, ecx
  002d1	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  002d3	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  002d5	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002d8	2b c1		 sub	 eax, ecx
  002da	8b ce		 mov	 ecx, esi
  002dc	6a 00		 push	 0
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 __tr_flush_block
  002e4	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002e7	83 c4 08	 add	 esp, 8
  002ea	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ec	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002ef	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 2022 :             }
; 2023 :             s->strstart++;
; 2024 :             s->lookahead--;
; 2025 :             if (s->strm->avail_out == 0) return need_more;

  002f4	8b 06		 mov	 eax, DWORD PTR [esi]
  002f6	ff 46 6c	 inc	 DWORD PTR [esi+108]
  002f9	ff 4e 74	 dec	 DWORD PTR [esi+116]
  002fc	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  002ff	0f 85 0b fd ff
	ff		 jne	 $LL2@deflate_sl
  00305	5f		 pop	 edi
  00306	5e		 pop	 esi
  00307	33 c0		 xor	 eax, eax
  00309	5b		 pop	 ebx

; 2049 : }

  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c3		 ret	 0
$LN20@deflate_sl:

; 2026 :         } else {
; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  0030e	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 2032 :             s->lookahead--;

  00311	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00314	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 2033 :         }
; 2034 :     }

  0031b	e9 f0 fc ff ff	 jmp	 $LL2@deflate_sl
$LN46@deflate_sl:

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  00320	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00324	74 3f		 je	 SHORT $LN24@deflate_sl

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00326	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00329	33 ff		 xor	 edi, edi
  0032b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0032e	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00332	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00338	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0033e	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00342	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00348	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0034e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00351	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00357	0f b6 c2	 movzx	 eax, dl
  0035a	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2039 :         s->match_available = 0;

  00362	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$LN24@deflate_sl:

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00365	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00368	b8 02 00 00 00	 mov	 eax, 2
  0036d	3b c8		 cmp	 ecx, eax
  0036f	0f 42 c1	 cmovb	 eax, ecx
  00372	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 2042 :     if (flush == Z_FINISH) {

  00378	83 fb 04	 cmp	 ebx, 4
  0037b	75 40		 jne	 SHORT $LN25@deflate_sl

; 2043 :         FLUSH_BLOCK(s, 1);

  0037d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00380	85 c0		 test	 eax, eax
  00382	78 07		 js	 SHORT $LN38@deflate_sl
  00384	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00387	03 d0		 add	 edx, eax
  00389	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  0038b	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  0038d	2b c8		 sub	 ecx, eax
  0038f	6a 01		 push	 1
  00391	51		 push	 ecx
  00392	8b ce		 mov	 ecx, esi
  00394	e8 00 00 00 00	 call	 __tr_flush_block
  00399	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0039c	83 c4 08	 add	 esp, 8
  0039f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003a1	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  003a4	e8 00 00 00 00	 call	 _flush_pending
  003a9	8b 06		 mov	 eax, DWORD PTR [esi]
  003ab	33 c9		 xor	 ecx, ecx
  003ad	5f		 pop	 edi
  003ae	5e		 pop	 esi
  003af	5b		 pop	 ebx
  003b0	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  003b3	0f 95 c1	 setne	 cl
  003b6	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 2049 : }

  003b9	8b e5		 mov	 esp, ebp
  003bb	5d		 pop	 ebp
  003bc	c3		 ret	 0
$LN25@deflate_sl:

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  003bd	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  003c4	74 38		 je	 SHORT $LN28@deflate_sl

; 2047 :         FLUSH_BLOCK(s, 0);

  003c6	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003c9	85 c0		 test	 eax, eax
  003cb	78 07		 js	 SHORT $LN40@deflate_sl
  003cd	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003d0	03 d0		 add	 edx, eax
  003d2	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  003d4	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  003d6	2b c8		 sub	 ecx, eax
  003d8	6a 00		 push	 0
  003da	51		 push	 ecx
  003db	8b ce		 mov	 ecx, esi
  003dd	e8 00 00 00 00	 call	 __tr_flush_block
  003e2	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  003e5	83 c4 08	 add	 esp, 8
  003e8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003ea	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  003ed	e8 00 00 00 00	 call	 _flush_pending
  003f2	8b 06		 mov	 eax, DWORD PTR [esi]
  003f4	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003f8	0f 84 69 fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:
  003fe	5f		 pop	 edi
  003ff	5e		 pop	 esi

; 2048 :     return block_done;

  00400	b8 01 00 00 00	 mov	 eax, 1
  00405	5b		 pop	 ebx

; 2049 : }

  00406	8b e5		 mov	 esp, ebp
  00408	5d		 pop	 ebp
  00409	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b da		 mov	 ebx, edx
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx
  0000e	66 90		 npad	 2
$LL2@deflate_rl:

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00010	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00013	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  00019	77 22		 ja	 SHORT $LN10@deflate_rl

; 2071 :             fill_window(s);

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 _fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00022	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00025	81 ff 02 01 00
	00		 cmp	 edi, 258		; 00000102H
  0002b	77 08		 ja	 SHORT $LN9@deflate_rl
  0002d	85 db		 test	 ebx, ebx
  0002f	0f 84 b6 01 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00035	85 ff		 test	 edi, edi
  00037	0f 84 b7 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  0003d	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00044	83 ff 03	 cmp	 edi, 3
  00047	0f 82 95 00 00
	00		 jb	 $LN14@deflate_rl
  0004d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00050	85 c9		 test	 ecx, ecx
  00052	0f 84 8a 00 00
	00		 je	 $LN14@deflate_rl

; 2081 :             scan = s->window + s->strstart - 1;

  00058	8b 5e 38	 mov	 ebx, DWORD PTR [esi+56]
  0005b	03 d9		 add	 ebx, ecx

; 2082 :             prev = *scan;
; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0005d	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  00060	0f b6 53 ff	 movzx	 edx, BYTE PTR [ebx-1]
  00064	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00067	3b d1		 cmp	 edx, ecx
  00069	75 74		 jne	 SHORT $LN44@deflate_rl
  0006b	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0006f	3b d1		 cmp	 edx, ecx
  00071	75 6c		 jne	 SHORT $LN44@deflate_rl
  00073	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00077	83 c0 03	 add	 eax, 3
  0007a	3b d1		 cmp	 edx, ecx
  0007c	75 61		 jne	 SHORT $LN44@deflate_rl

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  0007e	81 c3 02 01 00
	00		 add	 ebx, 258		; 00000102H
$LL7@deflate_rl:

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  00084	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00088	40		 inc	 eax
  00089	3b d1		 cmp	 edx, ecx
  0008b	75 43		 jne	 SHORT $LN13@deflate_rl
  0008d	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00091	40		 inc	 eax
  00092	3b d1		 cmp	 edx, ecx
  00094	75 3a		 jne	 SHORT $LN13@deflate_rl
  00096	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0009a	40		 inc	 eax
  0009b	3b d1		 cmp	 edx, ecx
  0009d	75 31		 jne	 SHORT $LN13@deflate_rl
  0009f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000a3	40		 inc	 eax
  000a4	3b d1		 cmp	 edx, ecx
  000a6	75 28		 jne	 SHORT $LN13@deflate_rl
  000a8	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000ac	40		 inc	 eax
  000ad	3b d1		 cmp	 edx, ecx
  000af	75 1f		 jne	 SHORT $LN13@deflate_rl
  000b1	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000b5	40		 inc	 eax
  000b6	3b d1		 cmp	 edx, ecx
  000b8	75 16		 jne	 SHORT $LN13@deflate_rl
  000ba	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000be	40		 inc	 eax
  000bf	3b d1		 cmp	 edx, ecx
  000c1	75 0d		 jne	 SHORT $LN13@deflate_rl
  000c3	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  000c7	40		 inc	 eax
  000c8	3b d1		 cmp	 edx, ecx
  000ca	75 04		 jne	 SHORT $LN13@deflate_rl
  000cc	3b c3		 cmp	 eax, ebx
  000ce	72 b4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000d0	2b c3		 sub	 eax, ebx
  000d2	05 02 01 00 00	 add	 eax, 258		; 00000102H

; 2092 :                 if (s->match_length > s->lookahead)

  000d7	3b c7		 cmp	 eax, edi
  000d9	0f 47 c7	 cmova	 eax, edi
  000dc	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN44@deflate_rl:
  000df	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
$LN14@deflate_rl:

; 2093 :                     s->match_length = s->lookahead;
; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  000e2	83 7e 60 03	 cmp	 DWORD PTR [esi+96], 3
  000e6	72 6d		 jb	 SHORT $LN15@deflate_rl

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000e8	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000ee	bf 01 00 00 00	 mov	 edi, 1
  000f3	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  000f9	8a 56 60	 mov	 dl, BYTE PTR [esi+96]
  000fc	80 ea 03	 sub	 dl, 3
  000ff	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00103	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00109	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0010f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00112	33 c9		 xor	 ecx, ecx
  00114	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0011a	0f b6 c2	 movzx	 eax, dl
  0011d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00124	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  0012c	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  00133	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00139	48		 dec	 eax
  0013a	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;

  00140	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00143	0f 94 c1	 sete	 cl

; 2105 :             s->strstart += s->match_length;
; 2106 :             s->match_length = 0;

  00146	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0014d	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00150	01 46 6c	 add	 DWORD PTR [esi+108], eax

; 2107 :         } else {

  00153	eb 53		 jmp	 SHORT $LN16@deflate_rl
$LN15@deflate_rl:

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00155	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00158	33 ff		 xor	 edi, edi
  0015a	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0015d	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00160	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00166	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0016c	66 89 3c 48	 mov	 WORD PTR [eax+ecx*2], di
  00170	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00176	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0017c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0017f	33 c9		 xor	 ecx, ecx
  00181	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00187	0f b6 c2	 movzx	 eax, dl
  0018a	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00192	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00198	48		 dec	 eax
  00199	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax
  0019f	0f 94 c1	 sete	 cl

; 2111 :             s->lookahead--;

  001a2	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2112 :             s->strstart++;

  001a5	ff 46 6c	 inc	 DWORD PTR [esi+108]
$LN16@deflate_rl:
  001a8	85 c9		 test	 ecx, ecx

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  001aa	0f 84 60 fe ff
	ff		 je	 $LL2@deflate_rl
  001b0	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  001b3	85 c9		 test	 ecx, ecx
  001b5	78 07		 js	 SHORT $LN26@deflate_rl
  001b7	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001ba	03 d1		 add	 edx, ecx
  001bc	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001be	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001c0	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001c3	2b c1		 sub	 eax, ecx
  001c5	8b ce		 mov	 ecx, esi
  001c7	6a 00		 push	 0
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 __tr_flush_block
  001cf	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001d2	83 c4 08	 add	 esp, 8
  001d5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d7	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001da	e8 00 00 00 00	 call	 _flush_pending
  001df	8b 06		 mov	 eax, DWORD PTR [esi]
  001e1	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001e5	0f 85 25 fe ff
	ff		 jne	 $LL2@deflate_rl
$LN37@deflate_rl:
  001eb	5f		 pop	 edi
  001ec	5e		 pop	 esi
  001ed	33 c0		 xor	 eax, eax
  001ef	5b		 pop	 ebx

; 2124 : }

  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c3		 ret	 0
$LN36@deflate_rl:

; 2115 :     }
; 2116 :     s->insert = 0;

  001f4	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2117 :     if (flush == Z_FINISH) {

  001fe	83 fb 04	 cmp	 ebx, 4
  00201	75 43		 jne	 SHORT $LN19@deflate_rl

; 2118 :         FLUSH_BLOCK(s, 1);

  00203	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00206	85 c9		 test	 ecx, ecx
  00208	78 07		 js	 SHORT $LN28@deflate_rl
  0020a	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0020d	03 d1		 add	 edx, ecx
  0020f	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  00211	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  00213	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00216	2b c1		 sub	 eax, ecx
  00218	8b ce		 mov	 ecx, esi
  0021a	6a 01		 push	 1
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 __tr_flush_block
  00222	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00225	83 c4 08	 add	 esp, 8
  00228	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0022a	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0022d	e8 00 00 00 00	 call	 _flush_pending
  00232	8b 06		 mov	 eax, DWORD PTR [esi]
  00234	33 c9		 xor	 ecx, ecx
  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0023c	0f 95 c1	 setne	 cl
  0023f	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 2124 : }

  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c3		 ret	 0
$LN19@deflate_rl:

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  00246	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0024d	74 3b		 je	 SHORT $LN22@deflate_rl

; 2122 :         FLUSH_BLOCK(s, 0);

  0024f	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00252	85 c9		 test	 ecx, ecx
  00254	78 07		 js	 SHORT $LN30@deflate_rl
  00256	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00259	03 d1		 add	 edx, ecx
  0025b	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  0025d	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  0025f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00262	2b c1		 sub	 eax, ecx
  00264	8b ce		 mov	 ecx, esi
  00266	6a 00		 push	 0
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 __tr_flush_block
  0026e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00271	83 c4 08	 add	 esp, 8
  00274	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00276	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00279	e8 00 00 00 00	 call	 _flush_pending
  0027e	8b 06		 mov	 eax, DWORD PTR [esi]
  00280	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00284	0f 84 61 ff ff
	ff		 je	 $LN37@deflate_rl
$LN22@deflate_rl:
  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi

; 2123 :     return block_done;

  0028c	b8 01 00 00 00	 mov	 eax, 1
  00291	5b		 pop	 ebx

; 2124 : }

  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2133 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00007	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000b	75 11		 jne	 SHORT $LN6@deflate_hu

; 2139 :             fill_window(s);

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 _fill_window

; 2140 :             if (s->lookahead == 0) {

  00014	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00018	0f 84 97 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2142 :                     return need_more;
; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0001e	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00021	33 db		 xor	 ebx, ebx
  00023	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00026	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002d	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00030	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00036	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  0003c	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx
  00040	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00046	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0004c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0004f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00055	0f b6 c2	 movzx	 eax, dl
  00058	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00060	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]

; 2151 :         s->lookahead--;
; 2152 :         s->strstart++;

  00066	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00069	48		 dec	 eax
  0006a	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0006d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00070	39 86 a0 16 00
	00		 cmp	 DWORD PTR [esi+5792], eax

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  00076	75 8f		 jne	 SHORT $LL2@deflate_hu
  00078	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007b	85 c0		 test	 eax, eax
  0007d	78 07		 js	 SHORT $LN15@deflate_hu
  0007f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00082	03 d0		 add	 edx, eax
  00084	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  00086	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  00088	2b c8		 sub	 ecx, eax
  0008a	6a 00		 push	 0
  0008c	51		 push	 ecx
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 __tr_flush_block
  00094	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00097	83 c4 08	 add	 esp, 8
  0009a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0009f	e8 00 00 00 00	 call	 _flush_pending
  000a4	8b 06		 mov	 eax, DWORD PTR [esi]
  000a6	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
  000a9	0f 85 58 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	33 c0		 xor	 eax, eax
  000b3	5b		 pop	 ebx

; 2163 : }

  000b4	c3		 ret	 0
$LN23@deflate_hu:

; 2141 :                 if (flush == Z_NO_FLUSH)

  000b5	85 ff		 test	 edi, edi
  000b7	74 f6		 je	 SHORT $LN24@deflate_hu

; 2154 :     }
; 2155 :     s->insert = 0;

  000b9	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2156 :     if (flush == Z_FINISH) {

  000c3	83 ff 04	 cmp	 edi, 4
  000c6	75 40		 jne	 SHORT $LN10@deflate_hu

; 2157 :         FLUSH_BLOCK(s, 1);

  000c8	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000cb	85 c9		 test	 ecx, ecx
  000cd	78 07		 js	 SHORT $LN17@deflate_hu
  000cf	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000d2	03 d1		 add	 edx, ecx
  000d4	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000d6	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000d8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000db	2b c1		 sub	 eax, ecx
  000dd	8b ce		 mov	 ecx, esi
  000df	6a 01		 push	 1
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 __tr_flush_block
  000e7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ea	83 c4 08	 add	 esp, 8
  000ed	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ef	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000f2	e8 00 00 00 00	 call	 _flush_pending
  000f7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f9	33 c0		 xor	 eax, eax
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00101	0f 95 c0	 setne	 al
  00104	83 c0 02	 add	 eax, 2

; 2163 : }

  00107	c3		 ret	 0
$LN10@deflate_hu:

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00108	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0010f	74 3b		 je	 SHORT $LN13@deflate_hu

; 2161 :         FLUSH_BLOCK(s, 0);

  00111	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00114	85 c9		 test	 ecx, ecx
  00116	78 07		 js	 SHORT $LN19@deflate_hu
  00118	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0011b	03 d1		 add	 edx, ecx
  0011d	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  0011f	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  00121	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00124	2b c1		 sub	 eax, ecx
  00126	8b ce		 mov	 ecx, esi
  00128	6a 00		 push	 0
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 __tr_flush_block
  00130	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00133	83 c4 08	 add	 esp, 8
  00136	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00138	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0013b	e8 00 00 00 00	 call	 _flush_pending
  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00146	0f 84 63 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:
  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi

; 2162 :     return block_done;

  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	5b		 pop	 ebx

; 2163 : }

  00154	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END

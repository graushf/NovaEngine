; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
PUBLIC	__tr_align
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_flush_bits
PUBLIC	__tr_stored_block
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_stored_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx

; 869  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  0000b	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00011	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00014	7e 53		 jle	 SHORT $LN2@tr_stored_
  00016	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00019	56		 push	 esi
  0001a	8b 75 0c	 mov	 esi, DWORD PTR _last$[ebp]
  0001d	66 8b c6	 mov	 ax, si
  00020	66 d3 e0	 shl	 ax, cl
  00023	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00026	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  0002d	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  00034	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00037	ff 47 14	 inc	 DWORD PTR [edi+20]
  0003a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0003d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00040	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  00047	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004a	b1 10		 mov	 cl, 16			; 00000010H
  0004c	2a 8f bc 16 00
	00		 sub	 cl, BYTE PTR [edi+5820]
  00052	ff 47 14	 inc	 DWORD PTR [edi+20]
  00055	66 d3 ee	 shr	 si, cl
  00058	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  0005f	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  00066	5e		 pop	 esi
  00067	eb 17		 jmp	 SHORT $LN3@tr_stored_
$LN2@tr_stored_:
  00069	66 8b 45 0c	 mov	 ax, WORD PTR _last$[ebp]
  0006d	66 d3 e0	 shl	 ax, cl
  00070	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00077	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0007a	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
$LN3@tr_stored_:

; 870  :     bi_windup(s);        /* align on byte boundary */

  00080	8b cf		 mov	 ecx, edi
  00082	e8 00 00 00 00	 call	 _bi_windup

; 871  :     put_short(s, (ush)stored_len);

  00087	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0008a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0008d	8b 5d 08	 mov	 ebx, DWORD PTR _stored_len$[ebp]

; 872  :     put_short(s, (ush)~stored_len);
; 873  :     zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);

  00090	53		 push	 ebx
  00091	ff 75 fc	 push	 DWORD PTR _buf$1$[ebp]
  00094	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00097	8b cb		 mov	 ecx, ebx
  00099	ff 47 14	 inc	 DWORD PTR [edi+20]
  0009c	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0009f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a2	c1 e9 08	 shr	 ecx, 8
  000a5	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000a8	8a cb		 mov	 cl, bl
  000aa	ff 47 14	 inc	 DWORD PTR [edi+20]
  000ad	f6 d1		 not	 cl
  000af	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000b2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000b5	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b8	8b cb		 mov	 ecx, ebx
  000ba	ff 47 14	 inc	 DWORD PTR [edi+20]
  000bd	f7 d1		 not	 ecx
  000bf	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000c2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000c5	c1 e9 08	 shr	 ecx, 8
  000c8	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000cb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ce	ff 47 14	 inc	 DWORD PTR [edi+20]
  000d1	03 47 14	 add	 eax, DWORD PTR [edi+20]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _memcpy
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 874  :     s->pending += stored_len;

  000dd	01 5f 14	 add	 DWORD PTR [edi+20], ebx
  000e0	5f		 pop	 edi
  000e1	5b		 pop	 ebx

; 875  : #ifdef ZLIB_DEBUG
; 876  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 877  :     s->compressed_len += (stored_len + 4) << 3;
; 878  :     s->bits_sent += 2*16;
; 879  :     s->bits_sent += stored_len<<3;
; 880  : #endif
; 881  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_bits
_TEXT	SEGMENT
__tr_flush_bits PROC					; COMDAT
; _s$ = ecx

; 889  :     bi_flush(s);

  00000	e9 00 00 00 00	 jmp	 _bi_flush
__tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_max_blindex$1$ = -4					; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_flush_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 917  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 918  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _max_blindex$1$[ebp], 0
  00012	8b da		 mov	 ebx, edx
  00014	89 5d f8	 mov	 DWORD PTR _buf$1$[ebp], ebx

; 919  : 
; 920  :     /* Build the Huffman trees unless a stored block is forced */
; 921  :     if (s->level > 0) {

  00017	83 bf 84 00 00
	00 00		 cmp	 DWORD PTR [edi+132], 0
  0001e	7e 58		 jle	 SHORT $LN2@tr_flush_b

; 922  : 
; 923  :         /* Check if the file is binary or text */
; 924  :         if (s->strm->data_type == Z_UNKNOWN)

  00020	8b 37		 mov	 esi, DWORD PTR [edi]
  00022	83 7e 2c 02	 cmp	 DWORD PTR [esi+44], 2
  00026	75 08		 jne	 SHORT $LN4@tr_flush_b

; 925  :             s->strm->data_type = detect_data_type(s);

  00028	e8 00 00 00 00	 call	 _detect_data_type
  0002d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN4@tr_flush_b:

; 926  : 
; 927  :         /* Construct the literal and distance trees */
; 928  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00030	8d 97 18 0b 00
	00		 lea	 edx, DWORD PTR [edi+2840]
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 _build_tree

; 929  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  : 
; 932  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0003d	8d 97 24 0b 00
	00		 lea	 edx, DWORD PTR [edi+2852]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 _build_tree

; 933  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 934  :                 s->static_len));
; 935  :         /* At this point, opt_len and static_len are the total bit lengths of
; 936  :          * the compressed block data, excluding the tree representations.
; 937  :          */
; 938  : 
; 939  :         /* Build the bit length tree for the above two trees, and get the index
; 940  :          * in bl_order of the last bit length code to send.
; 941  :          */
; 942  :         max_blindex = build_bl_tree(s);

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 _build_bl_tree

; 943  : 
; 944  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 945  :         opt_lenb = (s->opt_len+3+7)>>3;

  00051	8b 8f a8 16 00
	00		 mov	 ecx, DWORD PTR [edi+5800]

; 946  :         static_lenb = (s->static_len+3+7)>>3;

  00057	8b 97 ac 16 00
	00		 mov	 edx, DWORD PTR [edi+5804]
  0005d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00060	83 c2 0a	 add	 edx, 10			; 0000000aH
  00063	c1 e9 03	 shr	 ecx, 3
  00066	c1 ea 03	 shr	 edx, 3
  00069	3b d1		 cmp	 edx, ecx
  0006b	89 45 fc	 mov	 DWORD PTR _max_blindex$1$[ebp], eax
  0006e	8b f2		 mov	 esi, edx
  00070	0f 47 f1	 cmova	 esi, ecx

; 947  : 
; 948  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 949  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 950  :                 s->last_lit));
; 951  : 
; 952  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
; 953  : 
; 954  :     } else {

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  00076	eb 08		 jmp	 SHORT $LN3@tr_flush_b
$LN2@tr_flush_b:

; 955  :         Assert(buf != (char*)0, "lost buf");
; 956  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  0007b	8d 51 05	 lea	 edx, DWORD PTR [ecx+5]
  0007e	8b f2		 mov	 esi, edx
$LN3@tr_flush_b:

; 957  :     }
; 958  : 
; 959  : #ifdef FORCE_STORED
; 960  :     if (buf != (char*)0) { /* force stored block */
; 961  : #else
; 962  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  00080	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00083	3b c6		 cmp	 eax, esi
  00085	77 1b		 ja	 SHORT $LN6@tr_flush_b
  00087	85 db		 test	 ebx, ebx
  00089	74 17		 je	 SHORT $LN6@tr_flush_b

; 963  :                        /* 4: two words for the lengths */
; 964  : #endif
; 965  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 966  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 967  :          * the last block flush, because compression would have been
; 968  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 969  :          * transform a block into a stored block.
; 970  :          */
; 971  :         _tr_stored_block(s, buf, stored_len, last);

  0008b	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00091	53		 push	 ebx
  00092	51		 push	 ecx
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 __tr_stored_block
  0009a	83 c4 08	 add	 esp, 8
  0009d	e9 4a 01 00 00	 jmp	 $LN9@tr_flush_b
$LN6@tr_flush_b:

; 972  : 
; 973  : #ifdef FORCE_STATIC
; 974  :     } else if (static_lenb >= 0) { /* force static trees */
; 975  : #else
; 976  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000a2	83 bf 88 00 00
	00 04		 cmp	 DWORD PTR [edi+136], 4
  000a9	0f 84 b4 00 00
	00		 je	 $LN10@tr_flush_b
  000af	3b d6		 cmp	 edx, esi
  000b1	0f 84 ac 00 00
	00		 je	 $LN10@tr_flush_b

; 980  :                        (const ct_data *)static_dtree);
; 981  : #ifdef ZLIB_DEBUG
; 982  :         s->compressed_len += 3 + s->static_len;
; 983  : #endif
; 984  :     } else {
; 985  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000b7	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  000bd	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  000c0	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000c3	7e 51		 jle	 SHORT $LN13@tr_flush_b
  000c5	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000c8	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  000cb	66 8b c6	 mov	 ax, si
  000ce	66 d3 e0	 shl	 ax, cl
  000d1	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  000d8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000db	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  000e2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000e5	ff 47 14	 inc	 DWORD PTR [edi+20]
  000e8	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000eb	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ee	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  000f5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000f8	b1 10		 mov	 cl, 16			; 00000010H
  000fa	2a 8f bc 16 00
	00		 sub	 cl, BYTE PTR [edi+5820]
  00100	ff 47 14	 inc	 DWORD PTR [edi+20]
  00103	66 d3 ee	 shr	 si, cl
  00106	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  0010d	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  00114	eb 16		 jmp	 SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
  00116	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00119	66 d3 e0	 shl	 ax, cl
  0011c	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00123	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00126	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
$LN14@tr_flush_b:

; 986  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$1$[ebp]
  0012f	8b cf		 mov	 ecx, edi
  00131	8b 97 1c 0b 00
	00		 mov	 edx, DWORD PTR [edi+2844]
  00137	40		 inc	 eax
  00138	50		 push	 eax
  00139	8b 87 28 0b 00
	00		 mov	 eax, DWORD PTR [edi+2856]
  0013f	42		 inc	 edx
  00140	40		 inc	 eax
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _send_all_trees

; 987  :                        max_blindex+1);
; 988  :         compress_block(s, (const ct_data *)s->dyn_ltree,

  00147	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  0014d	8b cf		 mov	 ecx, edi
  0014f	50		 push	 eax
  00150	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
  00156	e8 00 00 00 00	 call	 _compress_block
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	e9 89 00 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 977  : #endif
; 978  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00163	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00169	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  0016c	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0016f	7e 51		 jle	 SHORT $LN11@tr_flush_b
  00171	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00174	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  00177	66 8b c6	 mov	 ax, si
  0017a	66 d3 e0	 shl	 ax, cl
  0017d	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00184	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00187	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  0018e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00191	ff 47 14	 inc	 DWORD PTR [edi+20]
  00194	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00197	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0019a	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  001a1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001a4	b1 10		 mov	 cl, 16			; 00000010H
  001a6	2a 8f bc 16 00
	00		 sub	 cl, BYTE PTR [edi+5820]
  001ac	ff 47 14	 inc	 DWORD PTR [edi+20]
  001af	66 d3 ee	 shr	 si, cl
  001b2	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  001b9	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  001c0	eb 16		 jmp	 SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
  001c2	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  001c5	66 d3 e0	 shl	 ax, cl
  001c8	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  001cf	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  001d2	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
$LN12@tr_flush_b:

; 979  :         compress_block(s, (const ct_data *)static_ltree,

  001d8	68 00 00 00 00	 push	 OFFSET _static_dtree
  001dd	ba 00 00 00 00	 mov	 edx, OFFSET _static_ltree
  001e2	8b cf		 mov	 ecx, edi
  001e4	e8 00 00 00 00	 call	 _compress_block
  001e9	83 c4 04	 add	 esp, 4
$LN9@tr_flush_b:

; 989  :                        (const ct_data *)s->dyn_dtree);
; 990  : #ifdef ZLIB_DEBUG
; 991  :         s->compressed_len += 3 + s->opt_len;
; 992  : #endif
; 993  :     }
; 994  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 995  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 996  :      * and uLong implemented on 32 bits.
; 997  :      */
; 998  :     init_block(s);

  001ec	8b cf		 mov	 ecx, edi
  001ee	e8 00 00 00 00	 call	 _init_block

; 999  : 
; 1000 :     if (last) {

  001f3	85 db		 test	 ebx, ebx
  001f5	74 05		 je	 SHORT $LN15@tr_flush_b

; 1001 :         bi_windup(s);

  001f7	e8 00 00 00 00	 call	 _bi_windup
$LN15@tr_flush_b:
  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	5b		 pop	 ebx

; 1002 : #ifdef ZLIB_DEBUG
; 1003 :         s->compressed_len += 7;  /* align on byte boundary */
; 1004 : #endif
; 1005 :     }
; 1006 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1007 :            s->compressed_len-7*last));
; 1008 : }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
__tr_init PROC						; COMDAT
; _s$ = ecx

; 382  :     tr_static_init();
; 383  : 
; 384  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]

; 385  :     s->l_desc.stat_desc = &static_l_desc;

  00006	c7 81 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2848], OFFSET _static_l_desc
  00010	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 386  : 
; 387  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00016	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  0001c	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 388  :     s->d_desc.stat_desc = &static_d_desc;
; 389  : 
; 390  :     s->bl_desc.dyn_tree = s->bl_tree;

  00022	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00028	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 391  :     s->bl_desc.stat_desc = &static_bl_desc;
; 392  : 
; 393  :     s->bi_buf = 0;

  0002e	33 c0		 xor	 eax, eax
  00030	c7 81 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2860], OFFSET _static_d_desc
  0003a	c7 81 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2872], OFFSET _static_bl_desc
  00044	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 394  :     s->bi_valid = 0;

  0004b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 395  : #ifdef ZLIB_DEBUG
; 396  :     s->compressed_len = 0L;
; 397  :     s->bits_sent = 0L;
; 398  : #endif
; 399  : 
; 400  :     /* Initialize the first block of the first file: */
; 401  :     init_block(s);

  00051	e9 00 00 00 00	 jmp	 _init_block
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
__tr_align PROC						; COMDAT
; _s$ = ecx

; 898  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00003	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00009	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0000c	7e 54		 jle	 SHORT $LN2@tr_align
  0000e	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00011	56		 push	 esi
  00012	be 02 00 00 00	 mov	 esi, 2
  00017	8b c6		 mov	 eax, esi
  00019	66 d3 e0	 shl	 ax, cl
  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00026	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  0002d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00030	ff 47 14	 inc	 DWORD PTR [edi+20]
  00033	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00036	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00039	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	b1 10		 mov	 cl, 16			; 00000010H
  00045	2a 8f bc 16 00
	00		 sub	 cl, BYTE PTR [edi+5820]
  0004b	ff 47 14	 inc	 DWORD PTR [edi+20]
  0004e	66 d3 ee	 shr	 si, cl
  00051	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  00058	66 89 b7 b8 16
	00 00		 mov	 WORD PTR [edi+5816], si
  0005f	5e		 pop	 esi
  00060	eb 18		 jmp	 SHORT $LN3@tr_align
$LN2@tr_align:
  00062	b8 02 00 00 00	 mov	 eax, 2
  00067	66 d3 e0	 shl	 ax, cl
  0006a	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00071	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00074	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
$LN3@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  0007a	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00080	33 c0		 xor	 eax, eax
  00082	66 d3 e0	 shl	 ax, cl
  00085	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  0008c	83 f9 09	 cmp	 ecx, 9
  0008f	7e 49		 jle	 SHORT $LN4@tr_align
  00091	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00094	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00097	0f b6 87 b8 16
	00 00		 movzx	 eax, BYTE PTR [edi+5816]
  0009e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000a1	ff 47 14	 inc	 DWORD PTR [edi+20]
  000a4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a7	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000aa	0f b6 87 b9 16
	00 00		 movzx	 eax, BYTE PTR [edi+5817]
  000b1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000b4	b1 10		 mov	 cl, 16			; 00000010H
  000b6	2a 8f bc 16 00
	00		 sub	 cl, BYTE PTR [edi+5820]
  000bc	33 c0		 xor	 eax, eax
  000be	ff 47 14	 inc	 DWORD PTR [edi+20]
  000c1	66 d3 e8	 shr	 ax, cl

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000c4	8b cf		 mov	 ecx, edi
  000c6	83 87 bc 16 00
	00 f7		 add	 DWORD PTR [edi+5820], -9 ; fffffff7H
  000cd	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  000d4	5f		 pop	 edi
  000d5	e9 00 00 00 00	 jmp	 _bi_flush
$LN4@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  000da	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000dd	8b cf		 mov	 ecx, edi
  000df	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  000e5	5f		 pop	 edi
  000e6	e9 00 00 00 00	 jmp	 _bi_flush
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 234  : #if defined(GEN_TREES_H) || !defined(STDC)
; 235  :     static int static_init_done = 0;
; 236  :     int n;        /* iterates over tree elements */
; 237  :     int bits;     /* bit counter */
; 238  :     int length;   /* length value */
; 239  :     int code;     /* code value */
; 240  :     int dist;     /* distance index */
; 241  :     ush bl_count[MAX_BITS+1];
; 242  :     /* number of codes at each bit length for an optimal tree */
; 243  : 
; 244  :     if (static_init_done) return;
; 245  : 
; 246  :     /* For some embedded targets, global variables are not initialized: */
; 247  : #ifdef NO_INIT_GLOBAL_POINTERS
; 248  :     static_l_desc.static_tree = static_ltree;
; 249  :     static_l_desc.extra_bits = extra_lbits;
; 250  :     static_d_desc.static_tree = static_dtree;
; 251  :     static_d_desc.extra_bits = extra_dbits;
; 252  :     static_bl_desc.extra_bits = extra_blbits;
; 253  : #endif
; 254  : 
; 255  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 256  :     length = 0;
; 257  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 258  :         base_length[code] = length;
; 259  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 260  :             _length_code[length++] = (uch)code;
; 261  :         }
; 262  :     }
; 263  :     Assert (length == 256, "tr_static_init: length != 256");
; 264  :     /* Note that the length 255 (match length 258) can be represented
; 265  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 266  :      * overwrite length_code[255] to use the best encoding:
; 267  :      */
; 268  :     _length_code[length-1] = (uch)code;
; 269  : 
; 270  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 271  :     dist = 0;
; 272  :     for (code = 0 ; code < 16; code++) {
; 273  :         base_dist[code] = dist;
; 274  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 275  :             _dist_code[dist++] = (uch)code;
; 276  :         }
; 277  :     }
; 278  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 279  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 280  :     for ( ; code < D_CODES; code++) {
; 281  :         base_dist[code] = dist << 7;
; 282  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 283  :             _dist_code[256 + dist++] = (uch)code;
; 284  :         }
; 285  :     }
; 286  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 287  : 
; 288  :     /* Construct the codes of the static literal tree */
; 289  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 290  :     n = 0;
; 291  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 292  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 293  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 294  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 295  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 296  :      * tree construction to get a canonical Huffman tree (longest code
; 297  :      * all ones)
; 298  :      */
; 299  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 300  : 
; 301  :     /* The static distance tree is trivial: */
; 302  :     for (n = 0; n < D_CODES; n++) {
; 303  :         static_dtree[n].Len = 5;
; 304  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 305  :     }
; 306  :     static_init_done = 1;
; 307  : 
; 308  : #  ifdef GEN_TREES_H
; 309  :     gen_trees_header();
; 310  : #  endif
; 311  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 312  : }

  00000	c3		 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_init_block PROC					; COMDAT
; _s$ = ecx

; 410  :     int n; /* iterates over tree elements */
; 411  : 
; 412  :     /* Initialize the trees. */
; 413  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000b	56		 push	 esi
  0000c	0f 1f 40 00	 npad	 4
$LL4@init_block:
  00010	33 f6		 xor	 esi, esi
  00012	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00015	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00019	83 ea 01	 sub	 edx, 1
  0001c	75 f2		 jne	 SHORT $LL4@init_block

; 414  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001e	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00024	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@init_block:
  00030	33 f6		 xor	 esi, esi
  00032	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00035	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00039	83 ea 01	 sub	 edx, 1
  0003c	75 f2		 jne	 SHORT $LL7@init_block

; 415  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003e	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00044	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@init_block:
  00050	33 f6		 xor	 esi, esi
  00052	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00055	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00059	83 ea 01	 sub	 edx, 1
  0005c	75 f2		 jne	 SHORT $LL10@init_block

; 416  : 
; 417  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 418  :     s->opt_len = s->static_len = 0L;

  00063	89 b1 ac 16 00
	00		 mov	 DWORD PTR [ecx+5804], esi
  00069	89 b1 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], esi

; 419  :     s->last_lit = s->matches = 0;

  0006f	89 b1 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], esi
  00075	89 b1 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], esi
  0007b	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax
  00082	5e		 pop	 esi

; 420  : }

  00083	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
tv285 = -8						; size = 4
_tree$1$ = -4						; size = 4
_v$1$ = 8						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC					; COMDAT
; _s$ = ecx
; _tree$ = edx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 456  :     int v = s->heap[k];
; 457  :     int j = k << 1;  /* left son of k */
; 458  :     while (j <= s->heap_len) {

  00006	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]
  0000c	53		 push	 ebx
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 55 fc	 mov	 DWORD PTR _tree$1$[ebp], edx
  00015	8b bc 99 5c 0b
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*4+2908]
  0001c	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0001f	89 7d 08	 mov	 DWORD PTR _v$1$[ebp], edi
  00022	3b f0		 cmp	 esi, eax
  00024	0f 8f 91 00 00
	00		 jg	 $LN16@pqdownheap
  0002a	8d 14 ba	 lea	 edx, DWORD PTR [edx+edi*4]
  0002d	89 55 f8	 mov	 DWORD PTR tv285[ebp], edx
$LN19@pqdownheap:

; 459  :         /* Set j to the smallest of the two sons: */
; 460  :         if (j < s->heap_len &&

  00030	7d 42		 jge	 SHORT $LN4@pqdownheap
  00032	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  00039	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  0003c	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  00043	0f b7 04 b8	 movzx	 eax, WORD PTR [eax+edi*4]
  00047	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  0004a	0f b7 14 97	 movzx	 edx, WORD PTR [edi+edx*4]
  0004e	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  00055	66 3b c2	 cmp	 ax, dx
  00058	72 19		 jb	 SHORT $LN5@pqdownheap
  0005a	75 18		 jne	 SHORT $LN4@pqdownheap
  0005c	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  00063	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  0006a	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  00071	77 01		 ja	 SHORT $LN4@pqdownheap
$LN5@pqdownheap:

; 461  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 462  :             j++;

  00073	46		 inc	 esi
$LN4@pqdownheap:

; 463  :         }
; 464  :         /* Exit if v is smaller than both sons */
; 465  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00074	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  0007b	8b 45 f8	 mov	 eax, DWORD PTR tv285[ebp]
  0007e	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  00081	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00084	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  00088	66 3b c7	 cmp	 ax, di
  0008b	72 3c		 jb	 SHORT $LN15@pqdownheap
  0008d	8b 7d 08	 mov	 edi, DWORD PTR _v$1$[ebp]
  00090	75 10		 jne	 SHORT $LN6@pqdownheap
  00092	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  00099	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  000a0	76 19		 jbe	 SHORT $LN16@pqdownheap
$LN6@pqdownheap:

; 466  : 
; 467  :         /* Exchange v with the smallest son */
; 468  :         s->heap[k] = s->heap[j];  k = j;

  000a2	89 94 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edx
  000a9	8b de		 mov	 ebx, esi
  000ab	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]

; 469  : 
; 470  :         /* And continue down the tree, setting j to the left son of k */
; 471  :         j <<= 1;

  000b1	03 f6		 add	 esi, esi
  000b3	3b f0		 cmp	 esi, eax
  000b5	0f 8e 75 ff ff
	ff		 jle	 $LN19@pqdownheap
$LN16@pqdownheap:

; 472  :     }
; 473  :     s->heap[k] = v;

  000bb	89 bc 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edi
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 474  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN15@pqdownheap:

; 472  :     }
; 473  :     s->heap[k] = v;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _v$1$[ebp]
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	89 84 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], eax
  000d5	5b		 pop	 ebx

; 474  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
tv650 = -52						; size = 4
_extra$1$ = -48						; size = 4
_s$1$ = -44						; size = 4
tv659 = -40						; size = 4
tv634 = -40						; size = 4
tv638 = -36						; size = 4
_stree$1$ = -32						; size = 4
_base$1$ = -28						; size = 4
_max_code$1$ = -24					; size = 4
_overflow$1$ = -20					; size = 4
tv653 = -16						; size = 4
_h$1$ = -12						; size = 4
_bits$3$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_gen_bitlen PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 490  :     ct_data *tree        = desc->dyn_tree;
; 491  :     int max_code         = desc->max_code;

  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	89 45 e8	 mov	 DWORD PTR _max_code$1$[ebp], eax

; 492  :     const ct_data *stree = desc->stat_desc->static_tree;

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	53		 push	 ebx
  00013	8b d9		 mov	 ebx, ecx

; 493  :     const intf *extra    = desc->stat_desc->extra_bits;
; 494  :     int base             = desc->stat_desc->extra_base;
; 495  :     int max_length       = desc->stat_desc->max_length;
; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */

  00015	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _overflow$1$[ebp], 0
  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	89 55 e0	 mov	 DWORD PTR _stree$1$[ebp], edx
  00023	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00026	89 55 d0	 mov	 DWORD PTR _extra$1$[ebp], edx
  00029	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002c	56		 push	 esi
  0002d	8b 70 10	 mov	 esi, DWORD PTR [eax+16]

; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00030	0f 11 83 3c 0b
	00 00		 movups	 XMMWORD PTR [ebx+2876], xmm0
  00037	89 55 e4	 mov	 DWORD PTR _base$1$[ebp], edx

; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0003a	33 d2		 xor	 edx, edx
  0003c	0f 11 83 4c 0b
	00 00		 movups	 XMMWORD PTR [ebx+2892], xmm0
  00043	8b 83 54 14 00
	00		 mov	 eax, DWORD PTR [ebx+5204]
  00049	89 5d d4	 mov	 DWORD PTR _s$1$[ebp], ebx
  0004c	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx
  0004f	89 75 f8	 mov	 DWORD PTR _bits$3$[ebp], esi
  00052	8b 84 83 5c 0b
	00 00		 mov	 eax, DWORD PTR [ebx+eax*4+2908]
  00059	66 89 54 81 02	 mov	 WORD PTR [ecx+eax*4+2], dx

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0005e	8b 93 54 14 00
	00		 mov	 edx, DWORD PTR [ebx+5204]
  00064	42		 inc	 edx
  00065	81 fa 3d 02 00
	00		 cmp	 edx, 573		; 0000023dH
  0006b	0f 8d 95 01 00
	00		 jge	 $LN14@gen_bitlen

; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00071	b8 3d 02 00 00	 mov	 eax, 573		; 0000023dH
  00076	8d 8b 5c 0b 00
	00		 lea	 ecx, DWORD PTR [ebx+2908]
  0007c	2b c2		 sub	 eax, edx
  0007e	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00081	03 d0		 add	 edx, eax
  00083	89 45 d8	 mov	 DWORD PTR tv659[ebp], eax
  00086	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00089	89 55 f4	 mov	 DWORD PTR _h$1$[ebp], edx
  0008c	33 d2		 xor	 edx, edx
  0008e	89 4d dc	 mov	 DWORD PTR tv638[ebp], ecx
  00091	57		 push	 edi
$LL7@gen_bitlen:

; 511  :         n = s->heap[h];

  00092	8b 39		 mov	 edi, DWORD PTR [ecx]

; 512  :         bits = tree[tree[n].Dad].Len + 1;

  00094	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0009b	0f b7 44 01 02	 movzx	 eax, WORD PTR [ecx+eax+2]
  000a0	89 4d f0	 mov	 DWORD PTR tv653[ebp], ecx
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  000a6	0f b7 4c 81 02	 movzx	 ecx, WORD PTR [ecx+eax*4+2]
  000ab	41		 inc	 ecx

; 513  :         if (bits > max_length) bits = max_length, overflow++;

  000ac	3b ce		 cmp	 ecx, esi
  000ae	7e 06		 jle	 SHORT $LN18@gen_bitlen
  000b0	42		 inc	 edx
  000b1	8b ce		 mov	 ecx, esi
  000b3	89 55 ec	 mov	 DWORD PTR _overflow$1$[ebp], edx
$LN18@gen_bitlen:

; 514  :         tree[n].Len = (ush)bits;

  000b6	8b 75 f0	 mov	 esi, DWORD PTR tv653[ebp]
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
  000bc	66 89 4c 06 02	 mov	 WORD PTR [esi+eax+2], cx

; 515  :         /* We overwrite tree[n].Dad which is no longer needed */
; 516  : 
; 517  :         if (n > max_code) continue; /* not a leaf node */

  000c1	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  000c4	3b 7d e8	 cmp	 edi, DWORD PTR _max_code$1$[ebp]
  000c7	7f 5b		 jg	 SHORT $LN5@gen_bitlen

; 518  : 
; 519  :         s->bl_count[bits]++;

  000c9	66 ff 84 4b 3c
	0b 00 00	 inc	 WORD PTR [ebx+ecx*2+2876]

; 520  :         xbits = 0;
; 521  :         if (n >= base) xbits = extra[n-base];

  000d1	3b 7d e4	 cmp	 edi, DWORD PTR _base$1$[ebp]
  000d4	7c 0e		 jl	 SHORT $LN50@gen_bitlen
  000d6	8b 75 d0	 mov	 esi, DWORD PTR _extra$1$[ebp]
  000d9	2b 7d e4	 sub	 edi, DWORD PTR _base$1$[ebp]
  000dc	8b 3c be	 mov	 edi, DWORD PTR [esi+edi*4]
  000df	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  000e2	eb 02		 jmp	 SHORT $LN20@gen_bitlen
$LN50@gen_bitlen:
  000e4	33 ff		 xor	 edi, edi
$LN20@gen_bitlen:

; 522  :         f = tree[n].Freq;

  000e6	8b 55 f0	 mov	 edx, DWORD PTR tv653[ebp]
  000e9	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]

; 523  :         s->opt_len += (ulg)f * (unsigned)(bits + xbits);
; 524  :         if (stree) s->static_len += (ulg)f * (unsigned)(stree[n].Len + xbits);

  000ed	8b 55 ec	 mov	 edx, DWORD PTR _overflow$1$[ebp]
  000f0	89 45 cc	 mov	 DWORD PTR tv650[ebp], eax
  000f3	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  000f6	8b 4d cc	 mov	 ecx, DWORD PTR tv650[ebp]
  000f9	0f af c1	 imul	 eax, ecx
  000fc	01 83 a8 16 00
	00		 add	 DWORD PTR [ebx+5800], eax
  00102	83 7d e0 00	 cmp	 DWORD PTR _stree$1$[ebp], 0
  00106	74 19		 je	 SHORT $LN51@gen_bitlen
  00108	8b 75 e0	 mov	 esi, DWORD PTR _stree$1$[ebp]
  0010b	8b 45 f0	 mov	 eax, DWORD PTR tv653[ebp]
  0010e	0f b7 44 30 02	 movzx	 eax, WORD PTR [eax+esi+2]
  00113	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  00116	03 c7		 add	 eax, edi
  00118	0f af c1	 imul	 eax, ecx
  0011b	01 83 ac 16 00
	00		 add	 DWORD PTR [ebx+5804], eax
$LN51@gen_bitlen:
  00121	8b 45 fc	 mov	 eax, DWORD PTR _tree$1$[ebp]
$LN5@gen_bitlen:

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00124	8b 4d dc	 mov	 ecx, DWORD PTR tv638[ebp]
  00127	83 c1 04	 add	 ecx, 4
  0012a	83 6d d8 01	 sub	 DWORD PTR tv659[ebp], 1
  0012e	89 4d dc	 mov	 DWORD PTR tv638[ebp], ecx
  00131	0f 85 5b ff ff
	ff		 jne	 $LL7@gen_bitlen

; 525  :     }
; 526  :     if (overflow == 0) return;

  00137	85 d2		 test	 edx, edx
  00139	0f 84 c6 00 00
	00		 je	 $LN52@gen_bitlen
  0013f	8d 56 ff	 lea	 edx, DWORD PTR [esi-1]
  00142	81 c6 9e 05 00
	00		 add	 esi, 1438		; 0000059eH
  00148	8d 3c 73	 lea	 edi, DWORD PTR [ebx+esi*2]
  0014b	8b 75 ec	 mov	 esi, DWORD PTR _overflow$1$[ebp]
  0014e	89 7d d8	 mov	 DWORD PTR tv634[ebp], edi
$LL10@gen_bitlen:

; 527  : 
; 528  :     Tracev((stderr,"\nbit length overflow\n"));
; 529  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 530  : 
; 531  :     /* Find the first bit length which could increase: */
; 532  :     do {
; 533  :         bits = max_length-1;

  00151	8b ca		 mov	 ecx, edx

; 534  :         while (s->bl_count[bits] == 0) bits--;

  00153	8d 83 3c 0b 00
	00		 lea	 eax, DWORD PTR [ebx+2876]
  00159	66 83 3c 48 00	 cmp	 WORD PTR [eax+ecx*2], 0
  0015e	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00161	75 0a		 jne	 SHORT $LN12@gen_bitlen
$LL11@gen_bitlen:
  00163	8d 40 fe	 lea	 eax, DWORD PTR [eax-2]
  00166	49		 dec	 ecx
  00167	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0016b	74 f6		 je	 SHORT $LL11@gen_bitlen
$LN12@gen_bitlen:

; 535  :         s->bl_count[bits]--;      /* move one leaf down the tree */
; 536  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0016d	66 83 84 4b 3e
	0b 00 00 02	 add	 WORD PTR [ebx+ecx*2+2878], 2
  00176	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0017b	66 01 84 4b 3c
	0b 00 00	 add	 WORD PTR [ebx+ecx*2+2876], ax

; 537  :         s->bl_count[max_length]--;
; 538  :         /* The brother of the overflow item also moves one step up,
; 539  :          * but this does not affect bl_count[max_length]
; 540  :          */
; 541  :         overflow -= 2;

  00183	83 ee 02	 sub	 esi, 2
  00186	66 01 07	 add	 WORD PTR [edi], ax

; 542  :     } while (overflow > 0);

  00189	85 f6		 test	 esi, esi
  0018b	7f c4		 jg	 SHORT $LL10@gen_bitlen

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  0018d	8b 75 f8	 mov	 esi, DWORD PTR _bits$3$[ebp]
  00190	8b 55 f4	 mov	 edx, DWORD PTR _h$1$[ebp]
  00193	85 f6		 test	 esi, esi
  00195	74 6e		 je	 SHORT $LN52@gen_bitlen
$LL15@gen_bitlen:

; 550  :         n = s->bl_count[bits];

  00197	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0019a	85 c0		 test	 eax, eax

; 551  :         while (n != 0) {

  0019c	74 5c		 je	 SHORT $LN13@gen_bitlen

; 550  :         n = s->bl_count[bits];

  0019e	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$1$[ebp]
  001a1	8d ba d7 02 00
	00		 lea	 edi, DWORD PTR [edx+727]
  001a7	8d 3c bb	 lea	 edi, DWORD PTR [ebx+edi*4]
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL16@gen_bitlen:

; 552  :             m = s->heap[--h];

  001b0	8b 5f fc	 mov	 ebx, DWORD PTR [edi-4]
  001b3	8d 7f fc	 lea	 edi, DWORD PTR [edi-4]
  001b6	4a		 dec	 edx
  001b7	89 55 f4	 mov	 DWORD PTR _h$1$[ebp], edx

; 553  :             if (m > max_code) continue;

  001ba	3b d9		 cmp	 ebx, ecx
  001bc	7f 32		 jg	 SHORT $LN36@gen_bitlen

; 554  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001be	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  001c1	0f b7 4c 99 02	 movzx	 ecx, WORD PTR [ecx+ebx*4+2]
  001c6	3b ce		 cmp	 ecx, esi
  001c8	74 22		 je	 SHORT $LN24@gen_bitlen

; 555  :                 Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 556  :                 s->opt_len += ((ulg)bits - tree[m].Len) * tree[m].Freq;

  001ca	8b d6		 mov	 edx, esi
  001cc	2b d1		 sub	 edx, ecx
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  001d1	0f b7 0c 99	 movzx	 ecx, WORD PTR [ecx+ebx*4]
  001d5	0f af d1	 imul	 edx, ecx
  001d8	8b 4d d4	 mov	 ecx, DWORD PTR _s$1$[ebp]
  001db	01 91 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], edx

; 557  :                 tree[m].Len = (ush)bits;

  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  001e4	8b 55 f4	 mov	 edx, DWORD PTR _h$1$[ebp]
  001e7	66 89 74 99 02	 mov	 WORD PTR [ecx+ebx*4+2], si
$LN24@gen_bitlen:

; 558  :             }
; 559  :             n--;

  001ec	8b 4d e8	 mov	 ecx, DWORD PTR _max_code$1$[ebp]
  001ef	48		 dec	 eax
$LN36@gen_bitlen:

; 551  :         while (n != 0) {

  001f0	85 c0		 test	 eax, eax
  001f2	75 bc		 jne	 SHORT $LL16@gen_bitlen
  001f4	8b 5d d4	 mov	 ebx, DWORD PTR _s$1$[ebp]
  001f7	8b 7d d8	 mov	 edi, DWORD PTR tv634[ebp]
$LN13@gen_bitlen:

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  001fa	83 ef 02	 sub	 edi, 2
  001fd	89 7d d8	 mov	 DWORD PTR tv634[ebp], edi
  00200	83 ee 01	 sub	 esi, 1
  00203	75 92		 jne	 SHORT $LL15@gen_bitlen
$LN52@gen_bitlen:
  00205	5f		 pop	 edi
$LN14@gen_bitlen:
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx

; 560  :         }
; 561  :     }
; 562  : }

  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
_tree$1$ = -4						; size = 4
_bl_count$ = 8						; size = 4
_gen_codes PROC						; COMDAT
; _tree$ = ecx
; _max_code$ = edx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx

; 577  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 578  :     unsigned code = 0;         /* running code value */
; 579  :     int bits;                  /* bit index */
; 580  :     int n;                     /* code index */
; 581  : 
; 582  :     /* The distribution counts are first used to generate the code values
; 583  :      * without bit reversal.
; 584  :      */
; 585  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0000d	8b 55 08	 mov	 edx, DWORD PTR _bl_count$[ebp]
  00010	8d 45 de	 lea	 eax, DWORD PTR _next_code$[ebp+2]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	2b d0		 sub	 edx, eax
  0001d	0f 1f 00	 npad	 3
$LL14@gen_codes:
  00020	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]

; 586  :         code = (code + bl_count[bits-1]) << 1;

  00023	0f b7 44 05 dc	 movzx	 eax, WORD PTR _next_code$[ebp+eax]
  00028	03 f8		 add	 edi, eax
  0002a	03 ff		 add	 edi, edi

; 587  :         next_code[bits] = (ush)code;

  0002c	66 89 7c 75 dc	 mov	 WORD PTR _next_code$[ebp+esi*2], di
  00031	46		 inc	 esi
  00032	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00035	7e e9		 jle	 SHORT $LL14@gen_codes

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00037	33 f6		 xor	 esi, esi
  00039	85 db		 test	 ebx, ebx
  0003b	78 2a		 js	 SHORT $LN6@gen_codes
  0003d	0f 1f 00	 npad	 3
$LL7@gen_codes:

; 597  :         int len = tree[n].Len;

  00040	0f b7 54 b1 02	 movzx	 edx, WORD PTR [ecx+esi*4+2]
  00045	85 d2		 test	 edx, edx

; 598  :         if (len == 0) continue;

  00047	74 19		 je	 SHORT $LN5@gen_codes

; 599  :         /* Now reverse the bits */
; 600  :         tree[n].Code = (ush)bi_reverse(next_code[len]++, len);

  00049	0f b7 44 55 dc	 movzx	 eax, WORD PTR _next_code$[ebp+edx*2]
  0004e	8b c8		 mov	 ecx, eax
  00050	40		 inc	 eax
  00051	66 89 44 55 dc	 mov	 WORD PTR _next_code$[ebp+edx*2], ax
  00056	e8 00 00 00 00	 call	 _bi_reverse
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  0005e	66 89 04 b1	 mov	 WORD PTR [ecx+esi*4], ax
$LN5@gen_codes:

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00062	46		 inc	 esi
  00063	3b f3		 cmp	 esi, ebx
  00065	7e d9		 jle	 SHORT $LL7@gen_codes
$LN6@gen_codes:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 601  : 
; 602  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 603  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 604  :     }
; 605  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
tv501 = -16						; size = 4
_stree$1$ = -16						; size = 4
_desc$1$ = -12						; size = 4
_node$2$ = -8						; size = 4
_max_code$1$ = -4					; size = 4
_build_tree PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c2		 mov	 eax, edx

; 619  :     ct_data *tree         = desc->dyn_tree;
; 620  :     const ct_data *stree  = desc->stat_desc->static_tree;
; 621  :     int elems             = desc->stat_desc->elems;
; 622  :     int n, m;          /* iterate over heap elements */
; 623  :     int max_code = -1; /* largest code with non zero frequency */

  00008	83 ca ff	 or	 edx, -1
  0000b	53		 push	 ebx
  0000c	89 45 f4	 mov	 DWORD PTR _desc$1$[ebp], eax
  0000f	56		 push	 esi
  00010	8b 18		 mov	 ebx, DWORD PTR [eax]
  00012	8b f1		 mov	 esi, ecx
  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	57		 push	 edi
  00018	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00020	89 4d f0	 mov	 DWORD PTR _stree$1$[ebp], ecx

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;
; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  00023	33 c9		 xor	 ecx, ecx
  00025	89 7d f8	 mov	 DWORD PTR _node$2$[ebp], edi
  00028	c7 86 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5200], 0
  00032	c7 86 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [esi+5204], 573 ; 0000023dH
  0003c	85 ff		 test	 edi, edi
  0003e	7e 35		 jle	 SHORT $LN22@build_tree
$LL4@build_tree:

; 633  :         if (tree[n].Freq != 0) {

  00040	66 83 3c 8b 00	 cmp	 WORD PTR [ebx+ecx*4], 0
  00045	74 1f		 je	 SHORT $LN13@build_tree

; 634  :             s->heap[++(s->heap_len)] = max_code = n;

  00047	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  0004d	8b d1		 mov	 edx, ecx
  0004f	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00055	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 635  :             s->depth[n] = 0;

  0005c	c6 84 31 58 14
	00 00 00	 mov	 BYTE PTR [ecx+esi+5208], 0

; 636  :         } else {

  00064	eb 07		 jmp	 SHORT $LN2@build_tree
$LN13@build_tree:

; 637  :             tree[n].Len = 0;

  00066	33 c0		 xor	 eax, eax
  00068	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
$LN2@build_tree:

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;
; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  0006d	41		 inc	 ecx
  0006e	3b cf		 cmp	 ecx, edi
  00070	7c ce		 jl	 SHORT $LL4@build_tree
  00072	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN22@build_tree:

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  00075	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  0007c	7d 54		 jge	 SHORT $LN6@build_tree
  0007e	bf 01 00 00 00	 mov	 edi, 1
$LL5@build_tree:

; 647  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  00083	83 fa 02	 cmp	 edx, 2
  00086	7d 05		 jge	 SHORT $LN17@build_tree
  00088	42		 inc	 edx
  00089	8b ca		 mov	 ecx, edx
  0008b	eb 02		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  0008d	33 c9		 xor	 ecx, ecx
$LN18@build_tree:
  0008f	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  00095	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  0009b	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 648  :         tree[node].Freq = 1;
; 649  :         s->depth[node] = 0;
; 650  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000a5	66 89 3c 8b	 mov	 WORD PTR [ebx+ecx*4], di
  000a9	c6 84 0e 58 14
	00 00 00	 mov	 BYTE PTR [esi+ecx+5208], 0
  000b1	ff 8e a8 16 00
	00		 dec	 DWORD PTR [esi+5800]
  000b7	85 c0		 test	 eax, eax
  000b9	74 0b		 je	 SHORT $LN15@build_tree
  000bb	0f b7 44 88 02	 movzx	 eax, WORD PTR [eax+ecx*4+2]
  000c0	29 86 ac 16 00
	00		 sub	 DWORD PTR [esi+5804], eax
$LN15@build_tree:

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  000c6	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  000cd	7c b4		 jl	 SHORT $LL5@build_tree
  000cf	89 55 fc	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN6@build_tree:

; 651  :         /* node is 0 or 1 so it does not have extra bits */
; 652  :     }
; 653  :     desc->max_code = max_code;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _desc$1$[ebp]
  000d5	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  : 
; 655  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 656  :      * establish sub-heaps of increasing lengths:
; 657  :      */
; 658  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000d8	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  000de	99		 cdq
  000df	2b c2		 sub	 eax, edx
  000e1	8b f8		 mov	 edi, eax
  000e3	d1 ff		 sar	 edi, 1
  000e5	83 ff 01	 cmp	 edi, 1
  000e8	7c 26		 jl	 SHORT $LL12@build_tree
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL9@build_tree:
  000f0	57		 push	 edi
  000f1	8b d3		 mov	 edx, ebx
  000f3	8b ce		 mov	 ecx, esi
  000f5	e8 00 00 00 00	 call	 _pqdownheap
  000fa	4f		 dec	 edi
  000fb	83 c4 04	 add	 esp, 4
  000fe	83 ff 01	 cmp	 edi, 1
  00101	7d ed		 jge	 SHORT $LL9@build_tree
  00103	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL12@build_tree:

; 659  : 
; 660  :     /* Construct the Huffman tree by repeatedly combining the least two
; 661  :      * frequent nodes.
; 662  :      */
; 663  :     node = elems;              /* next internal node of the tree */
; 664  :     do {
; 665  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00110	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00116	8b d3		 mov	 edx, ebx
  00118	8b be 60 0b 00
	00		 mov	 edi, DWORD PTR [esi+2912]
  0011e	8b ce		 mov	 ecx, esi
  00120	6a 01		 push	 1
  00122	8b 84 86 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+eax*4+2908]
  00129	89 86 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], eax
  0012f	ff 8e 50 14 00
	00		 dec	 DWORD PTR [esi+5200]
  00135	e8 00 00 00 00	 call	 _pqdownheap

; 666  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0013a	8b 8e 60 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2912]
  00140	83 c4 04	 add	 esp, 4

; 667  : 
; 668  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00143	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00149	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]

; 669  :         s->heap[--(s->heap_max)] = m;
; 670  : 
; 671  :         /* Create a new node father of n and m */
; 672  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0014f	8b 55 f8	 mov	 edx, DWORD PTR _node$2$[ebp]
  00152	89 bc 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], edi
  00159	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  0015f	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]
  00165	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx
  0016c	8d 04 8b	 lea	 eax, DWORD PTR [ebx+ecx*4]
  0016f	89 45 f0	 mov	 DWORD PTR tv501[ebp], eax
  00172	66 8b 00	 mov	 ax, WORD PTR [eax]
  00175	66 03 04 bb	 add	 ax, WORD PTR [ebx+edi*4]
  00179	66 89 04 93	 mov	 WORD PTR [ebx+edx*4], ax

; 673  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?

  0017d	8a 84 3e 58 14
	00 00		 mov	 al, BYTE PTR [esi+edi+5208]
  00184	8a 8c 0e 58 14
	00 00		 mov	 cl, BYTE PTR [esi+ecx+5208]
  0018b	3a c1		 cmp	 al, cl
  0018d	0f b6 c0	 movzx	 eax, al
  00190	73 03		 jae	 SHORT $LN20@build_tree
  00192	0f b6 c1	 movzx	 eax, cl
$LN20@build_tree:

; 674  :                                 s->depth[n] : s->depth[m]) + 1);
; 675  :         tree[n].Dad = tree[m].Dad = (ush)node;

  00195	8b 4d f0	 mov	 ecx, DWORD PTR tv501[ebp]
  00198	fe c0		 inc	 al
  0019a	88 84 16 58 14
	00 00		 mov	 BYTE PTR [esi+edx+5208], al
  001a1	0f b7 c2	 movzx	 eax, dx

; 676  : #ifdef DUMP_BL_TREE
; 677  :         if (tree == s->bl_tree) {
; 678  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 679  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 680  :         }
; 681  : #endif
; 682  :         /* and insert the new node in the heap */
; 683  :         s->heap[SMALLEST] = node++;
; 684  :         pqdownheap(s, tree, SMALLEST);

  001a4	6a 01		 push	 1
  001a6	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
  001aa	8b ce		 mov	 ecx, esi
  001ac	66 89 44 bb 02	 mov	 WORD PTR [ebx+edi*4+2], ax
  001b1	89 96 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], edx
  001b7	42		 inc	 edx
  001b8	89 55 f8	 mov	 DWORD PTR _node$2$[ebp], edx
  001bb	8b d3		 mov	 edx, ebx
  001bd	e8 00 00 00 00	 call	 _pqdownheap
  001c2	83 c4 04	 add	 esp, 4

; 685  : 
; 686  :     } while (s->heap_len >= 2);

  001c5	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  001cc	0f 8d 3e ff ff
	ff		 jge	 $LL12@build_tree

; 687  : 
; 688  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001d2	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  001d8	8b be 54 14 00
	00		 mov	 edi, DWORD PTR [esi+5204]
  001de	8b 86 60 0b 00
	00		 mov	 eax, DWORD PTR [esi+2912]

; 689  : 
; 690  :     /* At this point, the fields freq and dad are set. We can now
; 691  :      * generate the bit lengths.
; 692  :      */
; 693  :     gen_bitlen(s, (tree_desc *)desc);

  001e4	8b 55 f4	 mov	 edx, DWORD PTR _desc$1$[ebp]
  001e7	89 84 be 5c 0b
	00 00		 mov	 DWORD PTR [esi+edi*4+2908], eax
  001ee	e8 00 00 00 00	 call	 _gen_bitlen

; 694  : 
; 695  :     /* The field len is now set, we can generate the bit codes */
; 696  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  001f3	8b 55 fc	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  001f6	81 c6 3c 0b 00
	00		 add	 esi, 2876		; 00000b3cH
  001fc	56		 push	 esi
  001fd	8b cb		 mov	 ecx, ebx
  001ff	e8 00 00 00 00	 call	 _gen_codes
  00204	83 c4 04	 add	 esp, 4
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx

; 697  : }

  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
tv346 = -20						; size = 4
tv347 = -16						; size = 4
tv348 = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv338 = -4						; size = 4
tv350 = 8						; size = 4
_max_code$ = 8						; size = 4
_scan_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00006	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fa		 mov	 edi, edx
  0000e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1
  00015	33 f6		 xor	 esi, esi
  00017	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  0001c	0f b7 5f 02	 movzx	 ebx, WORD PTR [edi+2]
  00020	66 89 54 87 06	 mov	 WORD PTR [edi+eax*4+6], dx
  00025	85 db		 test	 ebx, ebx
  00027	b8 07 00 00 00	 mov	 eax, 7
  0002c	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  00031	0f 45 d0	 cmovne	 edx, eax
  00034	33 c0		 xor	 eax, eax
  00036	85 db		 test	 ebx, ebx
  00038	0f 95 c0	 setne	 al
  0003b	83 c0 03	 add	 eax, 3

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  0003e	39 75 08	 cmp	 DWORD PTR _max_code$[ebp], esi
  00041	0f 8c 9e 00 00
	00		 jl	 $LN3@scan_tree

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */

  00047	83 c7 06	 add	 edi, 6
  0004a	89 7d fc	 mov	 DWORD PTR tv338[ebp], edi
  0004d	8b 7d 08	 mov	 edi, DWORD PTR _max_code$[ebp]
  00050	47		 inc	 edi
  00051	89 7d 08	 mov	 DWORD PTR tv350[ebp], edi
$LL4@scan_tree:

; 720  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00054	89 5d ec	 mov	 DWORD PTR tv346[ebp], ebx
  00057	8b fb		 mov	 edi, ebx
  00059	89 5d f0	 mov	 DWORD PTR tv347[ebp], ebx

; 721  :         if (++count < max_count && curlen == nextlen) {

  0005c	46		 inc	 esi
  0005d	89 5d f4	 mov	 DWORD PTR tv348[ebp], ebx
  00060	8b 5d fc	 mov	 ebx, DWORD PTR tv338[ebp]
  00063	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  00066	3b f2		 cmp	 esi, edx
  00068	7d 04		 jge	 SHORT $LN6@scan_tree
  0006a	3b fb		 cmp	 edi, ebx
  0006c	74 69		 je	 SHORT $LN2@scan_tree
$LN6@scan_tree:

; 722  :             continue;
; 723  :         } else if (count < min_count) {

  0006e	3b f0		 cmp	 esi, eax
  00070	7d 0a		 jge	 SHORT $LN8@scan_tree

; 724  :             s->bl_tree[curlen].Freq += count;

  00072	66 01 b4 b9 7c
	0a 00 00	 add	 WORD PTR [ecx+edi*4+2684], si
  0007a	eb 31		 jmp	 SHORT $LN14@scan_tree
$LN8@scan_tree:
  0007c	83 7d f0 00	 cmp	 DWORD PTR tv347[ebp], 0

; 725  :         } else if (curlen != 0) {

  00080	74 16		 je	 SHORT $LN10@scan_tree

; 726  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00082	3b 7d f8	 cmp	 edi, DWORD PTR _prevlen$1$[ebp]
  00085	74 08		 je	 SHORT $LN12@scan_tree
  00087	66 ff 84 b9 7c
	0a 00 00	 inc	 WORD PTR [ecx+edi*4+2684]
$LN12@scan_tree:

; 727  :             s->bl_tree[REP_3_6].Freq++;

  0008f	66 ff 81 bc 0a
	00 00		 inc	 WORD PTR [ecx+2748]
  00096	eb 15		 jmp	 SHORT $LN14@scan_tree
$LN10@scan_tree:

; 728  :         } else if (count <= 10) {

  00098	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0009b	7f 09		 jg	 SHORT $LN13@scan_tree

; 729  :             s->bl_tree[REPZ_3_10].Freq++;

  0009d	66 ff 81 c0 0a
	00 00		 inc	 WORD PTR [ecx+2752]

; 730  :         } else {

  000a4	eb 07		 jmp	 SHORT $LN14@scan_tree
$LN13@scan_tree:

; 731  :             s->bl_tree[REPZ_11_138].Freq++;

  000a6	66 ff 81 c4 0a
	00 00		 inc	 WORD PTR [ecx+2756]
$LN14@scan_tree:

; 732  :         }
; 733  :         count = 0; prevlen = curlen;

  000ad	33 f6		 xor	 esi, esi
  000af	89 7d f8	 mov	 DWORD PTR _prevlen$1$[ebp], edi
  000b2	85 db		 test	 ebx, ebx

; 734  :         if (nextlen == 0) {

  000b4	75 0a		 jne	 SHORT $LN15@scan_tree

; 735  :             max_count = 138, min_count = 3;

  000b6	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  000bb	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  000be	eb 17		 jmp	 SHORT $LN2@scan_tree
$LN15@scan_tree:
  000c0	39 5d ec	 cmp	 DWORD PTR tv346[ebp], ebx

; 736  :         } else if (curlen == nextlen) {

  000c3	75 0a		 jne	 SHORT $LN17@scan_tree

; 737  :             max_count = 6, min_count = 3;

  000c5	ba 06 00 00 00	 mov	 edx, 6
  000ca	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]

; 738  :         } else {

  000cd	eb 08		 jmp	 SHORT $LN2@scan_tree
$LN17@scan_tree:

; 739  :             max_count = 7, min_count = 4;

  000cf	ba 07 00 00 00	 mov	 edx, 7
  000d4	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]
$LN2@scan_tree:

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  000d7	83 45 fc 04	 add	 DWORD PTR tv338[ebp], 4
  000db	83 6d 08 01	 sub	 DWORD PTR tv350[ebp], 1
  000df	0f 85 6f ff ff
	ff		 jne	 $LL4@scan_tree
$LN3@scan_tree:
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 740  :         }
; 741  :     }
; 742  : }

  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
tv1111 = -28						; size = 4
_nextlen$1$ = -24					; size = 4
tv1113 = -20						; size = 4
_len$1$ = -20						; size = 4
_len$1$ = -20						; size = 4
_len$1$ = -20						; size = 4
_len$1$ = -20						; size = 4
tv1114 = -16						; size = 4
_len$1$ = -16						; size = 4
tv1115 = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv1063 = -4						; size = 4
_curlen$1$ = 8						; size = 4
_max_code$ = 8						; size = 4
_send_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b fa		 mov	 edi, edx

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */

  0000b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1
  00012	8b c1		 mov	 eax, ecx

; 755  :     int curlen;                /* length of current code */
; 756  :     int nextlen = tree[0].Len; /* length of next code */
; 757  :     int count = 0;             /* repeat count of the current code */

  00014	33 db		 xor	 ebx, ebx
  00016	b9 07 00 00 00	 mov	 ecx, 7
  0001b	be 8a 00 00 00	 mov	 esi, 138		; 0000008aH
  00020	0f b7 57 02	 movzx	 edx, WORD PTR [edi+2]
  00024	85 d2		 test	 edx, edx
  00026	0f 45 f1	 cmovne	 esi, ecx
  00029	33 c9		 xor	 ecx, ecx
  0002b	85 d2		 test	 edx, edx
  0002d	0f 95 c1	 setne	 cl
  00030	83 c1 03	 add	 ecx, 3

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00033	39 5d 08	 cmp	 DWORD PTR _max_code$[ebp], ebx
  00036	0f 8c cb 04 00
	00		 jl	 $LN3@send_tree

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */

  0003c	83 c7 06	 add	 edi, 6
  0003f	89 7d fc	 mov	 DWORD PTR tv1063[ebp], edi
  00042	8b 7d 08	 mov	 edi, DWORD PTR _max_code$[ebp]
  00045	47		 inc	 edi
  00046	89 7d f4	 mov	 DWORD PTR tv1115[ebp], edi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@send_tree:

; 765  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00050	8b fa		 mov	 edi, edx
  00052	89 55 e4	 mov	 DWORD PTR tv1111[ebp], edx
  00055	89 55 ec	 mov	 DWORD PTR tv1113[ebp], edx

; 766  :         if (++count < max_count && curlen == nextlen) {

  00058	43		 inc	 ebx
  00059	89 55 f0	 mov	 DWORD PTR tv1114[ebp], edx
  0005c	8b 55 fc	 mov	 edx, DWORD PTR tv1063[ebp]
  0005f	89 7d 08	 mov	 DWORD PTR _curlen$1$[ebp], edi
  00062	0f b7 12	 movzx	 edx, WORD PTR [edx]
  00065	89 55 e8	 mov	 DWORD PTR _nextlen$1$[ebp], edx
  00068	3b de		 cmp	 ebx, esi
  0006a	7d 08		 jge	 SHORT $LN9@send_tree
  0006c	3b fa		 cmp	 edi, edx
  0006e	0f 84 85 04 00
	00		 je	 $LN2@send_tree
$LN9@send_tree:

; 767  :             continue;
; 768  :         } else if (count < min_count) {

  00074	3b d9		 cmp	 ebx, ecx
  00076	0f 8d a6 00 00
	00		 jge	 $LN11@send_tree
  0007c	0f 1f 40 00	 npad	 4
$LL7@send_tree:

; 769  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00080	0f b7 b4 b8 7e
	0a 00 00	 movzx	 esi, WORD PTR [eax+edi*4+2686]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00093	2b d6		 sub	 edx, esi
  00095	89 75 f0	 mov	 DWORD PTR _len$1$[ebp], esi
  00098	3b ca		 cmp	 ecx, edx
  0009a	7e 5e		 jle	 SHORT $LN13@send_tree
  0009c	0f b7 bc b8 7c
	0a 00 00	 movzx	 edi, WORD PTR [eax+edi*4+2684]
  000a4	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000a7	66 8b d7	 mov	 dx, di
  000aa	66 d3 e2	 shl	 dx, cl
  000ad	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  000b4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000b7	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  000be	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000c1	ff 40 14	 inc	 DWORD PTR [eax+20]
  000c4	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000c7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ca	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  000d1	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000d4	b1 10		 mov	 cl, 16			; 00000010H
  000d6	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000dc	ff 40 14	 inc	 DWORD PTR [eax+20]
  000df	66 d3 ef	 shr	 di, cl
  000e2	8b 4d f0	 mov	 ecx, DWORD PTR _len$1$[ebp]
  000e5	83 c1 f0	 add	 ecx, -16		; fffffff0H
  000e8	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  000ef	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  000f5	8b 7d 08	 mov	 edi, DWORD PTR _curlen$1$[ebp]
  000f8	eb 1a		 jmp	 SHORT $LN5@send_tree
$LN13@send_tree:
  000fa	66 8b 94 b8 7c
	0a 00 00	 mov	 dx, WORD PTR [eax+edi*4+2684]
  00102	66 d3 e2	 shl	 dx, cl
  00105	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0010c	03 ce		 add	 ecx, esi
  0010e	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN5@send_tree:
  00114	83 eb 01	 sub	 ebx, 1
  00117	0f 85 63 ff ff
	ff		 jne	 $LL7@send_tree

; 770  : 
; 771  :         } else if (curlen != 0) {

  0011d	e9 a7 03 00 00	 jmp	 $LN33@send_tree
$LN11@send_tree:
  00122	83 7d ec 00	 cmp	 DWORD PTR tv1113[ebp], 0
  00126	0f 84 9d 01 00
	00		 je	 $LN15@send_tree

; 772  :             if (curlen != prevlen) {

  0012c	3b 7d f8	 cmp	 edi, DWORD PTR _prevlen$1$[ebp]
  0012f	0f 84 92 00 00
	00		 je	 $LN17@send_tree

; 773  :                 send_code(s, curlen, s->bl_tree); count--;

  00135	0f b7 b4 b8 7e
	0a 00 00	 movzx	 esi, WORD PTR [eax+edi*4+2686]
  0013d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00142	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00148	2b d6		 sub	 edx, esi
  0014a	89 75 ec	 mov	 DWORD PTR _len$1$[ebp], esi
  0014d	3b ca		 cmp	 ecx, edx
  0014f	7e 5b		 jle	 SHORT $LN18@send_tree
  00151	0f b7 bc b8 7c
	0a 00 00	 movzx	 edi, WORD PTR [eax+edi*4+2684]
  00159	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0015c	66 8b d7	 mov	 dx, di
  0015f	66 d3 e2	 shl	 dx, cl
  00162	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00169	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0016c	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00173	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00176	ff 40 14	 inc	 DWORD PTR [eax+20]
  00179	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0017c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017f	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00186	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00189	b1 10		 mov	 cl, 16			; 00000010H
  0018b	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00191	ff 40 14	 inc	 DWORD PTR [eax+20]
  00194	66 d3 ef	 shr	 di, cl
  00197	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0019a	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0019d	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  001a4	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  001aa	eb 1a		 jmp	 SHORT $LN19@send_tree
$LN18@send_tree:
  001ac	66 8b 94 b8 7c
	0a 00 00	 mov	 dx, WORD PTR [eax+edi*4+2684]
  001b4	66 d3 e2	 shl	 dx, cl
  001b7	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  001be	03 ce		 add	 ecx, esi
  001c0	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN19@send_tree:
  001c6	4b		 dec	 ebx
$LN17@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001c7	0f b7 b0 be 0a
	00 00		 movzx	 esi, WORD PTR [eax+2750]
  001ce	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d3	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001d9	2b d6		 sub	 edx, esi
  001db	89 75 ec	 mov	 DWORD PTR _len$1$[ebp], esi
  001de	3b ca		 cmp	 ecx, edx
  001e0	7e 5a		 jle	 SHORT $LN20@send_tree
  001e2	0f b7 b8 bc 0a
	00 00		 movzx	 edi, WORD PTR [eax+2748]
  001e9	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001ec	66 8b d7	 mov	 dx, di
  001ef	66 d3 e2	 shl	 dx, cl
  001f2	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  001f9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001fc	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00203	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00206	ff 40 14	 inc	 DWORD PTR [eax+20]
  00209	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0020c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0020f	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00216	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00219	b1 10		 mov	 cl, 16			; 00000010H
  0021b	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00221	ff 40 14	 inc	 DWORD PTR [eax+20]
  00224	66 d3 ef	 shr	 di, cl
  00227	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0022a	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0022d	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00234	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0023a	eb 19		 jmp	 SHORT $LN21@send_tree
$LN20@send_tree:
  0023c	66 8b 90 bc 0a
	00 00		 mov	 dx, WORD PTR [eax+2748]
  00243	66 d3 e2	 shl	 dx, cl
  00246	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0024d	03 ce		 add	 ecx, esi
  0024f	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN21@send_tree:
  00255	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0025b	83 f9 0e	 cmp	 ecx, 14			; 0000000eH
  0025e	7e 54		 jle	 SHORT $LN22@send_tree
  00260	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00263	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  00266	66 8b d7	 mov	 dx, di
  00269	66 d3 e2	 shl	 dx, cl
  0026c	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00273	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00276	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0027d	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00280	ff 40 14	 inc	 DWORD PTR [eax+20]
  00283	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00286	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00289	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00290	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00293	b1 10		 mov	 cl, 16			; 00000010H
  00295	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0029b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0029e	66 d3 ef	 shr	 di, cl
  002a1	83 80 bc 16 00
	00 f2		 add	 DWORD PTR [eax+5820], -14 ; fffffff2H
  002a8	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  002af	e9 15 02 00 00	 jmp	 $LN33@send_tree
$LN22@send_tree:
  002b4	8d 53 fd	 lea	 edx, DWORD PTR [ebx-3]
  002b7	66 d3 e2	 shl	 dx, cl
  002ba	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002c1	83 c1 02	 add	 ecx, 2
  002c4	e9 fa 01 00 00	 jmp	 $LN46@send_tree
$LN15@send_tree:

; 777  : 
; 778  :         } else if (count <= 10) {
; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002c9	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002cf	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002d4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  002d7	0f 8f f7 00 00
	00		 jg	 $LN24@send_tree
  002dd	0f b7 b0 c2 0a
	00 00		 movzx	 esi, WORD PTR [eax+2754]
  002e4	2b d6		 sub	 edx, esi
  002e6	89 75 ec	 mov	 DWORD PTR _len$1$[ebp], esi
  002e9	3b ca		 cmp	 ecx, edx
  002eb	7e 5a		 jle	 SHORT $LN26@send_tree
  002ed	0f b7 b8 c0 0a
	00 00		 movzx	 edi, WORD PTR [eax+2752]
  002f4	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002f7	66 8b d7	 mov	 dx, di
  002fa	66 d3 e2	 shl	 dx, cl
  002fd	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00304	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00307	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0030e	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00311	ff 40 14	 inc	 DWORD PTR [eax+20]
  00314	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00317	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0031a	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00321	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00324	b1 10		 mov	 cl, 16			; 00000010H
  00326	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0032c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0032f	66 d3 ef	 shr	 di, cl
  00332	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00335	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00338	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  0033f	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  00345	eb 19		 jmp	 SHORT $LN27@send_tree
$LN26@send_tree:
  00347	66 8b 90 c0 0a
	00 00		 mov	 dx, WORD PTR [eax+2752]
  0034e	66 d3 e2	 shl	 dx, cl
  00351	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00358	03 ce		 add	 ecx, esi
  0035a	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN27@send_tree:
  00360	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00366	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00369	7e 54		 jle	 SHORT $LN28@send_tree
  0036b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0036e	8d 7b fd	 lea	 edi, DWORD PTR [ebx-3]
  00371	66 8b d7	 mov	 dx, di
  00374	66 d3 e2	 shl	 dx, cl
  00377	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0037e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00381	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00388	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0038b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0038e	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00391	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00394	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  0039b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0039e	b1 10		 mov	 cl, 16			; 00000010H
  003a0	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  003a6	ff 40 14	 inc	 DWORD PTR [eax+20]
  003a9	66 d3 ef	 shr	 di, cl
  003ac	83 80 bc 16 00
	00 f3		 add	 DWORD PTR [eax+5820], -13 ; fffffff3H
  003b3	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  003ba	e9 0a 01 00 00	 jmp	 $LN33@send_tree
$LN28@send_tree:
  003bf	8d 53 fd	 lea	 edx, DWORD PTR [ebx-3]
  003c2	66 d3 e2	 shl	 dx, cl
  003c5	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003cc	83 c1 03	 add	 ecx, 3

; 780  : 
; 781  :         } else {

  003cf	e9 ef 00 00 00	 jmp	 $LN46@send_tree
$LN24@send_tree:

; 782  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  003d4	0f b7 b0 c6 0a
	00 00		 movzx	 esi, WORD PTR [eax+2758]
  003db	2b d6		 sub	 edx, esi
  003dd	89 75 ec	 mov	 DWORD PTR _len$1$[ebp], esi
  003e0	3b ca		 cmp	 ecx, edx
  003e2	7e 5a		 jle	 SHORT $LN30@send_tree
  003e4	0f b7 b8 c4 0a
	00 00		 movzx	 edi, WORD PTR [eax+2756]
  003eb	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  003ee	66 8b d7	 mov	 dx, di
  003f1	66 d3 e2	 shl	 dx, cl
  003f4	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003fb	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003fe	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00405	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00408	ff 40 14	 inc	 DWORD PTR [eax+20]
  0040b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0040e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00411	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00418	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0041b	b1 10		 mov	 cl, 16			; 00000010H
  0041d	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00423	ff 40 14	 inc	 DWORD PTR [eax+20]
  00426	66 d3 ef	 shr	 di, cl
  00429	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0042c	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0042f	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00436	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0043c	eb 19		 jmp	 SHORT $LN31@send_tree
$LN30@send_tree:
  0043e	66 8b 90 c4 0a
	00 00		 mov	 dx, WORD PTR [eax+2756]
  00445	66 d3 e2	 shl	 dx, cl
  00448	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0044f	03 ce		 add	 ecx, esi
  00451	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN31@send_tree:
  00457	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0045d	83 f9 09	 cmp	 ecx, 9
  00460	7e 51		 jle	 SHORT $LN32@send_tree
  00462	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00465	8d 7b f5	 lea	 edi, DWORD PTR [ebx-11]
  00468	66 8b d7	 mov	 dx, di
  0046b	66 d3 e2	 shl	 dx, cl
  0046e	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00475	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00478	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0047f	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00482	ff 40 14	 inc	 DWORD PTR [eax+20]
  00485	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00488	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0048b	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00492	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00495	b1 10		 mov	 cl, 16			; 00000010H
  00497	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0049d	ff 40 14	 inc	 DWORD PTR [eax+20]
  004a0	66 d3 ef	 shr	 di, cl
  004a3	83 80 bc 16 00
	00 f7		 add	 DWORD PTR [eax+5820], -9 ; fffffff7H
  004aa	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  004b1	eb 16		 jmp	 SHORT $LN33@send_tree
$LN32@send_tree:
  004b3	8d 53 f5	 lea	 edx, DWORD PTR [ebx-11]
  004b6	66 d3 e2	 shl	 dx, cl
  004b9	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  004c0	83 c1 07	 add	 ecx, 7
$LN46@send_tree:
  004c3	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN33@send_tree:
  004c9	8b 55 e8	 mov	 edx, DWORD PTR _nextlen$1$[ebp]

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  004cc	33 db		 xor	 ebx, ebx
  004ce	8b 4d 08	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  004d1	89 4d f8	 mov	 DWORD PTR _prevlen$1$[ebp], ecx
  004d4	85 d2		 test	 edx, edx

; 785  :         if (nextlen == 0) {

  004d6	75 0a		 jne	 SHORT $LN34@send_tree

; 786  :             max_count = 138, min_count = 3;

  004d8	be 8a 00 00 00	 mov	 esi, 138		; 0000008aH
  004dd	8d 4b 03	 lea	 ecx, DWORD PTR [ebx+3]
  004e0	eb 17		 jmp	 SHORT $LN2@send_tree
$LN34@send_tree:
  004e2	39 55 e4	 cmp	 DWORD PTR tv1111[ebp], edx

; 787  :         } else if (curlen == nextlen) {

  004e5	75 0a		 jne	 SHORT $LN36@send_tree

; 788  :             max_count = 6, min_count = 3;

  004e7	be 06 00 00 00	 mov	 esi, 6
  004ec	8d 4e fd	 lea	 ecx, DWORD PTR [esi-3]

; 789  :         } else {

  004ef	eb 08		 jmp	 SHORT $LN2@send_tree
$LN36@send_tree:

; 790  :             max_count = 7, min_count = 4;

  004f1	be 07 00 00 00	 mov	 esi, 7
  004f6	8d 4e fd	 lea	 ecx, DWORD PTR [esi-3]
$LN2@send_tree:

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  004f9	83 45 fc 04	 add	 DWORD PTR tv1063[ebp], 4
  004fd	83 6d f4 01	 sub	 DWORD PTR tv1115[ebp], 1
  00501	0f 85 49 fb ff
	ff		 jne	 $LL4@send_tree
$LN3@send_tree:
  00507	5f		 pop	 edi
  00508	5e		 pop	 esi
  00509	5b		 pop	 ebx

; 791  :         }
; 792  :     }
; 793  : }

  0050a	8b e5		 mov	 esp, ebp
  0050c	5d		 pop	 ebp
  0050d	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_build_bl_tree PROC					; COMDAT
; _s$ = ecx

; 801  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 802  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 803  : 
; 804  :     /* Determine the bit length frequencies for literal and distance trees */
; 805  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00003	ff b6 1c 0b 00
	00		 push	 DWORD PTR [esi+2844]
  00009	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0000f	e8 00 00 00 00	 call	 _scan_tree

; 806  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00014	ff b6 28 0b 00
	00		 push	 DWORD PTR [esi+2856]
  0001a	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00020	e8 00 00 00 00	 call	 _scan_tree
  00025	83 c4 08	 add	 esp, 8

; 807  : 
; 808  :     /* Build the bit length tree: */
; 809  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00028	8d 96 30 0b 00
	00		 lea	 edx, DWORD PTR [esi+2864]
  0002e	e8 00 00 00 00	 call	 _build_tree

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00033	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00040	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  00047	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00050	75 78		 jne	 SHORT $LN8@build_bl_t
  00052	0f b6 88 ff ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-1]
  00059	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00062	75 65		 jne	 SHORT $LN11@build_bl_t
  00064	0f b6 88 fe ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-2]
  0006b	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00074	75 3f		 jne	 SHORT $LN12@build_bl_t
  00076	0f b6 88 fd ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-3]
  0007d	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00086	75 19		 jne	 SHORT $LN13@build_bl_t

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00088	83 e8 04	 sub	 eax, 4
  0008b	83 f8 03	 cmp	 eax, 3
  0008e	7d b0		 jge	 SHORT $LL4@build_bl_t

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  00090	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  00097	03 c8		 add	 ecx, eax
  00099	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  0009f	5e		 pop	 esi

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;
; 827  : }

  000a0	c3		 ret	 0
$LN13@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000a1	83 e8 03	 sub	 eax, 3

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000a4	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000ab	03 c8		 add	 ecx, eax
  000ad	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000b3	5e		 pop	 esi

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;
; 827  : }

  000b4	c3		 ret	 0
$LN12@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000b5	83 e8 02	 sub	 eax, 2

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000b8	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000bf	03 c8		 add	 ecx, eax
  000c1	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000c7	5e		 pop	 esi

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;
; 827  : }

  000c8	c3		 ret	 0
$LN11@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000c9	48		 dec	 eax
$LN8@build_bl_t:

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000ca	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000d1	03 c8		 add	 ecx, eax
  000d3	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000d9	5e		 pop	 esi

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;
; 827  : }

  000da	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_lcodes$1$ = -4						; size = 4
_dcodes$ = 8						; size = 4
_blcodes$ = 12						; size = 4
_send_all_trees PROC					; COMDAT
; _s$ = ecx
; _lcodes$ = edx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	8b c2		 mov	 eax, edx
  0000a	57		 push	 edi
  0000b	89 45 fc	 mov	 DWORD PTR _lcodes$1$[ebp], eax

; 838  :     int rank;                    /* index in bl_order */
; 839  : 
; 840  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 841  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 842  :             "too many codes");
; 843  :     Tracev((stderr, "\nbl counts: "));
; 844  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  0000e	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00014	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00017	7e 54		 jle	 SHORT $LN5@send_all_t
  00019	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001c	8d b8 ff fe ff
	ff		 lea	 edi, DWORD PTR [eax-257]
  00022	66 8b c7	 mov	 ax, di
  00025	66 d3 e0	 shl	 ax, cl
  00028	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0002f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00032	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00039	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0003c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0003f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00042	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00045	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0004c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004f	b1 10		 mov	 cl, 16			; 00000010H
  00051	2a 8e bc 16 00
	00		 sub	 cl, BYTE PTR [esi+5820]
  00057	ff 46 14	 inc	 DWORD PTR [esi+20]
  0005a	66 d3 ef	 shr	 di, cl
  0005d	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  00064	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  0006b	eb 18		 jmp	 SHORT $LN6@send_all_t
$LN5@send_all_t:
  0006d	05 ff fe ff ff	 add	 eax, -257		; fffffeffH
  00072	66 d3 e0	 shl	 ax, cl
  00075	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0007c	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  0007f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
$LN6@send_all_t:

; 845  :     send_bits(s, dcodes-1,   5);

  00085	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  0008b	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  0008e	7e 52		 jle	 SHORT $LN7@send_all_t
  00090	8b 7d 08	 mov	 edi, DWORD PTR _dcodes$[ebp]
  00093	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00096	4f		 dec	 edi
  00097	66 8b c7	 mov	 ax, di
  0009a	66 d3 e0	 shl	 ax, cl
  0009d	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  000a4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a7	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  000ae	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000b1	ff 46 14	 inc	 DWORD PTR [esi+20]
  000b4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ba	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  000c1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000c4	b1 10		 mov	 cl, 16			; 00000010H
  000c6	2a 8e bc 16 00
	00		 sub	 cl, BYTE PTR [esi+5820]
  000cc	ff 46 14	 inc	 DWORD PTR [esi+20]
  000cf	66 d3 ef	 shr	 di, cl
  000d2	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  000d9	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  000e0	eb 17		 jmp	 SHORT $LN8@send_all_t
$LN7@send_all_t:
  000e2	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  000e5	48		 dec	 eax
  000e6	66 d3 e0	 shl	 ax, cl
  000e9	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  000f0	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  000f3	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
$LN8@send_all_t:

; 846  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  000f9	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  000ff	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00102	7e 54		 jle	 SHORT $LN9@send_all_t
  00104	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]
  00107	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0010a	83 c7 fc	 add	 edi, -4			; fffffffcH
  0010d	66 8b c7	 mov	 ax, di
  00110	66 d3 e0	 shl	 ax, cl
  00113	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  0011a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0011d	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  00124	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00127	ff 46 14	 inc	 DWORD PTR [esi+20]
  0012a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0012d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00130	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00137	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0013a	b1 10		 mov	 cl, 16			; 00000010H
  0013c	2a 8e bc 16 00
	00		 sub	 cl, BYTE PTR [esi+5820]
  00142	ff 46 14	 inc	 DWORD PTR [esi+20]
  00145	66 d3 ef	 shr	 di, cl
  00148	83 86 bc 16 00
	00 f4		 add	 DWORD PTR [esi+5820], -12 ; fffffff4H
  0014f	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  00156	eb 19		 jmp	 SHORT $LN10@send_all_t
$LN9@send_all_t:
  00158	8b 45 0c	 mov	 eax, DWORD PTR _blcodes$[ebp]
  0015b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015e	66 d3 e0	 shl	 ax, cl
  00161	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  00168	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0016b	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
$LN10@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00171	33 db		 xor	 ebx, ebx
  00173	39 5d 0c	 cmp	 DWORD PTR _blcodes$[ebp], ebx
  00176	0f 8e 91 00 00
	00		 jle	 $LN3@send_all_t
  0017c	0f 1f 40 00	 npad	 4
$LL4@send_all_t:

; 848  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 849  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00180	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00186	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[ebx]
  0018d	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00190	7e 56		 jle	 SHORT $LN11@send_all_t
  00192	0f b7 bc 86 7e
	0a 00 00	 movzx	 edi, WORD PTR [esi+eax*4+2686]
  0019a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0019d	66 8b c7	 mov	 ax, di
  001a0	66 d3 e0	 shl	 ax, cl
  001a3	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  001aa	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ad	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  001b4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001b7	ff 46 14	 inc	 DWORD PTR [esi+20]
  001ba	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001bd	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c0	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  001c7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001ca	b1 10		 mov	 cl, 16			; 00000010H
  001cc	2a 8e bc 16 00
	00		 sub	 cl, BYTE PTR [esi+5820]
  001d2	ff 46 14	 inc	 DWORD PTR [esi+20]
  001d5	66 d3 ef	 shr	 di, cl
  001d8	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  001df	66 89 be b8 16
	00 00		 mov	 WORD PTR [esi+5816], di
  001e6	eb 1b		 jmp	 SHORT $LN2@send_all_t
$LN11@send_all_t:
  001e8	66 8b 84 86 7e
	0a 00 00	 mov	 ax, WORD PTR [esi+eax*4+2686]
  001f0	66 d3 e0	 shl	 ax, cl
  001f3	66 09 86 b8 16
	00 00		 or	 WORD PTR [esi+5816], ax
  001fa	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  001fd	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
$LN2@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00203	43		 inc	 ebx
  00204	3b 5d 0c	 cmp	 ebx, DWORD PTR _blcodes$[ebp]
  00207	0f 8c 73 ff ff
	ff		 jl	 $LL4@send_all_t
$LN3@send_all_t:

; 850  :     }
; 851  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 852  : 
; 853  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  0020d	8b 45 fc	 mov	 eax, DWORD PTR _lcodes$1$[ebp]
  00210	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00216	48		 dec	 eax
  00217	8b ce		 mov	 ecx, esi
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 _send_tree

; 854  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 855  : 
; 856  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  0021f	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  00222	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00228	48		 dec	 eax
  00229	8b ce		 mov	 ecx, esi
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _send_tree
  00231	83 c4 08	 add	 esp, 8
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx

; 857  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 858  : }

  00237	8b e5		 mov	 esp, ebp
  00239	5d		 pop	 ebp
  0023a	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
_len$1$ = -20						; size = 4
_lx$1$ = -20						; size = 4
_extra$1$ = -16						; size = 4
_lc$1$ = -16						; size = 4
tv899 = -16						; size = 4
_len$1$ = -12						; size = 4
_code$1$ = -12						; size = 4
_len$1$ = -8						; size = 4
_ltree$1$ = -4						; size = 4
_dtree$ = 8						; size = 4
_compress_block PROC					; COMDAT
; _s$ = ecx
; _ltree$ = edx

; 1068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	8b c1		 mov	 eax, ecx

; 1069 :     unsigned dist;      /* distance of matched string */
; 1070 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1071 :     unsigned lx = 0;    /* running index in l_buf */

  0000b	33 d2		 xor	 edx, edx
  0000d	89 5d fc	 mov	 DWORD PTR _ltree$1$[ebp], ebx
  00010	56		 push	 esi
  00011	57		 push	 edi

; 1072 :     unsigned code;      /* the code to send */
; 1073 :     int extra;          /* number of extra bits to send */
; 1074 : 
; 1075 :     if (s->last_lit != 0) do {

  00012	8d 72 10	 lea	 esi, DWORD PTR [edx+16]
  00015	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  0001b	0f 84 b7 00 00
	00		 je	 $LN3@compress_b
  00021	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL4@compress_b:

; 1076 :         dist = s->d_buf[lx];

  00030	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00036	0f b7 1c 51	 movzx	 ebx, WORD PTR [ecx+edx*2]

; 1077 :         lc = s->l_buf[lx++];

  0003a	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00040	0f b6 3c 0a	 movzx	 edi, BYTE PTR [edx+ecx]
  00044	42		 inc	 edx
  00045	89 7d f0	 mov	 DWORD PTR _lc$1$[ebp], edi
  00048	89 55 ec	 mov	 DWORD PTR _lx$1$[ebp], edx

; 1078 :         if (dist == 0) {

  0004b	85 db		 test	 ebx, ebx
  0004d	0f 85 18 01 00
	00		 jne	 $LN6@compress_b

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _ltree$1$[ebp]
  00056	8b d6		 mov	 edx, esi
  00058	0f b7 5c b9 02	 movzx	 ebx, WORD PTR [ecx+edi*4+2]
  0005d	8d 3c b9	 lea	 edi, DWORD PTR [ecx+edi*4]
  00060	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00066	2b d3		 sub	 edx, ebx
  00068	3b ca		 cmp	 ecx, edx
  0006a	0f 8e e1 00 00
	00		 jle	 $LN8@compress_b
  00070	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  00073	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00076	66 8b d7	 mov	 dx, di
  00079	66 d3 e2	 shl	 dx, cl
  0007c	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00083	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00086	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  0008d	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00090	ff 40 14	 inc	 DWORD PTR [eax+20]
  00093	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00096	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00099	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  000a0	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000a3	b1 10		 mov	 cl, 16			; 00000010H
  000a5	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000ab	ff 40 14	 inc	 DWORD PTR [eax+20]
  000ae	66 d3 ef	 shr	 di, cl
  000b1	8d 4b f0	 lea	 ecx, DWORD PTR [ebx-16]
  000b4	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
$LN29@compress_b:

; 1098 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  000bb	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
$LN28@compress_b:
  000c1	be 10 00 00 00	 mov	 esi, 16			; 00000010H
$LN2@compress_b:

; 1099 :             }
; 1100 :         } /* literal or match pair ? */
; 1101 : 
; 1102 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1103 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1104 :                "pendingBuf overflow");
; 1105 : 
; 1106 :     } while (lx < s->last_lit);

  000c6	8b 55 ec	 mov	 edx, DWORD PTR _lx$1$[ebp]
  000c9	3b 90 a0 16 00
	00		 cmp	 edx, DWORD PTR [eax+5792]
  000cf	0f 82 5b ff ff
	ff		 jb	 $LL4@compress_b
  000d5	8b 5d fc	 mov	 ebx, DWORD PTR _ltree$1$[ebp]
$LN3@compress_b:

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  000d8	0f b7 bb 02 04
	00 00		 movzx	 edi, WORD PTR [ebx+1026]
  000df	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000e5	2b f7		 sub	 esi, edi
  000e7	89 7d ec	 mov	 DWORD PTR _len$1$[ebp], edi
  000ea	3b ce		 cmp	 ecx, esi
  000ec	0f 8e eb 02 00
	00		 jle	 $LN20@compress_b
  000f2	0f b7 bb 00 04
	00 00		 movzx	 edi, WORD PTR [ebx+1024]
  000f9	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000fc	66 8b d7	 mov	 dx, di
  000ff	66 d3 e2	 shl	 dx, cl
  00102	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00109	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0010c	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00113	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00116	ff 40 14	 inc	 DWORD PTR [eax+20]
  00119	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0011c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0011f	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00126	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00129	b1 10		 mov	 cl, 16			; 00000010H
  0012b	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00131	ff 40 14	 inc	 DWORD PTR [eax+20]
  00134	66 d3 ef	 shr	 di, cl
  00137	8b 4d ec	 mov	 ecx, DWORD PTR _len$1$[ebp]
  0013a	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00141	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00144	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx

; 1109 : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
$LN8@compress_b:

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  00151	66 8b 17	 mov	 dx, WORD PTR [edi]
  00154	66 d3 e2	 shl	 dx, cl
  00157	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0015e	03 cb		 add	 ecx, ebx
  00160	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx

; 1080 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1081 :         } else {

  00166	e9 5b ff ff ff	 jmp	 $LN2@compress_b
$LN6@compress_b:

; 1082 :             /* Here, lc is the match length - MIN_MATCH */
; 1083 :             code = _length_code[lc];

  0016b	0f b6 8f 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[edi]

; 1084 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00172	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  00175	89 4d f4	 mov	 DWORD PTR _code$1$[ebp], ecx
  00178	0f b7 8c 8a 06
	04 00 00	 movzx	 ecx, WORD PTR [edx+ecx*4+1030]
  00180	8b d6		 mov	 edx, esi
  00182	8b 75 fc	 mov	 esi, DWORD PTR _ltree$1$[ebp]
  00185	89 4d f8	 mov	 DWORD PTR _len$1$[ebp], ecx
  00188	2b 55 f8	 sub	 edx, DWORD PTR _len$1$[ebp]
  0018b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00191	3b ca		 cmp	 ecx, edx
  00193	8b 55 f4	 mov	 edx, DWORD PTR _code$1$[ebp]
  00196	7e 5e		 jle	 SHORT $LN10@compress_b
  00198	0f b7 bc 96 04
	04 00 00	 movzx	 edi, WORD PTR [esi+edx*4+1028]
  001a0	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  001a3	66 8b d7	 mov	 dx, di
  001a6	66 d3 e2	 shl	 dx, cl
  001a9	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  001b0	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001b3	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  001ba	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  001bd	ff 40 14	 inc	 DWORD PTR [eax+20]
  001c0	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001c3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c6	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  001cd	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  001d0	b1 10		 mov	 cl, 16			; 00000010H
  001d2	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  001d8	ff 40 14	 inc	 DWORD PTR [eax+20]
  001db	66 d3 ef	 shr	 di, cl
  001de	8b 4d f8	 mov	 ecx, DWORD PTR _len$1$[ebp]
  001e1	83 c1 f0	 add	 ecx, -16		; fffffff0H
  001e4	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  001eb	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  001f1	8b 7d f0	 mov	 edi, DWORD PTR _lc$1$[ebp]
  001f4	eb 1b		 jmp	 SHORT $LN11@compress_b
$LN10@compress_b:
  001f6	66 8b 94 96 04
	04 00 00	 mov	 dx, WORD PTR [esi+edx*4+1028]
  001fe	66 d3 e2	 shl	 dx, cl
  00201	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00208	03 4d f8	 add	 ecx, DWORD PTR _len$1$[ebp]
  0020b	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN11@compress_b:

; 1085 :             extra = extra_lbits[code];

  00211	8b 4d f4	 mov	 ecx, DWORD PTR _code$1$[ebp]
  00214	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR _extra_lbits[ecx*4]
  0021b	89 75 f0	 mov	 DWORD PTR _extra$1$[ebp], esi

; 1086 :             if (extra != 0) {

  0021e	85 f6		 test	 esi, esi
  00220	74 7d		 je	 SHORT $LN14@compress_b

; 1087 :                 lc -= base_length[code];

  00222	2b 3c 8d 00 00
	00 00		 sub	 edi, DWORD PTR _base_length[ecx*4]

; 1088 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  00229	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0022e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00234	2b d6		 sub	 edx, esi
  00236	3b ca		 cmp	 ecx, edx
  00238	7e 53		 jle	 SHORT $LN13@compress_b
  0023a	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0023d	66 8b d7	 mov	 dx, di
  00240	66 d3 e2	 shl	 dx, cl
  00243	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0024a	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0024d	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00254	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00257	ff 40 14	 inc	 DWORD PTR [eax+20]
  0025a	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0025d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00260	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00267	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0026a	b1 10		 mov	 cl, 16			; 00000010H
  0026c	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00272	ff 40 14	 inc	 DWORD PTR [eax+20]
  00275	66 d3 ef	 shr	 di, cl
  00278	8b 4d f0	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  0027b	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0027e	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00285	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0028b	eb 12		 jmp	 SHORT $LN14@compress_b
$LN13@compress_b:
  0028d	66 d3 e7	 shl	 di, cl
  00290	66 09 b8 b8 16
	00 00		 or	 WORD PTR [eax+5816], di
  00297	03 ce		 add	 ecx, esi
  00299	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN14@compress_b:

; 1089 :             }
; 1090 :             dist--; /* dist is now the match distance - 1 */

  0029f	4b		 dec	 ebx

; 1091 :             code = d_code(dist);

  002a0	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  002a6	73 08		 jae	 SHORT $LN23@compress_b
  002a8	8a 8b 00 00 00
	00		 mov	 cl, BYTE PTR __dist_code[ebx]
  002ae	eb 0b		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  002b0	8b cb		 mov	 ecx, ebx
  002b2	c1 e9 07	 shr	 ecx, 7
  002b5	8a 89 00 01 00
	00		 mov	 cl, BYTE PTR __dist_code[ecx+256]
$LN24@compress_b:

; 1092 :             Assert (code < D_CODES, "bad d_code");
; 1093 : 
; 1094 :             send_code(s, code, dtree);       /* send the distance code */

  002bb	8b 7d 08	 mov	 edi, DWORD PTR _dtree$[ebp]
  002be	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002c3	0f b6 f1	 movzx	 esi, cl
  002c6	c1 e6 02	 shl	 esi, 2
  002c9	89 75 f0	 mov	 DWORD PTR tv899[ebp], esi
  002cc	0f b7 4c 37 02	 movzx	 ecx, WORD PTR [edi+esi+2]
  002d1	89 4d f4	 mov	 DWORD PTR _len$1$[ebp], ecx
  002d4	2b 55 f4	 sub	 edx, DWORD PTR _len$1$[ebp]
  002d7	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002dd	3b ca		 cmp	 ecx, edx
  002df	7e 5a		 jle	 SHORT $LN15@compress_b
  002e1	0f b7 3c 37	 movzx	 edi, WORD PTR [edi+esi]
  002e5	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  002e8	66 8b d7	 mov	 dx, di
  002eb	66 d3 e2	 shl	 dx, cl
  002ee	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  002f5	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  002f8	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  002ff	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00302	ff 40 14	 inc	 DWORD PTR [eax+20]
  00305	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00308	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0030b	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  00312	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00315	b1 10		 mov	 cl, 16			; 00000010H
  00317	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0031d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00320	8b 75 f0	 mov	 esi, DWORD PTR tv899[ebp]
  00323	66 d3 ef	 shr	 di, cl
  00326	8b 4d f4	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00329	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0032c	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00333	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  00339	eb 17		 jmp	 SHORT $LN16@compress_b
$LN15@compress_b:
  0033b	66 8b 14 37	 mov	 dx, WORD PTR [edi+esi]
  0033f	66 d3 e2	 shl	 dx, cl
  00342	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00349	03 4d f4	 add	 ecx, DWORD PTR _len$1$[ebp]
  0034c	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN16@compress_b:

; 1095 :             extra = extra_dbits[code];

  00352	8b be 00 00 00
	00		 mov	 edi, DWORD PTR _extra_dbits[esi]

; 1096 :             if (extra != 0) {

  00358	85 ff		 test	 edi, edi
  0035a	0f 84 61 fd ff
	ff		 je	 $LN28@compress_b

; 1097 :                 dist -= (unsigned)base_dist[code];

  00360	2b 9e 00 00 00
	00		 sub	 ebx, DWORD PTR _base_dist[esi]

; 1098 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00366	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0036b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00371	8b d6		 mov	 edx, esi
  00373	2b d7		 sub	 edx, edi
  00375	3b ca		 cmp	 ecx, edx
  00377	7e 4d		 jle	 SHORT $LN18@compress_b
  00379	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0037c	66 8b d3	 mov	 dx, bx
  0037f	66 d3 e2	 shl	 dx, cl
  00382	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  00389	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0038c	0f b6 88 b8 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5816]
  00393	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00396	ff 40 14	 inc	 DWORD PTR [eax+20]
  00399	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0039c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0039f	0f b6 88 b9 16
	00 00		 movzx	 ecx, BYTE PTR [eax+5817]
  003a6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003a9	b1 10		 mov	 cl, 16			; 00000010H
  003ab	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  003b1	ff 40 14	 inc	 DWORD PTR [eax+20]
  003b4	66 d3 eb	 shr	 bx, cl
  003b7	8d 4f f0	 lea	 ecx, DWORD PTR [edi-16]
  003ba	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  003c1	e9 f5 fc ff ff	 jmp	 $LN29@compress_b
$LN18@compress_b:
  003c6	66 d3 e3	 shl	 bx, cl
  003c9	66 09 98 b8 16
	00 00		 or	 WORD PTR [eax+5816], bx
  003d0	03 cf		 add	 ecx, edi
  003d2	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003d8	e9 e9 fc ff ff	 jmp	 $LN2@compress_b
$LN20@compress_b:

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  003dd	66 8b 93 00 04
	00 00		 mov	 dx, WORD PTR [ebx+1024]
  003e4	66 d3 e2	 shl	 dx, cl
  003e7	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  003ee	03 cf		 add	 ecx, edi
  003f0	5f		 pop	 edi
  003f1	5e		 pop	 esi
  003f2	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003f8	5b		 pop	 ebx

; 1109 : }

  003f9	8b e5		 mov	 esp, ebp
  003fb	5d		 pop	 ebp
  003fc	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_detect_data_type PROC					; COMDAT
; _s$ = ecx

; 1126 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1127 :     /* black_mask is the bit mask of black-listed bytes
; 1128 :      * set bits 0..6, 14..25, and 28..31
; 1129 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1130 :      */
; 1131 :     unsigned long black_mask = 0xf3ffc07fUL;

  00004	b8 7f c0 ff f3	 mov	 eax, -201342849		; f3ffc07fH

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00009	33 f6		 xor	 esi, esi
  0000b	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
$LL4@detect_dat:

; 1136 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00011	a8 01		 test	 al, 1
  00013	74 06		 je	 SHORT $LN2@detect_dat
  00015	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00019	75 47		 jne	 SHORT $LN15@detect_dat
$LN2@detect_dat:

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001b	46		 inc	 esi
  0001c	d1 e8		 shr	 eax, 1
  0001e	83 c2 04	 add	 edx, 4
  00021	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00024	7e eb		 jle	 SHORT $LL4@detect_dat

; 1137 :             return Z_BINARY;
; 1138 : 
; 1139 :     /* Check for textual ("white-listed") bytes. */
; 1140 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1141 :             || s->dyn_ltree[13].Freq != 0)

  00026	66 83 bf b8 00
	00 00 00	 cmp	 WORD PTR [edi+184], 0
  0002e	75 37		 jne	 SHORT $LN10@detect_dat
  00030	66 83 bf bc 00
	00 00 00	 cmp	 WORD PTR [edi+188], 0
  00038	75 2d		 jne	 SHORT $LN10@detect_dat
  0003a	66 83 bf c8 00
	00 00 00	 cmp	 WORD PTR [edi+200], 0
  00042	75 23		 jne	 SHORT $LN10@detect_dat

; 1143 :     for (n = 32; n < LITERALS; n++)

  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8d 87 14 01 00
	00		 lea	 eax, DWORD PTR [edi+276]
  0004f	90		 npad	 1
$LL7@detect_dat:

; 1144 :         if (s->dyn_ltree[n].Freq != 0)

  00050	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00054	75 11		 jne	 SHORT $LN10@detect_dat

; 1143 :     for (n = 32; n < LITERALS; n++)

  00056	41		 inc	 ecx
  00057	83 c0 04	 add	 eax, 4
  0005a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00060	7c ee		 jl	 SHORT $LL7@detect_dat
$LN15@detect_dat:
  00062	5f		 pop	 edi

; 1145 :             return Z_TEXT;
; 1146 : 
; 1147 :     /* There are no "black-listed" or "white-listed" bytes:
; 1148 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1149 :      */
; 1150 :     return Z_BINARY;

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 1151 : }

  00066	c3		 ret	 0
$LN10@detect_dat:
  00067	5f		 pop	 edi

; 1142 :         return Z_TEXT;

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	5e		 pop	 esi

; 1151 : }

  0006e	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_bi_reverse PROC					; COMDAT
; _code$ = ecx
; _len$ = edx

; 1162 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
$LL4@bi_reverse:

; 1163 :     do {
; 1164 :         res |= code & 1;

  00003	8b f1		 mov	 esi, ecx

; 1165 :         code >>= 1, res <<= 1;
; 1166 :     } while (--len > 0);

  00005	4a		 dec	 edx
  00006	83 e6 01	 and	 esi, 1
  00009	d1 e9		 shr	 ecx, 1
  0000b	0b c6		 or	 eax, esi
  0000d	03 c0		 add	 eax, eax
  0000f	85 d2		 test	 edx, edx
  00011	7f f0		 jg	 SHORT $LL4@bi_reverse

; 1167 :     return res >> 1;

  00013	d1 e8		 shr	 eax, 1
  00015	5e		 pop	 esi

; 1168 : }

  00016	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_bi_flush PROC						; COMDAT
; _s$ = ecx

; 1175 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1176 :     if (s->bi_valid == 16) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	75 37		 jne	 SHORT $LN2@bi_flush

; 1177 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00031	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1178 :         s->bi_buf = 0;

  00034	33 c0		 xor	 eax, eax

; 1179 :         s->bi_valid = 0;

  00036	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax

; 1182 :         s->bi_buf >>= 8;

  0003c	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00043	5e		 pop	 esi

; 1184 :     }
; 1185 : }

  00044	c3		 ret	 0
$LN2@bi_flush:

; 1180 :     } else if (s->bi_valid >= 8) {

  00045	83 f8 08	 cmp	 eax, 8
  00048	7c 27		 jl	 SHORT $LN4@bi_flush

; 1181 :         put_byte(s, (Byte)s->bi_buf);

  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00050	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
  00056	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1182 :         s->bi_buf >>= 8;

  00059	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00060	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1183 :         s->bi_valid -= 8;

  00063	83 86 bc 16 00
	00 f8		 add	 DWORD PTR [esi+5820], -8 ; fffffff8H
  0006a	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
$LN4@bi_flush:
  00071	5e		 pop	 esi

; 1184 :     }
; 1185 : }

  00072	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\usuarios\gustavo\descargas\zlib-1.2.11\zlib-1.2.11\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_bi_windup PROC						; COMDAT
; _s$ = ecx

; 1192 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1193 :     if (s->bi_valid > 8) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 22		 jle	 SHORT $LN2@bi_windup

; 1194 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	eb 10		 jmp	 SHORT $LN6@bi_windup
$LN2@bi_windup:

; 1195 :     } else if (s->bi_valid > 0) {

  00030	85 c0		 test	 eax, eax
  00032	7e 12		 jle	 SHORT $LN4@bi_windup

; 1196 :         put_byte(s, (Byte)s->bi_buf);

  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
$LN6@bi_windup:
  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	ff 46 14	 inc	 DWORD PTR [esi+20]
$LN4@bi_windup:

; 1197 :     }
; 1198 :     s->bi_buf = 0;

  00046	33 c0		 xor	 eax, eax
  00048	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax

; 1199 :     s->bi_valid = 0;

  0004f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00055	5e		 pop	 esi

; 1200 : #ifdef ZLIB_DEBUG
; 1201 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1202 : #endif
; 1203 : }

  00056	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
END
